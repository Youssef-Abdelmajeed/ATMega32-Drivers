
toggle led with timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000520  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000520  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800078  00800078  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001198  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000844  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072c  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a6  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000825  00000000  00000000  000031ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000039df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__vector_4>
  14:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_10>
  2c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  8a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	70 f0       	brcs	.+28     	; 0xb2 <DIO_setPinDirection+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
  96:	28 ef       	ldi	r18, 0xF8	; 248
  98:	28 0f       	add	r18, r24
  9a:	28 30       	cpi	r18, 0x08	; 8
  9c:	58 f0       	brcs	.+22     	; 0xb4 <DIO_setPinDirection+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
  9e:	20 ef       	ldi	r18, 0xF0	; 240
  a0:	28 0f       	add	r18, r24
  a2:	28 30       	cpi	r18, 0x08	; 8
  a4:	38 f0       	brcs	.+14     	; 0xb4 <DIO_setPinDirection+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
  a6:	28 ee       	ldi	r18, 0xE8	; 232
  a8:	28 0f       	add	r18, r24
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	18 f0       	brcs	.+6      	; 0xb4 <DIO_setPinDirection+0x22>
	return NC ; 
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <DIO_setPinDirection+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  b2:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	68 f0       	brcs	.+26     	; 0xd2 <DIO_setPinDirection+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  b8:	98 ef       	ldi	r25, 0xF8	; 248
  ba:	98 0f       	add	r25, r24
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	58 f0       	brcs	.+22     	; 0xd6 <DIO_setPinDirection+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  c0:	90 ef       	ldi	r25, 0xF0	; 240
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	48 f0       	brcs	.+18     	; 0xda <DIO_setPinDirection+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
  c8:	88 51       	subi	r24, 0x18	; 24
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	40 f4       	brcc	.+16     	; 0xde <DIO_setPinDirection+0x4c>
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <DIO_setPinDirection+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
  de:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	df 01       	movw	r26, r30
  ea:	a8 0f       	add	r26, r24
  ec:	b9 1f       	adc	r27, r25
  ee:	aa 0f       	add	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	a0 5a       	subi	r26, 0xA0	; 160
  f4:	bf 4f       	sbci	r27, 0xFF	; 255
  f6:	12 96       	adiw	r26, 0x02	; 2
  f8:	0d 90       	ld	r0, X+
  fa:	bc 91       	ld	r27, X
  fc:	a0 2d       	mov	r26, r0
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
  fe:	e8 0f       	add	r30, r24
 100:	f9 1f       	adc	r31, r25
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
    switch (pinDirection)
 110:	61 30       	cpi	r22, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <DIO_setPinDirection+0xa2>
 114:	18 f0       	brcs	.+6      	; 0x11c <DIO_setPinDirection+0x8a>
 116:	62 30       	cpi	r22, 0x02	; 2
 118:	c1 f0       	breq	.+48     	; 0x14a <DIO_setPinDirection+0xb8>
 11a:	08 95       	ret
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 11c:	3c 91       	ld	r19, X
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_setPinDirection+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_setPinDirection+0x92>
 12c:	80 95       	com	r24
 12e:	83 23       	and	r24, r19
 130:	8c 93       	st	X, r24
        break;
 132:	08 95       	ret
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 134:	3c 91       	ld	r19, X
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xaa>
 144:	83 2b       	or	r24, r19
 146:	8c 93       	st	X, r24
        break;
 148:	08 95       	ret
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
       setBit((*PORTX),pin) ;  
 14a:	30 81       	ld	r19, Z
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_setPinDirection+0xc4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_setPinDirection+0xc0>
 15a:	93 2f       	mov	r25, r19
 15c:	98 2b       	or	r25, r24
 15e:	90 83       	st	Z, r25
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 160:	9c 91       	ld	r25, X
 162:	80 95       	com	r24
 164:	89 23       	and	r24, r25
 166:	8c 93       	st	X, r24
 168:	08 95       	ret

0000016a <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	70 f0       	brcs	.+28     	; 0x18a <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 16e:	28 ef       	ldi	r18, 0xF8	; 248
 170:	28 0f       	add	r18, r24
 172:	28 30       	cpi	r18, 0x08	; 8
 174:	58 f0       	brcs	.+22     	; 0x18c <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 176:	20 ef       	ldi	r18, 0xF0	; 240
 178:	28 0f       	add	r18, r24
 17a:	28 30       	cpi	r18, 0x08	; 8
 17c:	38 f0       	brcs	.+14     	; 0x18c <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 17e:	28 ee       	ldi	r18, 0xE8	; 232
 180:	28 0f       	add	r18, r24
 182:	28 30       	cpi	r18, 0x08	; 8
 184:	18 f0       	brcs	.+6      	; 0x18c <DIO_setPinValue+0x22>
	return NC ; 
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	01 c0       	rjmp	.+2      	; 0x18c <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 18a:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	68 f0       	brcs	.+26     	; 0x1aa <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 190:	98 ef       	ldi	r25, 0xF8	; 248
 192:	98 0f       	add	r25, r24
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	58 f0       	brcs	.+22     	; 0x1ae <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 198:	90 ef       	ldi	r25, 0xF0	; 240
 19a:	98 0f       	add	r25, r24
 19c:	98 30       	cpi	r25, 0x08	; 8
 19e:	48 f0       	brcs	.+18     	; 0x1b2 <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 1a0:	88 51       	subi	r24, 0x18	; 24
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	40 f4       	brcc	.+16     	; 0x1b6 <DIO_setPinValue+0x4c>
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e8 0f       	add	r30, r24
 1c2:	f9 1f       	adc	r31, r25
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	01 90       	ld	r0, Z+
 1ce:	f0 81       	ld	r31, Z
 1d0:	e0 2d       	mov	r30, r0
    switch (value)
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	81 f0       	breq	.+32     	; 0x1f6 <DIO_setPinValue+0x8c>
 1d6:	18 f0       	brcs	.+6      	; 0x1de <DIO_setPinValue+0x74>
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	c1 f0       	breq	.+48     	; 0x20c <DIO_setPinValue+0xa2>
 1dc:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 1de:	30 81       	ld	r19, Z
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x80>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x7c>
 1ee:	80 95       	com	r24
 1f0:	83 23       	and	r24, r19
 1f2:	80 83       	st	Z, r24
        break;    
 1f4:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 1f6:	30 81       	ld	r19, Z
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_setPinValue+0x98>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_setPinValue+0x94>
 206:	83 2b       	or	r24, r19
 208:	80 83       	st	Z, r24
        break;
 20a:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 20c:	30 81       	ld	r19, Z
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setPinValue+0xae>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setPinValue+0xaa>
 21c:	83 27       	eor	r24, r19
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"


inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 222:	8f b7       	in	r24, 0x3f	; 63
 224:	80 68       	ori	r24, 0x80	; 128
 226:	8f bf       	out	0x3f, r24	; 63
 228:	08 95       	ret

0000022a <LED>:
void LED (void)
{
	/* counter to count the number of compare matches */
	static uint16_t counter = 0 ;
	/* if the number of compare matches is 2000 which is equal to 0.5 sec if the compare value was 250 */
	if (counter==2000)
 22a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <counter.1697>
 22e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <counter.1697+0x1>
 232:	80 3d       	cpi	r24, 0xD0	; 208
 234:	97 40       	sbci	r25, 0x07	; 7
 236:	41 f4       	brne	.+16     	; 0x248 <LED+0x1e>
	{
		/* reset the counter */
		counter = 0 ;
 238:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <counter.1697+0x1>
 23c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <counter.1697>
		/* toggle led pin */
		DIO_setPinValue(ledpin,TOGGLE) ;
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
	}
	counter++ ; 
 248:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <counter.1697>
 24c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <counter.1697+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <counter.1697+0x1>
 256:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <counter.1697>
 25a:	08 95       	ret

0000025c <LED2>:
void LED2 (void)
{
	/* counter to count the number of compare matches */
	static uint16_t counter = 0 ;
	/* if the number of compare matches is 4000 which is equal to 1 sec if the compare value was 250 */
	if (counter==4000)
 25c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 260:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 264:	80 3a       	cpi	r24, 0xA0	; 160
 266:	9f 40       	sbci	r25, 0x0F	; 15
 268:	41 f4       	brne	.+16     	; 0x27a <LED2+0x1e>
	{
		/* reset the counter */
		counter = 0 ;
 26a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__data_end+0x1>
 26e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
		/* toggle led pin */
		DIO_setPinValue(ledpin2,TOGGLE) ;
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
	}
	counter++ ;
 27a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 27e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__data_end+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 288:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 28c:	08 95       	ret

0000028e <main>:
void LED (void) ; 
void LED2 (void);

int main(void)
{
    DIO_setPinDirection(ledpin,OUTPUT) ;
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	/*init timer 0 to be in CTC mode and Prescaler to none */
	Timer_Init(TIMER0,Noprescaler,CTC) ;
 296:	42 e0       	ldi	r20, 0x02	; 2
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 ba 01 	call	0x374	; 0x374 <Timer_Init>
	/* set compare match ISR Callback */
	Timer_SetCTC_Callback(TIMER0,&LED) ; 
 2a0:	65 e1       	ldi	r22, 0x15	; 21
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 c7 01 	call	0x38e	; 0x38e <Timer_SetCTC_Callback>
	/* set compare value */
	Timer_SetCTCRegister(TIMER0,250) ; 
 2aa:	6a ef       	ldi	r22, 0xFA	; 250
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Timer_SetCTCRegister>
	/* turn on global interrupt enable */
	
	 DIO_setPinDirection(ledpin2,OUTPUT) ;
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	 /*init timer 0 to be in CTC mode and Prescaler to none */
	 Timer_Init(TIMER2,Noprescaler,CTC) ;
 2ba:	42 e0       	ldi	r20, 0x02	; 2
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 ba 01 	call	0x374	; 0x374 <Timer_Init>
	 /* set compare match ISR Callback */
	 Timer_SetCTC_Callback(TIMER2,&LED2) ;
 2c4:	6e e2       	ldi	r22, 0x2E	; 46
 2c6:	71 e0       	ldi	r23, 0x01	; 1
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 c7 01 	call	0x38e	; 0x38e <Timer_SetCTC_Callback>
	 /* set compare value */
	 Timer_SetCTCRegister(TIMER2,250) ;
 2ce:	6a ef       	ldi	r22, 0xFA	; 250
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Timer_SetCTCRegister>
	 /* turn on global interrupt enable */
	 
	GIE_Enable() ; 
 2d6:	0e 94 11 01 	call	0x222	; 0x222 <GIE_Enable>
 2da:	ff cf       	rjmp	.-2      	; 0x2da <main+0x4c>

000002dc <Timer_SetPrescaller>:
        {
        case TIMER0:
            TCNT0= value ; 
            break;
        case TIMER2:
            TCNT2= value ; 
 2dc:	88 23       	and	r24, r24
 2de:	19 f0       	breq	.+6      	; 0x2e6 <Timer_SetPrescaller+0xa>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	31 f0       	breq	.+12     	; 0x2f0 <Timer_SetPrescaller+0x14>
 2e4:	08 95       	ret
 2e6:	83 b7       	in	r24, 0x33	; 51
 2e8:	88 7f       	andi	r24, 0xF8	; 248
 2ea:	68 2b       	or	r22, r24
 2ec:	63 bf       	out	0x33, r22	; 51
 2ee:	08 95       	ret
 2f0:	85 b5       	in	r24, 0x25	; 37
 2f2:	88 7f       	andi	r24, 0xF8	; 248
 2f4:	68 2b       	or	r22, r24
 2f6:	65 bd       	out	0x25, r22	; 37
 2f8:	08 95       	ret

000002fa <Timer_SetWaveMode>:
 2fa:	88 23       	and	r24, r24
 2fc:	19 f0       	breq	.+6      	; 0x304 <Timer_SetWaveMode+0xa>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	e9 f0       	breq	.+58     	; 0x33c <Timer_SetWaveMode+0x42>
 302:	08 95       	ret
 304:	83 b7       	in	r24, 0x33	; 51
 306:	87 7b       	andi	r24, 0xB7	; 183
 308:	a6 2f       	mov	r26, r22
 30a:	a1 70       	andi	r26, 0x01	; 1
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	00 24       	eor	r0, r0
 310:	b6 95       	lsr	r27
 312:	a7 95       	ror	r26
 314:	07 94       	ror	r0
 316:	b6 95       	lsr	r27
 318:	a7 95       	ror	r26
 31a:	07 94       	ror	r0
 31c:	ba 2f       	mov	r27, r26
 31e:	a0 2d       	mov	r26, r0
 320:	61 fb       	bst	r22, 1
 322:	44 27       	eor	r20, r20
 324:	40 f9       	bld	r20, 0
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	44 0f       	add	r20, r20
 32e:	55 1f       	adc	r21, r21
 330:	44 0f       	add	r20, r20
 332:	55 1f       	adc	r21, r21
 334:	4a 2b       	or	r20, r26
 336:	48 2b       	or	r20, r24
 338:	43 bf       	out	0x33, r20	; 51
 33a:	08 95       	ret
 33c:	85 b5       	in	r24, 0x25	; 37
 33e:	87 7b       	andi	r24, 0xB7	; 183
 340:	e6 2f       	mov	r30, r22
 342:	e1 70       	andi	r30, 0x01	; 1
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	00 24       	eor	r0, r0
 348:	f6 95       	lsr	r31
 34a:	e7 95       	ror	r30
 34c:	07 94       	ror	r0
 34e:	f6 95       	lsr	r31
 350:	e7 95       	ror	r30
 352:	07 94       	ror	r0
 354:	fe 2f       	mov	r31, r30
 356:	e0 2d       	mov	r30, r0
 358:	61 fb       	bst	r22, 1
 35a:	22 27       	eor	r18, r18
 35c:	20 f9       	bld	r18, 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	22 0f       	add	r18, r18
 36a:	33 1f       	adc	r19, r19
 36c:	2e 2b       	or	r18, r30
 36e:	28 2b       	or	r18, r24
 370:	25 bd       	out	0x25, r18	; 37
 372:	08 95       	ret

00000374 <Timer_Init>:
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	c8 2f       	mov	r28, r24
 37a:	d4 2f       	mov	r29, r20
 37c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Timer_SetPrescaller>
 380:	6d 2f       	mov	r22, r29
 382:	8c 2f       	mov	r24, r28
 384:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Timer_SetWaveMode>
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <Timer_SetCTC_Callback>:
 38e:	61 15       	cp	r22, r1
 390:	71 05       	cpc	r23, r1
 392:	b1 f0       	breq	.+44     	; 0x3c0 <Timer_SetCTC_Callback+0x32>
 394:	88 23       	and	r24, r24
 396:	19 f0       	breq	.+6      	; 0x39e <Timer_SetCTC_Callback+0x10>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	51 f0       	breq	.+20     	; 0x3b0 <Timer_SetCTC_Callback+0x22>
 39c:	08 95       	ret
 39e:	89 b7       	in	r24, 0x39	; 57
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	8e 7f       	andi	r24, 0xFE	; 254
 3a4:	89 bf       	out	0x39, r24	; 57
 3a6:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <TIMERS_CTC_ISR+0x1>
 3aa:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <TIMERS_CTC_ISR>
 3ae:	08 95       	ret
 3b0:	89 b7       	in	r24, 0x39	; 57
 3b2:	80 68       	ori	r24, 0x80	; 128
 3b4:	8f 7b       	andi	r24, 0xBF	; 191
 3b6:	89 bf       	out	0x39, r24	; 57
 3b8:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <TIMERS_CTC_ISR+0x3>
 3bc:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <TIMERS_CTC_ISR+0x2>
 3c0:	08 95       	ret

000003c2 <Timer_SetCTCRegister>:
        }
}
void Timer_SetCTCRegister(Timers_t timer,uint8_t value)
{
     /* set value to the corresponding Timer CTC register  */
     switch (timer)
 3c2:	88 23       	and	r24, r24
 3c4:	19 f0       	breq	.+6      	; 0x3cc <Timer_SetCTCRegister+0xa>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <Timer_SetCTCRegister+0xe>
 3ca:	08 95       	ret
        {
        case TIMER0:
            OCR0= value ; 
 3cc:	6c bf       	out	0x3c, r22	; 60
            break;
 3ce:	08 95       	ret

        case TIMER2:
            OCR2= value ; 
 3d0:	63 bd       	out	0x23, r22	; 35
 3d2:	08 95       	ret

000003d4 <__vector_11>:
}

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[0] != ((void *)0))
 3f6:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <TIMERS_NORMAL_ISR>
 3fa:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <TIMERS_NORMAL_ISR+0x1>
 3fe:	30 97       	sbiw	r30, 0x00	; 0
 400:	09 f0       	breq	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
    {
        TIMERS_NORMAL_ISR[0]() ;
 402:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 448:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <TIMERS_CTC_ISR>
 44c:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <TIMERS_CTC_ISR+0x1>
 450:	30 97       	sbiw	r30, 0x00	; 0
 452:	09 f0       	breq	.+2      	; 0x456 <__vector_10+0x30>
    {
        TIMERS_CTC_ISR[0]() ;
 454:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[1] != ((void *)0))
 49a:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <TIMERS_NORMAL_ISR+0x2>
 49e:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <TIMERS_NORMAL_ISR+0x3>
 4a2:	30 97       	sbiw	r30, 0x00	; 0
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__vector_5+0x30>
    {
        TIMERS_NORMAL_ISR[1]() ;
 4a6:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	0f 90       	pop	r0
 4c6:	1f 90       	pop	r1
 4c8:	18 95       	reti

000004ca <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 4ca:	1f 92       	push	r1
 4cc:	0f 92       	push	r0
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	0f 92       	push	r0
 4d2:	11 24       	eor	r1, r1
 4d4:	2f 93       	push	r18
 4d6:	3f 93       	push	r19
 4d8:	4f 93       	push	r20
 4da:	5f 93       	push	r21
 4dc:	6f 93       	push	r22
 4de:	7f 93       	push	r23
 4e0:	8f 93       	push	r24
 4e2:	9f 93       	push	r25
 4e4:	af 93       	push	r26
 4e6:	bf 93       	push	r27
 4e8:	ef 93       	push	r30
 4ea:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[1] != ((void *)0))
 4ec:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <TIMERS_CTC_ISR+0x2>
 4f0:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <TIMERS_CTC_ISR+0x3>
 4f4:	30 97       	sbiw	r30, 0x00	; 0
 4f6:	09 f0       	breq	.+2      	; 0x4fa <__vector_4+0x30>
    {
        TIMERS_CTC_ISR[1]() ;
 4f8:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <_exit>:
 51c:	f8 94       	cli

0000051e <__stop_program>:
 51e:	ff cf       	rjmp	.-2      	; 0x51e <__stop_program>
