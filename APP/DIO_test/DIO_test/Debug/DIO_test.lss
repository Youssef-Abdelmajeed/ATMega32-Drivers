
DIO_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000035c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c1e  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000720  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049f  00000000  00000000  000017f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ba  00000000  00000000  00001d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000420  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  7a:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_setPinDirection>:
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
}

void DIO_setPinDirection(EN_PinNumber_t pinNum,EN_Directions_t pinDirection) 
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  86:	88 30       	cpi	r24, 0x08	; 8
  88:	70 f0       	brcs	.+28     	; 0xa6 <DIO_setPinDirection+0x24>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
  8a:	28 ef       	ldi	r18, 0xF8	; 248
  8c:	28 0f       	add	r18, r24
  8e:	28 30       	cpi	r18, 0x08	; 8
  90:	58 f0       	brcs	.+22     	; 0xa8 <DIO_setPinDirection+0x26>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
  92:	20 ef       	ldi	r18, 0xF0	; 240
  94:	28 0f       	add	r18, r24
  96:	28 30       	cpi	r18, 0x08	; 8
  98:	38 f0       	brcs	.+14     	; 0xa8 <DIO_setPinDirection+0x26>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
  9a:	28 ee       	ldi	r18, 0xE8	; 232
  9c:	28 0f       	add	r18, r24
  9e:	28 30       	cpi	r18, 0x08	; 8
  a0:	18 f0       	brcs	.+6      	; 0xa8 <DIO_setPinDirection+0x26>
	return NC ; 
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <DIO_setPinDirection+0x26>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  a6:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  a8:	88 30       	cpi	r24, 0x08	; 8
  aa:	68 f0       	brcs	.+26     	; 0xc6 <DIO_setPinDirection+0x44>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  ac:	98 ef       	ldi	r25, 0xF8	; 248
  ae:	98 0f       	add	r25, r24
  b0:	98 30       	cpi	r25, 0x08	; 8
  b2:	58 f0       	brcs	.+22     	; 0xca <DIO_setPinDirection+0x48>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  b4:	90 ef       	ldi	r25, 0xF0	; 240
  b6:	98 0f       	add	r25, r24
  b8:	98 30       	cpi	r25, 0x08	; 8
  ba:	48 f0       	brcs	.+18     	; 0xce <DIO_setPinDirection+0x4c>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
  bc:	88 51       	subi	r24, 0x18	; 24
  be:	88 30       	cpi	r24, 0x08	; 8
  c0:	40 f4       	brcc	.+16     	; 0xd2 <DIO_setPinDirection+0x50>
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <DIO_setPinDirection+0x52>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <DIO_setPinDirection+0x52>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <DIO_setPinDirection+0x52>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <DIO_setPinDirection+0x52>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;

    switch (pinDirection)
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	e9 f0       	breq	.+58     	; 0x112 <DIO_setPinDirection+0x90>
  d8:	18 f0       	brcs	.+6      	; 0xe0 <DIO_setPinDirection+0x5e>
  da:	62 30       	cpi	r22, 0x02	; 2
  dc:	91 f1       	breq	.+100    	; 0x142 <DIO_setPinDirection+0xc0>
  de:	59 c0       	rjmp	.+178    	; 0x192 <DIO_setPinDirection+0x110>
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*(DIO_Registers[port][1])),pin) ;
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e8 0f       	add	r30, r24
  ea:	f9 1f       	adc	r31, r25
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	e0 5a       	subi	r30, 0xA0	; 160
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	02 80       	ldd	r0, Z+2	; 0x02
  f6:	f3 81       	ldd	r31, Z+3	; 0x03
  f8:	e0 2d       	mov	r30, r0
  fa:	30 81       	ld	r19, Z
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_setPinDirection+0x84>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	2a 95       	dec	r18
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_setPinDirection+0x80>
 10a:	80 95       	com	r24
 10c:	83 23       	and	r24, r19
 10e:	80 83       	st	Z, r24
        break;
 110:	40 c0       	rjmp	.+128    	; 0x192 <DIO_setPinDirection+0x110>
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*(DIO_Registers[port][1])),pin) ;
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	e8 0f       	add	r30, r24
 11c:	f9 1f       	adc	r31, r25
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e0 5a       	subi	r30, 0xA0	; 160
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	02 80       	ldd	r0, Z+2	; 0x02
 128:	f3 81       	ldd	r31, Z+3	; 0x03
 12a:	e0 2d       	mov	r30, r0
 12c:	30 81       	ld	r19, Z
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_setPinDirection+0xb6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	2a 95       	dec	r18
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_setPinDirection+0xb2>
 13c:	83 2b       	or	r24, r19
 13e:	80 83       	st	Z, r24
        break;
 140:	28 c0       	rjmp	.+80     	; 0x192 <DIO_setPinDirection+0x110>
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*(DIO_Registers[port][0])),pin) ;  
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	df 01       	movw	r26, r30
 14c:	a8 0f       	add	r26, r24
 14e:	b9 1f       	adc	r27, r25
 150:	aa 0f       	add	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	a0 5a       	subi	r26, 0xA0	; 160
 156:	bf 4f       	sbci	r27, 0xFF	; 255
 158:	0d 90       	ld	r0, X+
 15a:	bc 91       	ld	r27, X
 15c:	a0 2d       	mov	r26, r0
 15e:	6c 91       	ld	r22, X
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	ea 01       	movw	r28, r20
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_setPinDirection+0xea>
 168:	cc 0f       	add	r28, r28
 16a:	dd 1f       	adc	r29, r29
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_setPinDirection+0xe6>
 170:	9e 01       	movw	r18, r28
 172:	36 2f       	mov	r19, r22
 174:	32 2b       	or	r19, r18
 176:	3c 93       	st	X, r19
        /* set DDRX to 0 to set as input  */
        clearBit((*(DIO_Registers[port][1])),pin) ;
 178:	e8 0f       	add	r30, r24
 17a:	f9 1f       	adc	r31, r25
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e0 5a       	subi	r30, 0xA0	; 160
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	02 80       	ldd	r0, Z+2	; 0x02
 186:	f3 81       	ldd	r31, Z+3	; 0x03
 188:	e0 2d       	mov	r30, r0
 18a:	80 81       	ld	r24, Z
 18c:	20 95       	com	r18
 18e:	28 23       	and	r18, r24
 190:	20 83       	st	Z, r18
    default:
        /* do nothing */
        break;
    }

}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 198:	88 30       	cpi	r24, 0x08	; 8
 19a:	70 f0       	brcs	.+28     	; 0x1b8 <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 19c:	28 ef       	ldi	r18, 0xF8	; 248
 19e:	28 0f       	add	r18, r24
 1a0:	28 30       	cpi	r18, 0x08	; 8
 1a2:	58 f0       	brcs	.+22     	; 0x1ba <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 1a4:	20 ef       	ldi	r18, 0xF0	; 240
 1a6:	28 0f       	add	r18, r24
 1a8:	28 30       	cpi	r18, 0x08	; 8
 1aa:	38 f0       	brcs	.+14     	; 0x1ba <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 1ac:	28 ee       	ldi	r18, 0xE8	; 232
 1ae:	28 0f       	add	r18, r24
 1b0:	28 30       	cpi	r18, 0x08	; 8
 1b2:	18 f0       	brcs	.+6      	; 0x1ba <DIO_setPinValue+0x22>
	return NC ; 
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 1b8:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	68 f0       	brcs	.+26     	; 0x1d8 <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 1be:	98 ef       	ldi	r25, 0xF8	; 248
 1c0:	98 0f       	add	r25, r24
 1c2:	98 30       	cpi	r25, 0x08	; 8
 1c4:	58 f0       	brcs	.+22     	; 0x1dc <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 1c6:	90 ef       	ldi	r25, 0xF0	; 240
 1c8:	98 0f       	add	r25, r24
 1ca:	98 30       	cpi	r25, 0x08	; 8
 1cc:	48 f0       	brcs	.+18     	; 0x1e0 <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 1ce:	88 51       	subi	r24, 0x18	; 24
 1d0:	88 30       	cpi	r24, 0x08	; 8
 1d2:	40 f4       	brcc	.+16     	; 0x1e4 <DIO_setPinValue+0x4c>
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	07 c0       	rjmp	.+14     	; 0x1e6 <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
   
    switch (value)
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	e9 f0       	breq	.+58     	; 0x224 <DIO_setPinValue+0x8c>
 1ea:	18 f0       	brcs	.+6      	; 0x1f2 <DIO_setPinValue+0x5a>
 1ec:	62 30       	cpi	r22, 0x02	; 2
 1ee:	91 f1       	breq	.+100    	; 0x254 <DIO_setPinValue+0xbc>
 1f0:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*(DIO_Registers[port][0])),pin) ;
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e8 0f       	add	r30, r24
 1fc:	f9 1f       	adc	r31, r25
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e0 5a       	subi	r30, 0xA0	; 160
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	01 90       	ld	r0, Z+
 208:	f0 81       	ld	r31, Z
 20a:	e0 2d       	mov	r30, r0
 20c:	30 81       	ld	r19, Z
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setPinValue+0x80>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setPinValue+0x7c>
 21c:	80 95       	com	r24
 21e:	83 23       	and	r24, r19
 220:	80 83       	st	Z, r24
        break;    
 222:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*(DIO_Registers[port][0])),pin) ;
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e8 0f       	add	r30, r24
 22e:	f9 1f       	adc	r31, r25
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31
 234:	e0 5a       	subi	r30, 0xA0	; 160
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	01 90       	ld	r0, Z+
 23a:	f0 81       	ld	r31, Z
 23c:	e0 2d       	mov	r30, r0
 23e:	30 81       	ld	r19, Z
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_setPinValue+0xb2>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	2a 95       	dec	r18
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_setPinValue+0xae>
 24e:	83 2b       	or	r24, r19
 250:	80 83       	st	Z, r24
        break;
 252:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*(DIO_Registers[port][0])),pin) ;
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	ee 0f       	add	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	e8 0f       	add	r30, r24
 25e:	f9 1f       	adc	r31, r25
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	e0 5a       	subi	r30, 0xA0	; 160
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	01 90       	ld	r0, Z+
 26a:	f0 81       	ld	r31, Z
 26c:	e0 2d       	mov	r30, r0
 26e:	30 81       	ld	r19, Z
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_setPinValue+0xe2>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	2a 95       	dec	r18
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_setPinValue+0xde>
 27e:	83 27       	eor	r24, r19
 280:	80 83       	st	Z, r24
 282:	08 95       	ret

00000284 <DIO_getPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 284:	88 30       	cpi	r24, 0x08	; 8
 286:	70 f0       	brcs	.+28     	; 0x2a4 <DIO_getPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 288:	28 ef       	ldi	r18, 0xF8	; 248
 28a:	28 0f       	add	r18, r24
 28c:	28 30       	cpi	r18, 0x08	; 8
 28e:	58 f0       	brcs	.+22     	; 0x2a6 <DIO_getPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 290:	20 ef       	ldi	r18, 0xF0	; 240
 292:	28 0f       	add	r18, r24
 294:	28 30       	cpi	r18, 0x08	; 8
 296:	38 f0       	brcs	.+14     	; 0x2a6 <DIO_getPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 298:	28 ee       	ldi	r18, 0xE8	; 232
 29a:	28 0f       	add	r18, r24
 29c:	28 30       	cpi	r18, 0x08	; 8
 29e:	18 f0       	brcs	.+6      	; 0x2a6 <DIO_getPinValue+0x22>
	return NC ; 
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <DIO_getPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 2a4:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 2a6:	88 30       	cpi	r24, 0x08	; 8
 2a8:	68 f0       	brcs	.+26     	; 0x2c4 <DIO_getPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 2aa:	98 ef       	ldi	r25, 0xF8	; 248
 2ac:	98 0f       	add	r25, r24
 2ae:	98 30       	cpi	r25, 0x08	; 8
 2b0:	58 f0       	brcs	.+22     	; 0x2c8 <DIO_getPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 2b2:	90 ef       	ldi	r25, 0xF0	; 240
 2b4:	98 0f       	add	r25, r24
 2b6:	98 30       	cpi	r25, 0x08	; 8
 2b8:	48 f0       	brcs	.+18     	; 0x2cc <DIO_getPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 2ba:	88 51       	subi	r24, 0x18	; 24
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	40 f4       	brcc	.+16     	; 0x2d0 <DIO_getPinValue+0x4c>
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <DIO_getPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <DIO_getPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <DIO_getPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <DIO_getPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
  
   /* return pin value */
    return getBit((*(DIO_Registers[port][2])) ,pin);
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	e8 0f       	add	r30, r24
 2dc:	f9 1f       	adc	r31, r25
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	e0 5a       	subi	r30, 0xA0	; 160
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	04 80       	ldd	r0, Z+4	; 0x04
 2e8:	f5 81       	ldd	r31, Z+5	; 0x05
 2ea:	e0 2d       	mov	r30, r0
 2ec:	80 81       	ld	r24, Z
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_getPinValue+0x72>
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	2a 95       	dec	r18
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_getPinValue+0x6e>
}
 2fa:	81 70       	andi	r24, 0x01	; 1
 2fc:	08 95       	ret

000002fe <main>:
#include <util/delay.h>
#include "DIO_INT.h"

int main(void)
{
	DIO_setPinDirection(PA0,OUTPUT) ;
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
	DIO_setPinDirection(PD0,INPUT_PULLUP) ; 
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	88 e1       	ldi	r24, 0x18	; 24
 30a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_setPinDirection>
    _Bool flag = 0 ; 
 30e:	c0 e0       	ldi	r28, 0x00	; 0
	while (1) 
    {
		if (flag)
 310:	cc 23       	and	r28, r28
 312:	69 f0       	breq	.+26     	; 0x32e <main+0x30>
		{
			DIO_setPinValue(PA0,TOGGLE) ;
 314:	62 e0       	ldi	r22, 0x02	; 2
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	2f e5       	ldi	r18, 0x5F	; 95
 31e:	8a ee       	ldi	r24, 0xEA	; 234
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	21 50       	subi	r18, 0x01	; 1
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	90 40       	sbci	r25, 0x00	; 0
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x24>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x2e>
 32c:	00 00       	nop
			_delay_ms(300) ;
		}
		
		/* debouncing */
		if (DIO_getPinValue(PD0)==0)
 32e:	88 e1       	ldi	r24, 0x18	; 24
 330:	0e 94 42 01 	call	0x284	; 0x284 <DIO_getPinValue>
 334:	81 11       	cpse	r24, r1
 336:	ec cf       	rjmp	.-40     	; 0x310 <main+0x12>
 338:	2f e5       	ldi	r18, 0x5F	; 95
 33a:	8a ee       	ldi	r24, 0xEA	; 234
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <main+0x40>
 346:	00 c0       	rjmp	.+0      	; 0x348 <main+0x4a>
 348:	00 00       	nop
		{
			_delay_ms(300) ; 
			if (DIO_getPinValue(PD0)==1)
 34a:	88 e1       	ldi	r24, 0x18	; 24
 34c:	0e 94 42 01 	call	0x284	; 0x284 <DIO_getPinValue>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	f1 f6       	brne	.-68     	; 0x310 <main+0x12>
			{
				flag = !flag ;
 354:	c8 27       	eor	r28, r24
 356:	dc cf       	rjmp	.-72     	; 0x310 <main+0x12>

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
