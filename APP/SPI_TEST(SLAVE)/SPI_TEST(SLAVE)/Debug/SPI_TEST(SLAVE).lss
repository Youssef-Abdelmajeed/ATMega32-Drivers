
SPI_TEST(SLAVE).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000344  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800078  00800078  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001029  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082f  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073b  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058b  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  00002b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000321f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  8a:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
   /* return pin value */
    return getBit((*PINX) ,pin);
}
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	70 f0       	brcs	.+28     	; 0xb2 <DIO_setPinDirection+0x20>
  96:	28 ef       	ldi	r18, 0xF8	; 248
  98:	28 0f       	add	r18, r24
  9a:	28 30       	cpi	r18, 0x08	; 8
  9c:	58 f0       	brcs	.+22     	; 0xb4 <DIO_setPinDirection+0x22>
  9e:	20 ef       	ldi	r18, 0xF0	; 240
  a0:	28 0f       	add	r18, r24
  a2:	28 30       	cpi	r18, 0x08	; 8
  a4:	38 f0       	brcs	.+14     	; 0xb4 <DIO_setPinDirection+0x22>
  a6:	28 ee       	ldi	r18, 0xE8	; 232
  a8:	28 0f       	add	r18, r24
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	18 f0       	brcs	.+6      	; 0xb4 <DIO_setPinDirection+0x22>
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <DIO_setPinDirection+0x22>
  b2:	28 2f       	mov	r18, r24
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	68 f0       	brcs	.+26     	; 0xd2 <DIO_setPinDirection+0x40>
  b8:	98 ef       	ldi	r25, 0xF8	; 248
  ba:	98 0f       	add	r25, r24
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	58 f0       	brcs	.+22     	; 0xd6 <DIO_setPinDirection+0x44>
  c0:	90 ef       	ldi	r25, 0xF0	; 240
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	48 f0       	brcs	.+18     	; 0xda <DIO_setPinDirection+0x48>
  c8:	88 51       	subi	r24, 0x18	; 24
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	40 f4       	brcc	.+16     	; 0xde <DIO_setPinDirection+0x4c>
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <DIO_setPinDirection+0x4e>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <DIO_setPinDirection+0x4e>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <DIO_setPinDirection+0x4e>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <DIO_setPinDirection+0x4e>
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	df 01       	movw	r26, r30
  ea:	a8 0f       	add	r26, r24
  ec:	b9 1f       	adc	r27, r25
  ee:	aa 0f       	add	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	a0 5a       	subi	r26, 0xA0	; 160
  f4:	bf 4f       	sbci	r27, 0xFF	; 255
  f6:	12 96       	adiw	r26, 0x02	; 2
  f8:	0d 90       	ld	r0, X+
  fa:	bc 91       	ld	r27, X
  fc:	a0 2d       	mov	r26, r0
  fe:	e8 0f       	add	r30, r24
 100:	f9 1f       	adc	r31, r25
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
 110:	61 30       	cpi	r22, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <DIO_setPinDirection+0xa2>
 114:	18 f0       	brcs	.+6      	; 0x11c <DIO_setPinDirection+0x8a>
 116:	62 30       	cpi	r22, 0x02	; 2
 118:	c1 f0       	breq	.+48     	; 0x14a <DIO_setPinDirection+0xb8>
 11a:	08 95       	ret
 11c:	3c 91       	ld	r19, X
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_setPinDirection+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_setPinDirection+0x92>
 12c:	80 95       	com	r24
 12e:	83 23       	and	r24, r19
 130:	8c 93       	st	X, r24
 132:	08 95       	ret
 134:	3c 91       	ld	r19, X
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xaa>
 144:	83 2b       	or	r24, r19
 146:	8c 93       	st	X, r24
 148:	08 95       	ret
 14a:	30 81       	ld	r19, Z
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_setPinDirection+0xc4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_setPinDirection+0xc0>
 15a:	93 2f       	mov	r25, r19
 15c:	98 2b       	or	r25, r24
 15e:	90 83       	st	Z, r25
 160:	9c 91       	ld	r25, X
 162:	80 95       	com	r24
 164:	89 23       	and	r24, r25
 166:	8c 93       	st	X, r24
 168:	08 95       	ret

0000016a <DIO_setPinValue>:
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	70 f0       	brcs	.+28     	; 0x18a <DIO_setPinValue+0x20>
 16e:	28 ef       	ldi	r18, 0xF8	; 248
 170:	28 0f       	add	r18, r24
 172:	28 30       	cpi	r18, 0x08	; 8
 174:	58 f0       	brcs	.+22     	; 0x18c <DIO_setPinValue+0x22>
 176:	20 ef       	ldi	r18, 0xF0	; 240
 178:	28 0f       	add	r18, r24
 17a:	28 30       	cpi	r18, 0x08	; 8
 17c:	38 f0       	brcs	.+14     	; 0x18c <DIO_setPinValue+0x22>
 17e:	28 ee       	ldi	r18, 0xE8	; 232
 180:	28 0f       	add	r18, r24
 182:	28 30       	cpi	r18, 0x08	; 8
 184:	18 f0       	brcs	.+6      	; 0x18c <DIO_setPinValue+0x22>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	01 c0       	rjmp	.+2      	; 0x18c <DIO_setPinValue+0x22>
 18a:	28 2f       	mov	r18, r24
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	68 f0       	brcs	.+26     	; 0x1aa <DIO_setPinValue+0x40>
 190:	98 ef       	ldi	r25, 0xF8	; 248
 192:	98 0f       	add	r25, r24
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	58 f0       	brcs	.+22     	; 0x1ae <DIO_setPinValue+0x44>
 198:	90 ef       	ldi	r25, 0xF0	; 240
 19a:	98 0f       	add	r25, r24
 19c:	98 30       	cpi	r25, 0x08	; 8
 19e:	48 f0       	brcs	.+18     	; 0x1b2 <DIO_setPinValue+0x48>
 1a0:	88 51       	subi	r24, 0x18	; 24
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	40 f4       	brcc	.+16     	; 0x1b6 <DIO_setPinValue+0x4c>
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <DIO_setPinValue+0x4e>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <DIO_setPinValue+0x4e>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <DIO_setPinValue+0x4e>
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <DIO_setPinValue+0x4e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e8 0f       	add	r30, r24
 1c2:	f9 1f       	adc	r31, r25
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	01 90       	ld	r0, Z+
 1ce:	f0 81       	ld	r31, Z
 1d0:	e0 2d       	mov	r30, r0
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	81 f0       	breq	.+32     	; 0x1f6 <DIO_setPinValue+0x8c>
 1d6:	18 f0       	brcs	.+6      	; 0x1de <DIO_setPinValue+0x74>
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	c1 f0       	breq	.+48     	; 0x20c <DIO_setPinValue+0xa2>
 1dc:	08 95       	ret
 1de:	30 81       	ld	r19, Z
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x80>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x7c>
 1ee:	80 95       	com	r24
 1f0:	83 23       	and	r24, r19
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret
 1f6:	30 81       	ld	r19, Z
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_setPinValue+0x98>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_setPinValue+0x94>
 206:	83 2b       	or	r24, r19
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret
 20c:	30 81       	ld	r19, Z
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setPinValue+0xae>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setPinValue+0xaa>
 21c:	83 27       	eor	r24, r19
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	fc 01       	movw	r30, r24
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	df 01       	movw	r26, r30
 22c:	a8 0f       	add	r26, r24
 22e:	b9 1f       	adc	r27, r25
 230:	aa 0f       	add	r26, r26
 232:	bb 1f       	adc	r27, r27
 234:	a0 5a       	subi	r26, 0xA0	; 160
 236:	bf 4f       	sbci	r27, 0xFF	; 255
 238:	12 96       	adiw	r26, 0x02	; 2
 23a:	0d 90       	ld	r0, X+
 23c:	bc 91       	ld	r27, X
 23e:	a0 2d       	mov	r26, r0
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 240:	e8 0f       	add	r30, r24
 242:	f9 1f       	adc	r31, r25
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e0 5a       	subi	r30, 0xA0	; 160
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	01 90       	ld	r0, Z+
 24e:	f0 81       	ld	r31, Z
 250:	e0 2d       	mov	r30, r0
	
    switch (pinDirection)
 252:	61 30       	cpi	r22, 0x01	; 1
 254:	31 f0       	breq	.+12     	; 0x262 <DIO_setPortDirection+0x40>
 256:	18 f0       	brcs	.+6      	; 0x25e <DIO_setPortDirection+0x3c>
 258:	62 30       	cpi	r22, 0x02	; 2
 25a:	31 f0       	breq	.+12     	; 0x268 <DIO_setPortDirection+0x46>
 25c:	08 95       	ret
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 25e:	1c 92       	st	X, r1
        break;
 260:	08 95       	ret
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	8c 93       	st	X, r24
        break;
 266:	08 95       	ret
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 26c:	1c 92       	st	X, r1
 26e:	08 95       	ret

00000270 <DIO_setPortValue>:
}

void DIO_setPortValue(EN_PortNumber_t portNum,uint8_t value) 
{
	/* select PORTX Register */
    volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	fc 01       	movw	r30, r24
 274:	ee 0f       	add	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	e8 0f       	add	r30, r24
 27a:	f9 1f       	adc	r31, r25
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e0 5a       	subi	r30, 0xA0	; 160
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	01 90       	ld	r0, Z+
 286:	f0 81       	ld	r31, Z
 288:	e0 2d       	mov	r30, r0
	/* set the port value */	
    *PORTX = value ;
 28a:	60 83       	st	Z, r22
 28c:	08 95       	ret

0000028e <main>:
uint8_t spi_data = 0 ; 

int main(void)
{
	/*test pin output*/
	DIO_setPortDirection(PORTA,OUTPUT) ;
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 11 01 	call	0x222	; 0x222 <DIO_setPortDirection>
	DIO_setPinValue(PB4,INPUT) ;  
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
	DIO_setPinDirection(PB5,INPUT) ;
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	8d e0       	ldi	r24, 0x0D	; 13
 2a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(PB6,OUTPUT) ;
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	8e e0       	ldi	r24, 0x0E	; 14
 2aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(PB7,INPUT) ;
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	SPI_SlaveInit(0,MSB_FIRST) ; 
 2b6:	62 e0       	ldi	r22, 0x02	; 2
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 70 01 	call	0x2e0	; 0x2e0 <SPI_SlaveInit>

    while (1) 
    {
		spi_data = SPI_Tranceive(0X01) ;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 9b 01 	call	0x336	; 0x336 <SPI_Tranceive>
 2c4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	87 ec       	ldi	r24, 0xC7	; 199
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <main+0x3e>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x44>
 2d2:	00 00       	nop
		_delay_us(100);
		DIO_setPortValue(PORTA,spi_data) ; 
 2d4:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__data_end>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 38 01 	call	0x270	; 0x270 <DIO_setPortValue>
 2de:	ef cf       	rjmp	.-34     	; 0x2be <main+0x30>

000002e0 <SPI_SlaveInit>:
{
    /*Wait for data to be transmitted*/
    while (getBit(SPSR,SPSR_SPIF)!=1) ;
    /* return data*/ 
    return SPDR ; 
}
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	40 f4       	brcc	.+16     	; 0x2f4 <SPI_SlaveInit+0x14>
 2e4:	9d b1       	in	r25, 0x0d	; 13
 2e6:	93 7f       	andi	r25, 0xF3	; 243
 2e8:	9d b9       	out	0x0d, r25	; 13
 2ea:	88 0f       	add	r24, r24
 2ec:	88 0f       	add	r24, r24
 2ee:	8d b9       	out	0x0d, r24	; 13
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <SPI_SlaveInit+0x16>
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	d1 f4       	brne	.+52     	; 0x32e <SPI_SlaveInit+0x4e>
 2fa:	61 30       	cpi	r22, 0x01	; 1
 2fc:	19 f0       	breq	.+6      	; 0x304 <SPI_SlaveInit+0x24>
 2fe:	62 30       	cpi	r22, 0x02	; 2
 300:	31 f0       	breq	.+12     	; 0x30e <SPI_SlaveInit+0x2e>
 302:	0a c0       	rjmp	.+20     	; 0x318 <SPI_SlaveInit+0x38>
 304:	8d b1       	in	r24, 0x0d	; 13
 306:	80 62       	ori	r24, 0x20	; 32
 308:	8d b9       	out	0x0d, r24	; 13
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	06 c0       	rjmp	.+12     	; 0x31a <SPI_SlaveInit+0x3a>
 30e:	8d b1       	in	r24, 0x0d	; 13
 310:	8f 7d       	andi	r24, 0xDF	; 223
 312:	8d b9       	out	0x0d, r24	; 13
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	01 c0       	rjmp	.+2      	; 0x31a <SPI_SlaveInit+0x3a>
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	51 f4       	brne	.+20     	; 0x332 <SPI_SlaveInit+0x52>
 31e:	8d b1       	in	r24, 0x0d	; 13
 320:	8f 7e       	andi	r24, 0xEF	; 239
 322:	8d b9       	out	0x0d, r24	; 13
 324:	8d b1       	in	r24, 0x0d	; 13
 326:	80 64       	ori	r24, 0x40	; 64
 328:	8d b9       	out	0x0d, r24	; 13
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	08 95       	ret
 332:	84 e0       	ldi	r24, 0x04	; 4
 334:	08 95       	ret

00000336 <SPI_Tranceive>:
uint8_t SPI_Tranceive(uint8_t data)
{
    /*Send Data*/
    SPDR = data; 
 336:	8f b9       	out	0x0f, r24	; 15
    /*Wait for data to be transmitted*/
    while (getBit(SPSR,SPSR_SPIF)!=1) ;
 338:	77 9b       	sbis	0x0e, 7	; 14
 33a:	fe cf       	rjmp	.-4      	; 0x338 <SPI_Tranceive+0x2>
 /* return received data*/ 
    return SPDR ;
 33c:	8f b1       	in	r24, 0x0f	; 15
}  
 33e:	08 95       	ret

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
