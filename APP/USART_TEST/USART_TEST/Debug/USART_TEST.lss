
USART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  0000042a  000004be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000b6  008000b6  00000514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001002  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d7  00000000  00000000  0000163a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b8  00000000  00000000  00001e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006cf  00000000  00000000  00002b77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003246  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8a:	0c 94 13 02 	jmp	0x426	; 0x426 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinValue>:
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
   /* return pin value */
    return getBit((*PINX) ,pin);
}
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	70 f0       	brcs	.+28     	; 0xb2 <DIO_setPinValue+0x20>
  96:	28 ef       	ldi	r18, 0xF8	; 248
  98:	28 0f       	add	r18, r24
  9a:	28 30       	cpi	r18, 0x08	; 8
  9c:	58 f0       	brcs	.+22     	; 0xb4 <DIO_setPinValue+0x22>
  9e:	20 ef       	ldi	r18, 0xF0	; 240
  a0:	28 0f       	add	r18, r24
  a2:	28 30       	cpi	r18, 0x08	; 8
  a4:	38 f0       	brcs	.+14     	; 0xb4 <DIO_setPinValue+0x22>
  a6:	28 ee       	ldi	r18, 0xE8	; 232
  a8:	28 0f       	add	r18, r24
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	18 f0       	brcs	.+6      	; 0xb4 <DIO_setPinValue+0x22>
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <DIO_setPinValue+0x22>
  b2:	28 2f       	mov	r18, r24
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	68 f0       	brcs	.+26     	; 0xd2 <DIO_setPinValue+0x40>
  b8:	98 ef       	ldi	r25, 0xF8	; 248
  ba:	98 0f       	add	r25, r24
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	58 f0       	brcs	.+22     	; 0xd6 <DIO_setPinValue+0x44>
  c0:	90 ef       	ldi	r25, 0xF0	; 240
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	48 f0       	brcs	.+18     	; 0xda <DIO_setPinValue+0x48>
  c8:	88 51       	subi	r24, 0x18	; 24
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	40 f4       	brcc	.+16     	; 0xde <DIO_setPinValue+0x4c>
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <DIO_setPinValue+0x4e>
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <DIO_setPinValue+0x4e>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <DIO_setPinValue+0x4e>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <DIO_setPinValue+0x4e>
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e8 0f       	add	r30, r24
  ea:	f9 1f       	adc	r31, r25
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	e0 5a       	subi	r30, 0xA0	; 160
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	01 90       	ld	r0, Z+
  f6:	f0 81       	ld	r31, Z
  f8:	e0 2d       	mov	r30, r0
  fa:	61 30       	cpi	r22, 0x01	; 1
  fc:	81 f0       	breq	.+32     	; 0x11e <DIO_setPinValue+0x8c>
  fe:	18 f0       	brcs	.+6      	; 0x106 <DIO_setPinValue+0x74>
 100:	62 30       	cpi	r22, 0x02	; 2
 102:	c1 f0       	breq	.+48     	; 0x134 <DIO_setPinValue+0xa2>
 104:	08 95       	ret
 106:	30 81       	ld	r19, Z
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_setPinValue+0x80>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	2a 95       	dec	r18
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_setPinValue+0x7c>
 116:	80 95       	com	r24
 118:	83 23       	and	r24, r19
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret
 11e:	30 81       	ld	r19, Z
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinValue+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinValue+0x94>
 12e:	83 2b       	or	r24, r19
 130:	80 83       	st	Z, r24
 132:	08 95       	ret
 134:	30 81       	ld	r19, Z
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinValue+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinValue+0xaa>
 144:	83 27       	eor	r24, r19
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	df 01       	movw	r26, r30
 154:	a8 0f       	add	r26, r24
 156:	b9 1f       	adc	r27, r25
 158:	aa 0f       	add	r26, r26
 15a:	bb 1f       	adc	r27, r27
 15c:	a0 5a       	subi	r26, 0xA0	; 160
 15e:	bf 4f       	sbci	r27, 0xFF	; 255
 160:	12 96       	adiw	r26, 0x02	; 2
 162:	0d 90       	ld	r0, X+
 164:	bc 91       	ld	r27, X
 166:	a0 2d       	mov	r26, r0
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 168:	e8 0f       	add	r30, r24
 16a:	f9 1f       	adc	r31, r25
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	e0 5a       	subi	r30, 0xA0	; 160
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	01 90       	ld	r0, Z+
 176:	f0 81       	ld	r31, Z
 178:	e0 2d       	mov	r30, r0
	
    switch (pinDirection)
 17a:	61 30       	cpi	r22, 0x01	; 1
 17c:	31 f0       	breq	.+12     	; 0x18a <DIO_setPortDirection+0x40>
 17e:	18 f0       	brcs	.+6      	; 0x186 <DIO_setPortDirection+0x3c>
 180:	62 30       	cpi	r22, 0x02	; 2
 182:	31 f0       	breq	.+12     	; 0x190 <DIO_setPortDirection+0x46>
 184:	08 95       	ret
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 186:	1c 92       	st	X, r1
        break;
 188:	08 95       	ret
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	8c 93       	st	X, r24
        break;
 18e:	08 95       	ret
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 194:	1c 92       	st	X, r1
 196:	08 95       	ret

00000198 <sendString>:
		}
	}
}

void sendString(int8_t * string)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24

	while(*string!='\0')
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <sendString+0x14>
	{
		if (USART_Send(*string)==UART_OK)
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <USART_Send>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	09 f4       	brne	.+2      	; 0x1ac <sendString+0x14>
		{
			string++;
 1aa:	21 96       	adiw	r28, 0x01	; 1
}

void sendString(int8_t * string)
{

	while(*string!='\0')
 1ac:	88 81       	ld	r24, Y
 1ae:	81 11       	cpse	r24, r1
 1b0:	f7 cf       	rjmp	.-18     	; 0x1a0 <sendString+0x8>
			string++;
		}
	}


 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <main>:
#include "DIO_INT.h"
void sendString(int8_t * string) ; 
uint16_t Data_in ; 
int main(void)
{
    USART_Init(USART_8bit,evenParity,twoStopBits);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 6f 01 	call	0x2de	; 0x2de <USART_Init>
	
	USART_SetBaudRate(9600); 
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	95 e2       	ldi	r25, 0x25	; 37
 1c6:	0e 94 96 01 	call	0x32c	; 0x32c <USART_SetBaudRate>
	 
	DIO_setPortDirection(PORTA,OUTPUT) ;
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_setPortDirection>
		sendString("HI I am Youssef :)") ;
		sendString("\r\n") ;
		sendString("HI in new line ");
		sendString("\r\n") ;
		*/
		USART_Receive(&Data_in) ; 
 1d2:	86 eb       	ldi	r24, 0xB6	; 182
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 bc 01 	call	0x378	; 0x378 <USART_Receive>
		if (Data_in=='A')
 1da:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <__data_end>
 1de:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <__data_end+0x1>
 1e2:	81 34       	cpi	r24, 0x41	; 65
 1e4:	91 05       	cpc	r25, r1
 1e6:	49 f4       	brne	.+18     	; 0x1fa <main+0x42>
		{
			DIO_setPinValue(PA0,HIGH) ; 
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinValue>
			sendString("\r\nLED1 IS ON\r\n") ; 
 1f0:	88 e7       	ldi	r24, 0x78	; 120
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 cc 00 	call	0x198	; 0x198 <sendString>
 1f8:	ec cf       	rjmp	.-40     	; 0x1d2 <main+0x1a>
		}
		else if (Data_in =='B')
 1fa:	82 34       	cpi	r24, 0x42	; 66
 1fc:	91 05       	cpc	r25, r1
 1fe:	49 f4       	brne	.+18     	; 0x212 <main+0x5a>
		{
			DIO_setPinValue(PA1,HIGH) ;
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinValue>
			sendString("\r\nLED2 IS ON\r\n") ;
 208:	87 e8       	ldi	r24, 0x87	; 135
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 cc 00 	call	0x198	; 0x198 <sendString>
 210:	e0 cf       	rjmp	.-64     	; 0x1d2 <main+0x1a>
		}
		else if(Data_in == 'C')
 212:	83 34       	cpi	r24, 0x43	; 67
 214:	91 05       	cpc	r25, r1
 216:	49 f4       	brne	.+18     	; 0x22a <main+0x72>
		{
			DIO_setPinValue(PA2,HIGH) ;
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinValue>
			sendString("\r\nLED3 IS ON\r\n") ;
 220:	86 e9       	ldi	r24, 0x96	; 150
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 cc 00 	call	0x198	; 0x198 <sendString>
 228:	d4 cf       	rjmp	.-88     	; 0x1d2 <main+0x1a>
		}
		else
		{
			DIO_setPinValue(PA0,LOW) ;
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinValue>
			DIO_setPinValue(PA1,LOW) ;
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinValue>
			DIO_setPinValue(PA2,LOW) ;
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinValue>
			sendString("\r\nLEDs IS OFF\r\n") ;
 242:	85 ea       	ldi	r24, 0xA5	; 165
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 cc 00 	call	0x198	; 0x198 <sendString>
 24a:	c3 cf       	rjmp	.-122    	; 0x1d2 <main+0x1a>

0000024c <USART_SelectDataSize>:
uint8_t global_No_of_Bits ;

static uint8_t USART_SelectDataSize(uint8_t dataSize)
{
    uint8_t errorState ; 
    if(dataSize>7||dataSize==4||dataSize==5||dataSize==6)
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	c0 f4       	brcc	.+48     	; 0x280 <USART_SelectDataSize+0x34>
 250:	84 30       	cpi	r24, 0x04	; 4
 252:	c1 f0       	breq	.+48     	; 0x284 <USART_SelectDataSize+0x38>
 254:	85 30       	cpi	r24, 0x05	; 5
 256:	c1 f0       	breq	.+48     	; 0x288 <USART_SelectDataSize+0x3c>
 258:	86 30       	cpi	r24, 0x06	; 6
 25a:	c1 f0       	breq	.+48     	; 0x28c <USART_SelectDataSize+0x40>
    {
        errorState = WRONG_SIZE ; 
    }
    else 
    {
        global_No_of_Bits = dataSize ; 
 25c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <global_No_of_Bits>
        /* Set MSB of dataSize in the bit 2 in UCSRA register */
        UCSRA |= (dataSize&0X04) ;
 260:	9b b1       	in	r25, 0x0b	; 11
 262:	28 2f       	mov	r18, r24
 264:	24 70       	andi	r18, 0x04	; 4
 266:	92 2b       	or	r25, r18
 268:	9b b9       	out	0x0b, r25	; 11

        /* Set LSB of dataSize in bits 2:1 in UCSRC placeholder */
        UCSRC_TEMP |= (dataSize&0x03)<<1 ;  
 26a:	83 70       	andi	r24, 0x03	; 3
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <UCSRC_TEMP>
 276:	89 2b       	or	r24, r25
 278:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <UCSRC_TEMP>
        
        errorState = UART_OK ; 
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	08 95       	ret
static uint8_t USART_SelectDataSize(uint8_t dataSize)
{
    uint8_t errorState ; 
    if(dataSize>7||dataSize==4||dataSize==5||dataSize==6)
    {
        errorState = WRONG_SIZE ; 
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	08 95       	ret
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	08 95       	ret
 28c:	81 e0       	ldi	r24, 0x01	; 1
        UCSRC_TEMP |= (dataSize&0x03)<<1 ;  
        
        errorState = UART_OK ; 
    }
    return errorState ;  
}
 28e:	08 95       	ret

00000290 <USART_SetParity>:
static uint8_t USART_SetParity(uint8_t parityMode)
{
    uint8_t errorState ; 
    if(parityMode>3 ||parityMode==1)
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	68 f4       	brcc	.+26     	; 0x2ae <USART_SetParity+0x1e>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	69 f0       	breq	.+26     	; 0x2b2 <USART_SetParity+0x22>
        errorState = WRONG_Parity ; 
    }
    else 
    {
        /*Set bits 5:4 of parityMode in UCSRC placeholder */
        UCSRC_TEMP |= (parityMode<<0x04) ; 
 298:	20 e1       	ldi	r18, 0x10	; 16
 29a:	82 9f       	mul	r24, r18
 29c:	c0 01       	movw	r24, r0
 29e:	11 24       	eor	r1, r1
 2a0:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <UCSRC_TEMP>
 2a4:	89 2b       	or	r24, r25
 2a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <UCSRC_TEMP>

        errorState = UART_OK ; 
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	08 95       	ret
static uint8_t USART_SetParity(uint8_t parityMode)
{
    uint8_t errorState ; 
    if(parityMode>3 ||parityMode==1)
    {
        errorState = WRONG_Parity ; 
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	08 95       	ret
 2b2:	83 e0       	ldi	r24, 0x03	; 3
        UCSRC_TEMP |= (parityMode<<0x04) ; 

        errorState = UART_OK ; 
    }
    return errorState ; 
}
 2b4:	08 95       	ret

000002b6 <USART_SetStopBits>:
static uint8_t USART_SetStopBits(uint8_t StopBits)
{
    uint8_t errorState  ; 
	if (StopBits==oneStopBit)
 2b6:	81 11       	cpse	r24, r1
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <USART_SetStopBits+0x12>
	{
		clearBit(UCSRC_TEMP,UCSRC_USBS) ;
 2ba:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <UCSRC_TEMP>
 2be:	87 7f       	andi	r24, 0xF7	; 247
 2c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <UCSRC_TEMP>
		errorState = UART_OK ; 
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	08 95       	ret
	}
	else if (StopBits==twoStopBits)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	39 f4       	brne	.+14     	; 0x2da <USART_SetStopBits+0x24>
	{
		setBit(UCSRC_TEMP,UCSRC_USBS) ; 
 2cc:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <UCSRC_TEMP>
 2d0:	88 60       	ori	r24, 0x08	; 8
 2d2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <UCSRC_TEMP>
		errorState = UART_OK ; 
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	08 95       	ret
	}
	else
	{
		errorState = WRONG_STOP_BITS ; 
 2da:	84 e0       	ldi	r24, 0x04	; 4
	}
    return errorState ; 
}
 2dc:	08 95       	ret

000002de <USART_Init>:
uint8_t USART_Init(uint8_t dataSize, uint8_t parityMode, uint8_t stopBits)
{
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	c6 2f       	mov	r28, r22
 2e4:	d4 2f       	mov	r29, r20
    /* initialized UCSRC placeholder and select UCSRC */
    UCSRC_TEMP = 0 ;
	/* Select UCSRC Register */ 
	setBit(UCSRC_TEMP,UCSRC_URSEL) ;
 2e6:	90 e8       	ldi	r25, 0x80	; 128
 2e8:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <UCSRC_TEMP>
	/* TX enable */
	setBit(UCSRB,UCSRB_TXEN) ;
 2ec:	9a b1       	in	r25, 0x0a	; 10
 2ee:	98 60       	ori	r25, 0x08	; 8
 2f0:	9a b9       	out	0x0a, r25	; 10
	/* RX enable */
	setBit(UCSRB,UCSRB_RXEN) ;
 2f2:	9a b1       	in	r25, 0x0a	; 10
 2f4:	90 61       	ori	r25, 0x10	; 16
 2f6:	9a b9       	out	0x0a, r25	; 10

    if(USART_SelectDataSize(dataSize)!=UART_OK)
 2f8:	0e 94 26 01 	call	0x24c	; 0x24c <USART_SelectDataSize>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	71 f4       	brne	.+28     	; 0x31c <USART_Init+0x3e>
    {
        return WRONG_SIZE ;
    }
    if(USART_SetParity(parityMode)!=UART_OK)
 300:	8c 2f       	mov	r24, r28
 302:	0e 94 48 01 	call	0x290	; 0x290 <USART_SetParity>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	59 f4       	brne	.+22     	; 0x320 <USART_Init+0x42>
    {
        return WRONG_Parity; 
    }
    if(USART_SetStopBits(stopBits)!=UART_OK)
 30a:	8d 2f       	mov	r24, r29
 30c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <USART_SetStopBits>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	41 f4       	brne	.+16     	; 0x324 <USART_Init+0x46>
    {
       return WRONG_STOP_BITS ;  
    }
    
    /* Set all selected configuration */
    UCSRC = UCSRC_TEMP ; 
 314:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <UCSRC_TEMP>
 318:	90 bd       	out	0x20, r25	; 32
	
	return UART_OK ; 
 31a:	05 c0       	rjmp	.+10     	; 0x326 <USART_Init+0x48>
	/* RX enable */
	setBit(UCSRB,UCSRB_RXEN) ;

    if(USART_SelectDataSize(dataSize)!=UART_OK)
    {
        return WRONG_SIZE ;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	03 c0       	rjmp	.+6      	; 0x326 <USART_Init+0x48>
    }
    if(USART_SetParity(parityMode)!=UART_OK)
    {
        return WRONG_Parity; 
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	01 c0       	rjmp	.+2      	; 0x326 <USART_Init+0x48>
    }
    if(USART_SetStopBits(stopBits)!=UART_OK)
    {
       return WRONG_STOP_BITS ;  
 324:	84 e0       	ldi	r24, 0x04	; 4
    
    /* Set all selected configuration */
    UCSRC = UCSRC_TEMP ; 
	
	return UART_OK ; 
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <USART_SetBaudRate>:
uint8_t USART_SetBaudRate(uint16_t baudRate)
{   uint8_t errorState  ; 
    uint16_t UBRR_Value = ((FOSC/(16UL*baudRate))-1UL); 
 32c:	a0 e0       	ldi	r26, 0x00	; 0
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	aa 1f       	adc	r26, r26
 336:	bb 1f       	adc	r27, r27
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	aa 1f       	adc	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	9c 01       	movw	r18, r24
 342:	ad 01       	movw	r20, r26
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	44 1f       	adc	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	22 0f       	add	r18, r18
 34e:	33 1f       	adc	r19, r19
 350:	44 1f       	adc	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	72 e1       	ldi	r23, 0x12	; 18
 358:	8a e7       	ldi	r24, 0x7A	; 122
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__udivmodsi4>
 360:	21 50       	subi	r18, 0x01	; 1
 362:	31 09       	sbc	r19, r1
    if (UBRR_Value>4095)
 364:	21 15       	cp	r18, r1
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	38 07       	cpc	r19, r24
 36a:	20 f4       	brcc	.+8      	; 0x374 <USART_SetBaudRate+0x48>
    }
    else
    {
        errorState = UART_OK ;
        /* Set LSB */ 
        UBRRL = (uint8_t)UBRR_Value ; 
 36c:	29 b9       	out	0x09, r18	; 9
        /* Set MSB */
        UBRRH = (uint8_t)UBRR_Value>>8 ;
 36e:	10 bc       	out	0x20, r1	; 32
    {
        errorState = WRONG_BAUD_RATE ; 
    }
    else
    {
        errorState = UART_OK ;
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	08 95       	ret
uint8_t USART_SetBaudRate(uint16_t baudRate)
{   uint8_t errorState  ; 
    uint16_t UBRR_Value = ((FOSC/(16UL*baudRate))-1UL); 
    if (UBRR_Value>4095)
    {
        errorState = WRONG_BAUD_RATE ; 
 374:	85 e0       	ldi	r24, 0x05	; 5
        UBRRL = (uint8_t)UBRR_Value ; 
        /* Set MSB */
        UBRRH = (uint8_t)UBRR_Value>>8 ;
    }
    return errorState ; 
}
 376:	08 95       	ret

00000378 <USART_Receive>:
uint8_t USART_Receive(uint16_t *data)
{
    /* wait for data */
    while (!getBit(UCSRA,UCSRA_RXC)) ; 
 378:	5f 9b       	sbis	0x0b, 7	; 11
 37a:	fe cf       	rjmp	.-4      	; 0x378 <USART_Receive>
  
    if(getBit(UCSRA,UCSRA_PE))
 37c:	5a 99       	sbic	0x0b, 2	; 11
 37e:	19 c0       	rjmp	.+50     	; 0x3b2 <USART_Receive+0x3a>
    {
        /* Parity Error */
        return PARITY_ERROR ;
    }
    if(getBit(UCSRA,UCSRA_DOR))
 380:	5b 99       	sbic	0x0b, 3	; 11
 382:	19 c0       	rjmp	.+50     	; 0x3b6 <USART_Receive+0x3e>
    {
        /* Data OverRun */
        return DATA_OVER_RUN ; 
    }
    if(getBit(UCSRA,UCSRA_FE))
 384:	5c 99       	sbic	0x0b, 4	; 11
 386:	19 c0       	rjmp	.+50     	; 0x3ba <USART_Receive+0x42>
   {
		/* Frame Error */
        return FRAME_ERROR ; 
   }
   
   *data = UDR ; 
 388:	3c b1       	in	r19, 0x0c	; 12
 38a:	23 2f       	mov	r18, r19
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	fc 01       	movw	r30, r24
 390:	31 83       	std	Z+1, r19	; 0x01
 392:	20 83       	st	Z, r18
   if(global_No_of_Bits==USART_9bit)
 394:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <global_No_of_Bits>
 398:	47 30       	cpi	r20, 0x07	; 7
 39a:	89 f4       	brne	.+34     	; 0x3be <USART_Receive+0x46>
   {
		/* Get the ninth data bit of the received character */
		*data |= (getBit(UCSRB,UCSRB_RXB8)<<8);
 39c:	4a b1       	in	r20, 0x0a	; 10
 39e:	46 95       	lsr	r20
 3a0:	41 70       	andi	r20, 0x01	; 1
 3a2:	74 2f       	mov	r23, r20
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	26 2b       	or	r18, r22
 3a8:	37 2b       	or	r19, r23
 3aa:	31 83       	std	Z+1, r19	; 0x01
 3ac:	20 83       	st	Z, r18
   }
 
   return UART_OK ; 
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	08 95       	ret
    while (!getBit(UCSRA,UCSRA_RXC)) ; 
  
    if(getBit(UCSRA,UCSRA_PE))
    {
        /* Parity Error */
        return PARITY_ERROR ;
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	08 95       	ret
    }
    if(getBit(UCSRA,UCSRA_DOR))
    {
        /* Data OverRun */
        return DATA_OVER_RUN ; 
 3b6:	87 e0       	ldi	r24, 0x07	; 7
 3b8:	08 95       	ret
    }
    if(getBit(UCSRA,UCSRA_FE))
   {
		/* Frame Error */
        return FRAME_ERROR ; 
 3ba:	89 e0       	ldi	r24, 0x09	; 9
 3bc:	08 95       	ret
   {
		/* Get the ninth data bit of the received character */
		*data |= (getBit(UCSRB,UCSRB_RXB8)<<8);
   }
 
   return UART_OK ; 
 3be:	82 e0       	ldi	r24, 0x02	; 2
}
 3c0:	08 95       	ret

000003c2 <USART_Send>:
uint8_t USART_Send(uint16_t data)
{
    /* wait till data register is empty */
    while (!getBit(UCSRA,UCSRA_UDRE)); 
 3c2:	5d 9b       	sbis	0x0b, 5	; 11
 3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <USART_Send>

    if(global_No_of_Bits==USART_9bit)
 3c6:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <global_No_of_Bits>
 3ca:	27 30       	cpi	r18, 0x07	; 7
 3cc:	39 f4       	brne	.+14     	; 0x3dc <USART_Send+0x1a>
    {
        /*clear the ninth data bit of data*/
        UCSRB &= UCSRB_TXB8_MASK ; 
 3ce:	2a b1       	in	r18, 0x0a	; 10
 3d0:	2e 7f       	andi	r18, 0xFE	; 254
 3d2:	2a b9       	out	0x0a, r18	; 10
        
        /* Set the new ninth data bit */
        UCSRB|= getBit(data,8) ; 
 3d4:	2a b1       	in	r18, 0x0a	; 10
 3d6:	91 70       	andi	r25, 0x01	; 1
 3d8:	92 2b       	or	r25, r18
 3da:	9a b9       	out	0x0a, r25	; 10
    }

    /* send the first 8 bit of data */
    UDR = (uint8_t)data ;  
 3dc:	8c b9       	out	0x0c, r24	; 12

	return UART_OK ; 
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	08 95       	ret

000003e2 <__udivmodsi4>:
 3e2:	a1 e2       	ldi	r26, 0x21	; 33
 3e4:	1a 2e       	mov	r1, r26
 3e6:	aa 1b       	sub	r26, r26
 3e8:	bb 1b       	sub	r27, r27
 3ea:	fd 01       	movw	r30, r26
 3ec:	0d c0       	rjmp	.+26     	; 0x408 <__udivmodsi4_ep>

000003ee <__udivmodsi4_loop>:
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	ee 1f       	adc	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	a2 17       	cp	r26, r18
 3f8:	b3 07       	cpc	r27, r19
 3fa:	e4 07       	cpc	r30, r20
 3fc:	f5 07       	cpc	r31, r21
 3fe:	20 f0       	brcs	.+8      	; 0x408 <__udivmodsi4_ep>
 400:	a2 1b       	sub	r26, r18
 402:	b3 0b       	sbc	r27, r19
 404:	e4 0b       	sbc	r30, r20
 406:	f5 0b       	sbc	r31, r21

00000408 <__udivmodsi4_ep>:
 408:	66 1f       	adc	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	1a 94       	dec	r1
 412:	69 f7       	brne	.-38     	; 0x3ee <__udivmodsi4_loop>
 414:	60 95       	com	r22
 416:	70 95       	com	r23
 418:	80 95       	com	r24
 41a:	90 95       	com	r25
 41c:	9b 01       	movw	r18, r22
 41e:	ac 01       	movw	r20, r24
 420:	bd 01       	movw	r22, r26
 422:	cf 01       	movw	r24, r30
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
