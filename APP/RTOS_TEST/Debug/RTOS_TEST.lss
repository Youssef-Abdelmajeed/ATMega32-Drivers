
RTOS_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000dc8  00000e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800088  00800088  00000e84  2**0
                  ALLOC
  3 .stab         0000141c  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c9b  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_4>
  14:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_10>
  2c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 22 06 	call	0xc44	; 0xc44 <main>
  8a:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer_SetPrescaler>:
void (*TIMERS_NORMAL_ISR[2])(void) = {NULL,NULL} ;
/*place holder for timers compare match callback */
void (*TIMERS_CTC_ISR[2])(void) = {NULL,NULL} ;

inline void Timer_SetPrescaler(Timers_t timer , prescalerModes_t Pmode)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <Timer_SetPrescaler+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <Timer_SetPrescaler+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	6a 83       	std	Y+2, r22	; 0x02
    /* set the clock mode to the corresponding Timer  */
    switch (timer)
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	28 2f       	mov	r18, r24
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	3c 83       	std	Y+4, r19	; 0x04
  aa:	2b 83       	std	Y+3, r18	; 0x03
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	31 f0       	breq	.+12     	; 0xc0 <Timer_SetPrescaler+0x2e>
  b4:	2b 81       	ldd	r18, Y+3	; 0x03
  b6:	3c 81       	ldd	r19, Y+4	; 0x04
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	31 05       	cpc	r19, r1
  bc:	89 f0       	breq	.+34     	; 0xe0 <Timer_SetPrescaler+0x4e>
  be:	1f c0       	rjmp	.+62     	; 0xfe <Timer_SetPrescaler+0x6c>
    {
    case TIMER0: 
        /* clear Timer0 clock selection bits */
        TCCR0 &= 0XF8 ;
  c0:	a3 e5       	ldi	r26, 0x53	; 83
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e3 e5       	ldi	r30, 0x53	; 83
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 7f       	andi	r24, 0xF8	; 248
  cc:	8c 93       	st	X, r24
        /* set Timer0 new clock mode  */
        TCCR0 |= Pmode ;
  ce:	a3 e5       	ldi	r26, 0x53	; 83
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e3 e5       	ldi	r30, 0x53	; 83
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	89 2b       	or	r24, r25
  dc:	8c 93       	st	X, r24
  de:	0f c0       	rjmp	.+30     	; 0xfe <Timer_SetPrescaler+0x6c>
        break;
    case TIMER2:
        /* clear Timer2 clock selection bits */
        TCCR2 &= 0xF8 ;
  e0:	a5 e4       	ldi	r26, 0x45	; 69
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e4       	ldi	r30, 0x45	; 69
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	8c 93       	st	X, r24
         /* set Timer2 new clock mode  */
        TCCR2 |= Pmode ;
  ee:	a5 e4       	ldi	r26, 0x45	; 69
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e5 e4       	ldi	r30, 0x45	; 69
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	89 2b       	or	r24, r25
  fc:	8c 93       	st	X, r24
        break;
    default:
        /*do nothing*/
        break;
    }
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <Timer_SetWaveMode>:
inline void Timer_SetWaveMode(Timers_t timer , waveModes_t Wmode)
{
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	00 d0       	rcall	.+0      	; 0x112 <Timer_SetWaveMode+0x6>
 112:	00 d0       	rcall	.+0      	; 0x114 <Timer_SetWaveMode+0x8>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	6a 83       	std	Y+2, r22	; 0x02
    /* set the wave mode to the corresponding Timer  */
    switch (timer)
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	3c 83       	std	Y+4, r19	; 0x04
 124:	2b 83       	std	Y+3, r18	; 0x03
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	9c 81       	ldd	r25, Y+4	; 0x04
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	31 f0       	breq	.+12     	; 0x13a <Timer_SetWaveMode+0x2e>
 12e:	2b 81       	ldd	r18, Y+3	; 0x03
 130:	3c 81       	ldd	r19, Y+4	; 0x04
 132:	21 30       	cpi	r18, 0x01	; 1
 134:	31 05       	cpc	r19, r1
 136:	69 f1       	breq	.+90     	; 0x192 <Timer_SetWaveMode+0x86>
 138:	57 c0       	rjmp	.+174    	; 0x1e8 <Timer_SetWaveMode+0xdc>
    {
    case TIMER0:
        /* clear Timer0 Wave mode selection bits */
        TCCR0 &= 0XB7 ;
 13a:	a3 e5       	ldi	r26, 0x53	; 83
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e3 e5       	ldi	r30, 0x53	; 83
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	87 7b       	andi	r24, 0xB7	; 183
 146:	8c 93       	st	X, r24
        /* set Timer0 new wave mode  */
        TCCR0 |= (getBit(Wmode,0)<<TCCR0_WGM00) | (getBit(Wmode,1)<<TCCR0_WGM01)  ; 
 148:	a3 e5       	ldi	r26, 0x53	; 83
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e3 e5       	ldi	r30, 0x53	; 83
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	38 2f       	mov	r19, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	90 70       	andi	r25, 0x00	; 0
 15e:	00 24       	eor	r0, r0
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	07 94       	ror	r0
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	07 94       	ror	r0
 16c:	98 2f       	mov	r25, r24
 16e:	80 2d       	mov	r24, r0
 170:	28 2f       	mov	r18, r24
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	86 95       	lsr	r24
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	90 70       	andi	r25, 0x00	; 0
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	82 2b       	or	r24, r18
 18c:	83 2b       	or	r24, r19
 18e:	8c 93       	st	X, r24
 190:	2b c0       	rjmp	.+86     	; 0x1e8 <Timer_SetWaveMode+0xdc>
        break;
    case TIMER2 : 
         /* clear Timer2 Wave mode selection bits */
        TCCR2 &= 0XB7 ;
 192:	a5 e4       	ldi	r26, 0x45	; 69
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e5 e4       	ldi	r30, 0x45	; 69
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	87 7b       	andi	r24, 0xB7	; 183
 19e:	8c 93       	st	X, r24
        /* set Timer2 new wave mode  */
        TCCR2 |= (getBit(Wmode,0)<<TCCR2_WGM00) | (getBit(Wmode,1)<<TCCR2_WGM01)  ; 
 1a0:	a5 e4       	ldi	r26, 0x45	; 69
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e5 e4       	ldi	r30, 0x45	; 69
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	38 2f       	mov	r19, r24
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	90 70       	andi	r25, 0x00	; 0
 1b6:	00 24       	eor	r0, r0
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	07 94       	ror	r0
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	07 94       	ror	r0
 1c4:	98 2f       	mov	r25, r24
 1c6:	80 2d       	mov	r24, r0
 1c8:	28 2f       	mov	r18, r24
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	86 95       	lsr	r24
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	81 70       	andi	r24, 0x01	; 1
 1d4:	90 70       	andi	r25, 0x00	; 0
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	82 2b       	or	r24, r18
 1e4:	83 2b       	or	r24, r19
 1e6:	8c 93       	st	X, r24

    default:
        /* do nothing */
        break;
    }
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <Timer_Init>:

void Timer_Init(Timers_t timer , prescalerModes_t Pmode ,  waveModes_t Wmode)
{
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <Timer_Init+0x6>
 1fc:	0f 92       	push	r0
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
 206:	4b 83       	std	Y+3, r20	; 0x03
    /* set timer clock mode */
    Timer_SetPrescaler(timer,Pmode) ; 
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	6a 81       	ldd	r22, Y+2	; 0x02
 20c:	0e 94 49 00 	call	0x92	; 0x92 <Timer_SetPrescaler>
    /* set timer wave mode */
    Timer_SetWaveMode(timer,Wmode) ;
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	6b 81       	ldd	r22, Y+3	; 0x03
 214:	0e 94 86 00 	call	0x10c	; 0x10c <Timer_SetWaveMode>
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	08 95       	ret

00000224 <Timer_SetOverflow_Callback>:

inline void Timer_SetOverflow_Callback(Timers_t timer , void(*callback)(void)) 
{
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	00 d0       	rcall	.+0      	; 0x22a <Timer_SetOverflow_Callback+0x6>
 22a:	00 d0       	rcall	.+0      	; 0x22c <Timer_SetOverflow_Callback+0x8>
 22c:	0f 92       	push	r0
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	7b 83       	std	Y+3, r23	; 0x03
 236:	6a 83       	std	Y+2, r22	; 0x02
    /*if callback isn't NULL */
    if(callback!=NULL)
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	9b 81       	ldd	r25, Y+3	; 0x03
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	c1 f1       	breq	.+112    	; 0x2b0 <Timer_SetOverflow_Callback+0x8c>
    {
        /* set callback to the corresponding Timer  */
        switch (timer)
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	3d 83       	std	Y+5, r19	; 0x05
 248:	2c 83       	std	Y+4, r18	; 0x04
 24a:	8c 81       	ldd	r24, Y+4	; 0x04
 24c:	9d 81       	ldd	r25, Y+5	; 0x05
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	31 f0       	breq	.+12     	; 0x25e <Timer_SetOverflow_Callback+0x3a>
 252:	2c 81       	ldd	r18, Y+4	; 0x04
 254:	3d 81       	ldd	r19, Y+5	; 0x05
 256:	21 30       	cpi	r18, 0x01	; 1
 258:	31 05       	cpc	r19, r1
 25a:	b1 f0       	breq	.+44     	; 0x288 <Timer_SetOverflow_Callback+0x64>
 25c:	29 c0       	rjmp	.+82     	; 0x2b0 <Timer_SetOverflow_Callback+0x8c>
        {
        case TIMER0:
            /* set overflow Interrupt Enable 0 */
            setBit(TIMSK,TIMSK_TOIE0) ; 
 25e:	a9 e5       	ldi	r26, 0x59	; 89
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	e9 e5       	ldi	r30, 0x59	; 89
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	8c 93       	st	X, r24
            /* clear CTC Interrupt Enable 0 */
            clearBit(TIMSK,TIMSK_OCIE0) ;
 26c:	a9 e5       	ldi	r26, 0x59	; 89
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e9 e5       	ldi	r30, 0x59	; 89
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_NORMAL_ISR[0] = callback ; 
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	9b 81       	ldd	r25, Y+3	; 0x03
 27e:	90 93 89 00 	sts	0x0089, r25
 282:	80 93 88 00 	sts	0x0088, r24
 286:	14 c0       	rjmp	.+40     	; 0x2b0 <Timer_SetOverflow_Callback+0x8c>
            break;
        case TIMER2:
            /* set overflow Interrupt Enable 2 */
            setBit(TIMSK,TIMSK_TOIE2) ; 
 288:	a9 e5       	ldi	r26, 0x59	; 89
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e9 e5       	ldi	r30, 0x59	; 89
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	8c 93       	st	X, r24
            /* clear CTC Interrupt Enable 2*/
            clearBit(TIMSK,TIMSK_OCIE2) ;
 296:	a9 e5       	ldi	r26, 0x59	; 89
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e9 e5       	ldi	r30, 0x59	; 89
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8f 77       	andi	r24, 0x7F	; 127
 2a2:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_NORMAL_ISR[1] = callback ; 
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	9b 81       	ldd	r25, Y+3	; 0x03
 2a8:	90 93 8b 00 	sts	0x008B, r25
 2ac:	80 93 8a 00 	sts	0x008A, r24
    }
    else
    {
        /* do nothing */
    }
}
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <Timer_SetCTC_Callback>:
inline void Timer_SetCTC_Callback(Timers_t timer , void(*callback)(void)) 
{
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <Timer_SetCTC_Callback+0x6>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <Timer_SetCTC_Callback+0x8>
 2c8:	0f 92       	push	r0
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	7b 83       	std	Y+3, r23	; 0x03
 2d2:	6a 83       	std	Y+2, r22	; 0x02
    /*if callback isn't NULL */
    if(callback!=NULL)
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	9b 81       	ldd	r25, Y+3	; 0x03
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	c1 f1       	breq	.+112    	; 0x34c <Timer_SetCTC_Callback+0x8c>
    {
        /* set callback to the corresponding Timer  */
        switch (timer)
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	28 2f       	mov	r18, r24
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	3d 83       	std	Y+5, r19	; 0x05
 2e4:	2c 83       	std	Y+4, r18	; 0x04
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	31 f0       	breq	.+12     	; 0x2fa <Timer_SetCTC_Callback+0x3a>
 2ee:	2c 81       	ldd	r18, Y+4	; 0x04
 2f0:	3d 81       	ldd	r19, Y+5	; 0x05
 2f2:	21 30       	cpi	r18, 0x01	; 1
 2f4:	31 05       	cpc	r19, r1
 2f6:	b1 f0       	breq	.+44     	; 0x324 <Timer_SetCTC_Callback+0x64>
 2f8:	29 c0       	rjmp	.+82     	; 0x34c <Timer_SetCTC_Callback+0x8c>
        {
        case TIMER0:
            /* set CTC Interrupt Enable 0 */
            setBit(TIMSK,TIMSK_OCIE0) ; 
 2fa:	a9 e5       	ldi	r26, 0x59	; 89
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e9 e5       	ldi	r30, 0x59	; 89
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	82 60       	ori	r24, 0x02	; 2
 306:	8c 93       	st	X, r24
            /* clear overflow Interrupt Enable 0 */
            clearBit(TIMSK,TIMSK_TOIE0) ;
 308:	a9 e5       	ldi	r26, 0x59	; 89
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	e9 e5       	ldi	r30, 0x59	; 89
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_CTC_ISR[0] = callback ; 
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	9b 81       	ldd	r25, Y+3	; 0x03
 31a:	90 93 8d 00 	sts	0x008D, r25
 31e:	80 93 8c 00 	sts	0x008C, r24
 322:	14 c0       	rjmp	.+40     	; 0x34c <Timer_SetCTC_Callback+0x8c>
            break;
        case TIMER2:
            /* set CTC Interrupt Enable 2 */
            setBit(TIMSK,TIMSK_OCIE2) ;
 324:	a9 e5       	ldi	r26, 0x59	; 89
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e9 e5       	ldi	r30, 0x59	; 89
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	8c 93       	st	X, r24
            /* clear overflow Interrupt Enable 2 */
            clearBit(TIMSK,TIMSK_TOIE2) ;
 332:	a9 e5       	ldi	r26, 0x59	; 89
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e9 e5       	ldi	r30, 0x59	; 89
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	8f 7b       	andi	r24, 0xBF	; 191
 33e:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_CTC_ISR[1] = callback ;
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	9b 81       	ldd	r25, Y+3	; 0x03
 344:	90 93 8f 00 	sts	0x008F, r25
 348:	80 93 8e 00 	sts	0x008E, r24
    }
    else
    {
        /* do nothing */
    }
}
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	cf 91       	pop	r28
 358:	df 91       	pop	r29
 35a:	08 95       	ret

0000035c <Timer_SetOVFRegister>:
inline void Timer_SetOVFRegister(Timers_t timer,uint8_t value)
{
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	00 d0       	rcall	.+0      	; 0x362 <Timer_SetOVFRegister+0x6>
 362:	00 d0       	rcall	.+0      	; 0x364 <Timer_SetOVFRegister+0x8>
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	6a 83       	std	Y+2, r22	; 0x02
    /* set value to the corresponding Timer overflow register  */
     switch (timer)
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	3c 83       	std	Y+4, r19	; 0x04
 374:	2b 83       	std	Y+3, r18	; 0x03
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	9c 81       	ldd	r25, Y+4	; 0x04
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	31 f0       	breq	.+12     	; 0x38a <Timer_SetOVFRegister+0x2e>
 37e:	2b 81       	ldd	r18, Y+3	; 0x03
 380:	3c 81       	ldd	r19, Y+4	; 0x04
 382:	21 30       	cpi	r18, 0x01	; 1
 384:	31 05       	cpc	r19, r1
 386:	31 f0       	breq	.+12     	; 0x394 <Timer_SetOVFRegister+0x38>
 388:	09 c0       	rjmp	.+18     	; 0x39c <Timer_SetOVFRegister+0x40>
        {
        case TIMER0:
            TCNT0= value ; 
 38a:	e2 e5       	ldi	r30, 0x52	; 82
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	80 83       	st	Z, r24
 392:	04 c0       	rjmp	.+8      	; 0x39c <Timer_SetOVFRegister+0x40>
            break;
        case TIMER2:
            TCNT2= value ; 
 394:	e4 e4       	ldi	r30, 0x44	; 68
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	80 83       	st	Z, r24
            break;
        default:
            /*do nothing*/
            break;
        }
}
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <Timer_SetCTCRegister>:
inline void Timer_SetCTCRegister(Timers_t timer,uint8_t value)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <Timer_SetCTCRegister+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <Timer_SetCTCRegister+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	6a 83       	std	Y+2, r22	; 0x02
     /* set value to the corresponding Timer CTC register  */
     switch (timer)
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	3c 83       	std	Y+4, r19	; 0x04
 3c2:	2b 83       	std	Y+3, r18	; 0x03
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	9c 81       	ldd	r25, Y+4	; 0x04
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <Timer_SetCTCRegister+0x2e>
 3cc:	2b 81       	ldd	r18, Y+3	; 0x03
 3ce:	3c 81       	ldd	r19, Y+4	; 0x04
 3d0:	21 30       	cpi	r18, 0x01	; 1
 3d2:	31 05       	cpc	r19, r1
 3d4:	31 f0       	breq	.+12     	; 0x3e2 <Timer_SetCTCRegister+0x38>
 3d6:	09 c0       	rjmp	.+18     	; 0x3ea <Timer_SetCTCRegister+0x40>
        {
        case TIMER0:
            OCR0= value ; 
 3d8:	ec e5       	ldi	r30, 0x5C	; 92
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	80 83       	st	Z, r24
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <Timer_SetCTCRegister+0x40>
            break;

        case TIMER2:
            OCR2= value ; 
 3e2:	e3 e4       	ldi	r30, 0x43	; 67
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	80 83       	st	Z, r24
            break;
        default:
            /*do nothing*/
            break;
        }
}
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <__vector_11>:

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	2f 93       	push	r18
 404:	3f 93       	push	r19
 406:	4f 93       	push	r20
 408:	5f 93       	push	r21
 40a:	6f 93       	push	r22
 40c:	7f 93       	push	r23
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	af 93       	push	r26
 414:	bf 93       	push	r27
 416:	ef 93       	push	r30
 418:	ff 93       	push	r31
 41a:	df 93       	push	r29
 41c:	cf 93       	push	r28
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_NORMAL_ISR[0] != NULL)
 422:	80 91 88 00 	lds	r24, 0x0088
 426:	90 91 89 00 	lds	r25, 0x0089
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	29 f0       	breq	.+10     	; 0x438 <__vector_11+0x40>
    {
        TIMERS_NORMAL_ISR[0]() ;
 42e:	e0 91 88 00 	lds	r30, 0x0088
 432:	f0 91 89 00 	lds	r31, 0x0089
 436:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 438:	cf 91       	pop	r28
 43a:	df 91       	pop	r29
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 488:	80 91 8c 00 	lds	r24, 0x008C
 48c:	90 91 8d 00 	lds	r25, 0x008D
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	29 f0       	breq	.+10     	; 0x49e <__vector_10+0x40>
    {
        TIMERS_CTC_ISR[0]() ;
 494:	e0 91 8c 00 	lds	r30, 0x008C
 498:	f0 91 8d 00 	lds	r31, 0x008D
 49c:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 49e:	cf 91       	pop	r28
 4a0:	df 91       	pop	r29
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	df 93       	push	r29
 4e8:	cf 93       	push	r28
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_NORMAL_ISR[1] != NULL)
 4ee:	80 91 8a 00 	lds	r24, 0x008A
 4f2:	90 91 8b 00 	lds	r25, 0x008B
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	29 f0       	breq	.+10     	; 0x504 <__vector_5+0x40>
    {
        TIMERS_NORMAL_ISR[1]() ;
 4fa:	e0 91 8a 00 	lds	r30, 0x008A
 4fe:	f0 91 8b 00 	lds	r31, 0x008B
 502:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 52a:	1f 92       	push	r1
 52c:	0f 92       	push	r0
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	0f 92       	push	r0
 532:	11 24       	eor	r1, r1
 534:	2f 93       	push	r18
 536:	3f 93       	push	r19
 538:	4f 93       	push	r20
 53a:	5f 93       	push	r21
 53c:	6f 93       	push	r22
 53e:	7f 93       	push	r23
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	af 93       	push	r26
 546:	bf 93       	push	r27
 548:	ef 93       	push	r30
 54a:	ff 93       	push	r31
 54c:	df 93       	push	r29
 54e:	cf 93       	push	r28
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_CTC_ISR[1] != NULL)
 554:	80 91 8e 00 	lds	r24, 0x008E
 558:	90 91 8f 00 	lds	r25, 0x008F
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	29 f0       	breq	.+10     	; 0x56a <__vector_4+0x40>
    {
        TIMERS_CTC_ISR[1]() ;
 560:	e0 91 8e 00 	lds	r30, 0x008E
 564:	f0 91 8f 00 	lds	r31, 0x008F
 568:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <RTOS_Start>:

/*place holder for all RTOS Suspended System Tasks*/
uint8_t SuspendedTasks[TASK_NUM] ={0} ;

void RTOS_Start(void) 
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	/*set the Timer CTC Mode callback to the Scheduler function*/
	Timer_SetCTC_Callback(TIMER_USED,&Scheduler) ;
 598:	2c e4       	ldi	r18, 0x4C	; 76
 59a:	33 e0       	ldi	r19, 0x03	; 3
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Timer_SetCTC_Callback>
	/*Global Interrupt Enable*/
	GIE_Enable() ;
 5a4:	0e 94 cb 03 	call	0x796	; 0x796 <GIE_Enable>
	/*Set the Selected timer with a Prescaler and use CTC Mode*/
	Timer_Init(TIMER_USED,prescaler64,CTC) ;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	42 e0       	ldi	r20, 0x02	; 2
 5ae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Timer_Init>
	/*Set output match compare value*/
	Timer_SetCTCRegister(TIMER_USED,125) ;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	6d e7       	ldi	r22, 0x7D	; 125
 5b6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Timer_SetCTCRegister>
} 
 5ba:	cf 91       	pop	r28
 5bc:	df 91       	pop	r29
 5be:	08 95       	ret

000005c0 <RTOS_CreateTask>:
void RTOS_CreateTask(ST_Task_t * task) 
{
 5c0:	df 93       	push	r29
 5c2:	cf 93       	push	r28
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	27 97       	sbiw	r28, 0x07	; 7
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	9a 83       	std	Y+2, r25	; 0x02
 5d6:	89 83       	std	Y+1, r24	; 0x01
	SystemsTasks[task->Priority] = *task ;
 5d8:	e9 81       	ldd	r30, Y+1	; 0x01
 5da:	fa 81       	ldd	r31, Y+2	; 0x02
 5dc:	80 81       	ld	r24, Z
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	c9 01       	movw	r24, r18
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	82 0f       	add	r24, r18
 5ee:	93 1f       	adc	r25, r19
 5f0:	80 57       	subi	r24, 0x70	; 112
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	29 81       	ldd	r18, Y+1	; 0x01
 5f6:	3a 81       	ldd	r19, Y+2	; 0x02
 5f8:	9c 83       	std	Y+4, r25	; 0x04
 5fa:	8b 83       	std	Y+3, r24	; 0x03
 5fc:	3e 83       	std	Y+6, r19	; 0x06
 5fe:	2d 83       	std	Y+5, r18	; 0x05
 600:	85 e0       	ldi	r24, 0x05	; 5
 602:	8f 83       	std	Y+7, r24	; 0x07
 604:	ed 81       	ldd	r30, Y+5	; 0x05
 606:	fe 81       	ldd	r31, Y+6	; 0x06
 608:	00 80       	ld	r0, Z
 60a:	8d 81       	ldd	r24, Y+5	; 0x05
 60c:	9e 81       	ldd	r25, Y+6	; 0x06
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	9e 83       	std	Y+6, r25	; 0x06
 612:	8d 83       	std	Y+5, r24	; 0x05
 614:	eb 81       	ldd	r30, Y+3	; 0x03
 616:	fc 81       	ldd	r31, Y+4	; 0x04
 618:	00 82       	st	Z, r0
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	9c 81       	ldd	r25, Y+4	; 0x04
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	9c 83       	std	Y+4, r25	; 0x04
 622:	8b 83       	std	Y+3, r24	; 0x03
 624:	9f 81       	ldd	r25, Y+7	; 0x07
 626:	91 50       	subi	r25, 0x01	; 1
 628:	9f 83       	std	Y+7, r25	; 0x07
 62a:	ef 81       	ldd	r30, Y+7	; 0x07
 62c:	ee 23       	and	r30, r30
 62e:	51 f7       	brne	.-44     	; 0x604 <RTOS_CreateTask+0x44>
}
 630:	27 96       	adiw	r28, 0x07	; 7
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
 63c:	cf 91       	pop	r28
 63e:	df 91       	pop	r29
 640:	08 95       	ret

00000642 <RTOS_SuspendTask>:
void RTOS_SuspendTask(ST_Task_t * task)
{
 642:	df 93       	push	r29
 644:	cf 93       	push	r28
 646:	00 d0       	rcall	.+0      	; 0x648 <RTOS_SuspendTask+0x6>
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	89 83       	std	Y+1, r24	; 0x01
	SuspendedTasks[task->Priority] = 1 ;
 650:	e9 81       	ldd	r30, Y+1	; 0x01
 652:	fa 81       	ldd	r31, Y+2	; 0x02
 654:	80 81       	ld	r24, Z
 656:	88 2f       	mov	r24, r24
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	fc 01       	movw	r30, r24
 65c:	e1 56       	subi	r30, 0x61	; 97
 65e:	ff 4f       	sbci	r31, 0xFF	; 255
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	80 83       	st	Z, r24
}
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	08 95       	ret

0000066e <RTOS_ResumeTask>:

void RTOS_ResumeTask(ST_Task_t *task)
{
 66e:	df 93       	push	r29
 670:	cf 93       	push	r28
 672:	00 d0       	rcall	.+0      	; 0x674 <RTOS_ResumeTask+0x6>
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	9a 83       	std	Y+2, r25	; 0x02
 67a:	89 83       	std	Y+1, r24	; 0x01
	SuspendedTasks[task->Priority] = 0 ;
 67c:	e9 81       	ldd	r30, Y+1	; 0x01
 67e:	fa 81       	ldd	r31, Y+2	; 0x02
 680:	80 81       	ld	r24, Z
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	fc 01       	movw	r30, r24
 688:	e1 56       	subi	r30, 0x61	; 97
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	10 82       	st	Z, r1
}
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	cf 91       	pop	r28
 694:	df 91       	pop	r29
 696:	08 95       	ret

00000698 <Scheduler>:
void Scheduler(void)
{
 698:	ef 92       	push	r14
 69a:	ff 92       	push	r15
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	df 93       	push	r29
 6a2:	cf 93       	push	r28
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <Scheduler+0xe>
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
	static uint32_t tickCounter= 0 ;
	tickCounter++ ;
 6aa:	80 91 a2 00 	lds	r24, 0x00A2
 6ae:	90 91 a3 00 	lds	r25, 0x00A3
 6b2:	a0 91 a4 00 	lds	r26, 0x00A4
 6b6:	b0 91 a5 00 	lds	r27, 0x00A5
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	a1 1d       	adc	r26, r1
 6be:	b1 1d       	adc	r27, r1
 6c0:	80 93 a2 00 	sts	0x00A2, r24
 6c4:	90 93 a3 00 	sts	0x00A3, r25
 6c8:	a0 93 a4 00 	sts	0x00A4, r26
 6cc:	b0 93 a5 00 	sts	0x00A5, r27
	uint16_t TaskCounter ;
	for(TaskCounter=0 ; TaskCounter<TASK_NUM;TaskCounter++)
 6d0:	1a 82       	std	Y+2, r1	; 0x02
 6d2:	19 82       	std	Y+1, r1	; 0x01
 6d4:	51 c0       	rjmp	.+162    	; 0x778 <Scheduler+0xe0>
	{
		/*check if the task is suspended*/
		if(SuspendedTasks[TaskCounter]!=1)
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	9a 81       	ldd	r25, Y+2	; 0x02
 6da:	fc 01       	movw	r30, r24
 6dc:	e1 56       	subi	r30, 0x61	; 97
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	80 81       	ld	r24, Z
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <Scheduler+0x50>
 6e6:	43 c0       	rjmp	.+134    	; 0x76e <Scheduler+0xd6>
		{
			/*if it time for the task*/
			if( tickCounter % (SystemsTasks[TaskCounter].Periodicity)==0)
 6e8:	e0 90 a2 00 	lds	r14, 0x00A2
 6ec:	f0 90 a3 00 	lds	r15, 0x00A3
 6f0:	00 91 a4 00 	lds	r16, 0x00A4
 6f4:	10 91 a5 00 	lds	r17, 0x00A5
 6f8:	29 81       	ldd	r18, Y+1	; 0x01
 6fa:	3a 81       	ldd	r19, Y+2	; 0x02
 6fc:	c9 01       	movw	r24, r18
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	82 0f       	add	r24, r18
 708:	93 1f       	adc	r25, r19
 70a:	fc 01       	movw	r30, r24
 70c:	ef 56       	subi	r30, 0x6F	; 111
 70e:	ff 4f       	sbci	r31, 0xFF	; 255
 710:	80 81       	ld	r24, Z
 712:	91 81       	ldd	r25, Z+1	; 0x01
 714:	9c 01       	movw	r18, r24
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	c8 01       	movw	r24, r16
 71c:	b7 01       	movw	r22, r14
 71e:	0e 94 c0 06 	call	0xd80	; 0xd80 <__udivmodsi4>
 722:	dc 01       	movw	r26, r24
 724:	cb 01       	movw	r24, r22
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	a1 05       	cpc	r26, r1
 72a:	b1 05       	cpc	r27, r1
 72c:	01 f5       	brne	.+64     	; 0x76e <Scheduler+0xd6>
			{

				if(SystemsTasks[TaskCounter].taskFunction!=NULL)
 72e:	29 81       	ldd	r18, Y+1	; 0x01
 730:	3a 81       	ldd	r19, Y+2	; 0x02
 732:	c9 01       	movw	r24, r18
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	82 0f       	add	r24, r18
 73e:	93 1f       	adc	r25, r19
 740:	fc 01       	movw	r30, r24
 742:	ed 56       	subi	r30, 0x6D	; 109
 744:	ff 4f       	sbci	r31, 0xFF	; 255
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	00 97       	sbiw	r24, 0x00	; 0
 74c:	81 f0       	breq	.+32     	; 0x76e <Scheduler+0xd6>
				{
					/*run task*/
					SystemsTasks[TaskCounter].taskFunction() ;
 74e:	29 81       	ldd	r18, Y+1	; 0x01
 750:	3a 81       	ldd	r19, Y+2	; 0x02
 752:	c9 01       	movw	r24, r18
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	82 0f       	add	r24, r18
 75e:	93 1f       	adc	r25, r19
 760:	fc 01       	movw	r30, r24
 762:	ed 56       	subi	r30, 0x6D	; 109
 764:	ff 4f       	sbci	r31, 0xFF	; 255
 766:	01 90       	ld	r0, Z+
 768:	f0 81       	ld	r31, Z
 76a:	e0 2d       	mov	r30, r0
 76c:	09 95       	icall
void Scheduler(void)
{
	static uint32_t tickCounter= 0 ;
	tickCounter++ ;
	uint16_t TaskCounter ;
	for(TaskCounter=0 ; TaskCounter<TASK_NUM;TaskCounter++)
 76e:	89 81       	ldd	r24, Y+1	; 0x01
 770:	9a 81       	ldd	r25, Y+2	; 0x02
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	9a 83       	std	Y+2, r25	; 0x02
 776:	89 83       	std	Y+1, r24	; 0x01
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	9a 81       	ldd	r25, Y+2	; 0x02
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	91 05       	cpc	r25, r1
 780:	08 f4       	brcc	.+2      	; 0x784 <Scheduler+0xec>
 782:	a9 cf       	rjmp	.-174    	; 0x6d6 <Scheduler+0x3e>
			/*the task is suspended do nothing*/
		}

	}

}
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	cf 91       	pop	r28
 78a:	df 91       	pop	r29
 78c:	1f 91       	pop	r17
 78e:	0f 91       	pop	r16
 790:	ff 90       	pop	r15
 792:	ef 90       	pop	r14
 794:	08 95       	ret

00000796 <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"
#include "../LIB/STD_TYPES.h"

inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	cd b7       	in	r28, 0x3d	; 61
 79c:	de b7       	in	r29, 0x3e	; 62
 79e:	af e5       	ldi	r26, 0x5F	; 95
 7a0:	b0 e0       	ldi	r27, 0x00	; 0
 7a2:	ef e5       	ldi	r30, 0x5F	; 95
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	80 68       	ori	r24, 0x80	; 128
 7aa:	8c 93       	st	X, r24
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	08 95       	ret

000007b2 <GIE_Disable>:

 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
 7ba:	af e5       	ldi	r26, 0x5F	; 95
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	ef e5       	ldi	r30, 0x5F	; 95
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	8f 77       	andi	r24, 0x7F	; 127
 7c6:	8c 93       	st	X, r24
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	08 95       	ret

000007ce <DIO_setPinDirection>:
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
}

void DIO_setPinDirection(EN_PinNumber_t pinNum,EN_Directions_t pinDirection) 
{
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	2a 97       	sbiw	r28, 0x0a	; 10
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	de bf       	out	0x3e, r29	; 62
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	cd bf       	out	0x3d, r28	; 61
 7e2:	8f 83       	std	Y+7, r24	; 0x07
 7e4:	68 87       	std	Y+8, r22	; 0x08
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
 7e6:	8f 81       	ldd	r24, Y+7	; 0x07
 7e8:	0e 94 8a 04 	call	0x914	; 0x914 <getPinNumber>
 7ec:	8e 83       	std	Y+6, r24	; 0x06
 7ee:	8f 81       	ldd	r24, Y+7	; 0x07
 7f0:	0e 94 bf 04 	call	0x97e	; 0x97e <getPortNumber>
 7f4:	8d 83       	std	Y+5, r24	; 0x05
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
 7f6:	8d 81       	ldd	r24, Y+5	; 0x05
 7f8:	28 2f       	mov	r18, r24
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	c9 01       	movw	r24, r18
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	01 96       	adiw	r24, 0x01	; 1
 808:	88 0f       	add	r24, r24
 80a:	99 1f       	adc	r25, r25
 80c:	fc 01       	movw	r30, r24
 80e:	e0 5a       	subi	r30, 0xA0	; 160
 810:	ff 4f       	sbci	r31, 0xFF	; 255
 812:	80 81       	ld	r24, Z
 814:	91 81       	ldd	r25, Z+1	; 0x01
 816:	9c 83       	std	Y+4, r25	; 0x04
 818:	8b 83       	std	Y+3, r24	; 0x03
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 81a:	8d 81       	ldd	r24, Y+5	; 0x05
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	c9 01       	movw	r24, r18
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	82 0f       	add	r24, r18
 828:	93 1f       	adc	r25, r19
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	fc 01       	movw	r30, r24
 830:	e0 5a       	subi	r30, 0xA0	; 160
 832:	ff 4f       	sbci	r31, 0xFF	; 255
 834:	80 81       	ld	r24, Z
 836:	91 81       	ldd	r25, Z+1	; 0x01
 838:	9a 83       	std	Y+2, r25	; 0x02
 83a:	89 83       	std	Y+1, r24	; 0x01
    switch (pinDirection)
 83c:	88 85       	ldd	r24, Y+8	; 0x08
 83e:	28 2f       	mov	r18, r24
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	3a 87       	std	Y+10, r19	; 0x0a
 844:	29 87       	std	Y+9, r18	; 0x09
 846:	89 85       	ldd	r24, Y+9	; 0x09
 848:	9a 85       	ldd	r25, Y+10	; 0x0a
 84a:	81 30       	cpi	r24, 0x01	; 1
 84c:	91 05       	cpc	r25, r1
 84e:	f9 f0       	breq	.+62     	; 0x88e <__stack+0x2f>
 850:	29 85       	ldd	r18, Y+9	; 0x09
 852:	3a 85       	ldd	r19, Y+10	; 0x0a
 854:	22 30       	cpi	r18, 0x02	; 2
 856:	31 05       	cpc	r19, r1
 858:	71 f1       	breq	.+92     	; 0x8b6 <__stack+0x57>
 85a:	89 85       	ldd	r24, Y+9	; 0x09
 85c:	9a 85       	ldd	r25, Y+10	; 0x0a
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	09 f0       	breq	.+2      	; 0x864 <__stack+0x5>
 862:	4f c0       	rjmp	.+158    	; 0x902 <__stack+0xa3>
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 864:	eb 81       	ldd	r30, Y+3	; 0x03
 866:	fc 81       	ldd	r31, Y+4	; 0x04
 868:	80 81       	ld	r24, Z
 86a:	48 2f       	mov	r20, r24
 86c:	8e 81       	ldd	r24, Y+6	; 0x06
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 2e       	mov	r0, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	80 95       	com	r24
 884:	84 23       	and	r24, r20
 886:	eb 81       	ldd	r30, Y+3	; 0x03
 888:	fc 81       	ldd	r31, Y+4	; 0x04
 88a:	80 83       	st	Z, r24
 88c:	3a c0       	rjmp	.+116    	; 0x902 <__stack+0xa3>
        break;
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 88e:	eb 81       	ldd	r30, Y+3	; 0x03
 890:	fc 81       	ldd	r31, Y+4	; 0x04
 892:	80 81       	ld	r24, Z
 894:	48 2f       	mov	r20, r24
 896:	8e 81       	ldd	r24, Y+6	; 0x06
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	02 2e       	mov	r0, r18
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	0a 94       	dec	r0
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	84 2b       	or	r24, r20
 8ae:	eb 81       	ldd	r30, Y+3	; 0x03
 8b0:	fc 81       	ldd	r31, Y+4	; 0x04
 8b2:	80 83       	st	Z, r24
 8b4:	26 c0       	rjmp	.+76     	; 0x902 <__stack+0xa3>
        break;
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 8b6:	e9 81       	ldd	r30, Y+1	; 0x01
 8b8:	fa 81       	ldd	r31, Y+2	; 0x02
 8ba:	80 81       	ld	r24, Z
 8bc:	48 2f       	mov	r20, r24
 8be:	8e 81       	ldd	r24, Y+6	; 0x06
 8c0:	28 2f       	mov	r18, r24
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	2a 95       	dec	r18
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
 8d2:	84 2b       	or	r24, r20
 8d4:	e9 81       	ldd	r30, Y+1	; 0x01
 8d6:	fa 81       	ldd	r31, Y+2	; 0x02
 8d8:	80 83       	st	Z, r24
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 8da:	eb 81       	ldd	r30, Y+3	; 0x03
 8dc:	fc 81       	ldd	r31, Y+4	; 0x04
 8de:	80 81       	ld	r24, Z
 8e0:	48 2f       	mov	r20, r24
 8e2:	8e 81       	ldd	r24, Y+6	; 0x06
 8e4:	28 2f       	mov	r18, r24
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 2e       	mov	r0, r18
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__stack+0x95>
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	0a 94       	dec	r0
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <__stack+0x91>
 8f8:	80 95       	com	r24
 8fa:	84 23       	and	r24, r20
 8fc:	eb 81       	ldd	r30, Y+3	; 0x03
 8fe:	fc 81       	ldd	r31, Y+4	; 0x04
 900:	80 83       	st	Z, r24
    default:
        /* do nothing */
        break;
    }

}
 902:	2a 96       	adiw	r28, 0x0a	; 10
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	f8 94       	cli
 908:	de bf       	out	0x3e, r29	; 62
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	cd bf       	out	0x3d, r28	; 61
 90e:	cf 91       	pop	r28
 910:	df 91       	pop	r29
 912:	08 95       	ret

00000914 <getPinNumber>:
 * 
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
 914:	df 93       	push	r29
 916:	cf 93       	push	r28
 918:	00 d0       	rcall	.+0      	; 0x91a <getPinNumber+0x6>
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	89 83       	std	Y+1, r24	; 0x01
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	88 30       	cpi	r24, 0x08	; 8
 924:	18 f4       	brcc	.+6      	; 0x92c <getPinNumber+0x18>
 926:	89 81       	ldd	r24, Y+1	; 0x01
 928:	8a 83       	std	Y+2, r24	; 0x02
 92a:	23 c0       	rjmp	.+70     	; 0x972 <getPinNumber+0x5e>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 92c:	89 81       	ldd	r24, Y+1	; 0x01
 92e:	88 30       	cpi	r24, 0x08	; 8
 930:	40 f0       	brcs	.+16     	; 0x942 <getPinNumber+0x2e>
 932:	89 81       	ldd	r24, Y+1	; 0x01
 934:	80 31       	cpi	r24, 0x10	; 16
 936:	28 f4       	brcc	.+10     	; 0x942 <getPinNumber+0x2e>
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	98 2f       	mov	r25, r24
 93c:	98 50       	subi	r25, 0x08	; 8
 93e:	9a 83       	std	Y+2, r25	; 0x02
 940:	18 c0       	rjmp	.+48     	; 0x972 <getPinNumber+0x5e>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 942:	89 81       	ldd	r24, Y+1	; 0x01
 944:	80 31       	cpi	r24, 0x10	; 16
 946:	40 f0       	brcs	.+16     	; 0x958 <getPinNumber+0x44>
 948:	89 81       	ldd	r24, Y+1	; 0x01
 94a:	88 31       	cpi	r24, 0x18	; 24
 94c:	28 f4       	brcc	.+10     	; 0x958 <getPinNumber+0x44>
 94e:	89 81       	ldd	r24, Y+1	; 0x01
 950:	98 2f       	mov	r25, r24
 952:	90 51       	subi	r25, 0x10	; 16
 954:	9a 83       	std	Y+2, r25	; 0x02
 956:	0d c0       	rjmp	.+26     	; 0x972 <getPinNumber+0x5e>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 958:	89 81       	ldd	r24, Y+1	; 0x01
 95a:	88 31       	cpi	r24, 0x18	; 24
 95c:	40 f0       	brcs	.+16     	; 0x96e <getPinNumber+0x5a>
 95e:	89 81       	ldd	r24, Y+1	; 0x01
 960:	80 32       	cpi	r24, 0x20	; 32
 962:	28 f4       	brcc	.+10     	; 0x96e <getPinNumber+0x5a>
 964:	89 81       	ldd	r24, Y+1	; 0x01
 966:	98 2f       	mov	r25, r24
 968:	98 51       	subi	r25, 0x18	; 24
 96a:	9a 83       	std	Y+2, r25	; 0x02
 96c:	02 c0       	rjmp	.+4      	; 0x972 <getPinNumber+0x5e>
	return NC ; 
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	8a 83       	std	Y+2, r24	; 0x02
 972:	8a 81       	ldd	r24, Y+2	; 0x02
}
 974:	0f 90       	pop	r0
 976:	0f 90       	pop	r0
 978:	cf 91       	pop	r28
 97a:	df 91       	pop	r29
 97c:	08 95       	ret

0000097e <getPortNumber>:
 * 
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
 97e:	df 93       	push	r29
 980:	cf 93       	push	r28
 982:	00 d0       	rcall	.+0      	; 0x984 <getPortNumber+0x6>
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	89 83       	std	Y+1, r24	; 0x01
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	88 30       	cpi	r24, 0x08	; 8
 98e:	10 f4       	brcc	.+4      	; 0x994 <getPortNumber+0x16>
 990:	1a 82       	std	Y+2, r1	; 0x02
 992:	1d c0       	rjmp	.+58     	; 0x9ce <getPortNumber+0x50>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 994:	89 81       	ldd	r24, Y+1	; 0x01
 996:	88 30       	cpi	r24, 0x08	; 8
 998:	30 f0       	brcs	.+12     	; 0x9a6 <getPortNumber+0x28>
 99a:	89 81       	ldd	r24, Y+1	; 0x01
 99c:	80 31       	cpi	r24, 0x10	; 16
 99e:	18 f4       	brcc	.+6      	; 0x9a6 <getPortNumber+0x28>
 9a0:	81 e0       	ldi	r24, 0x01	; 1
 9a2:	8a 83       	std	Y+2, r24	; 0x02
 9a4:	14 c0       	rjmp	.+40     	; 0x9ce <getPortNumber+0x50>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	80 31       	cpi	r24, 0x10	; 16
 9aa:	30 f0       	brcs	.+12     	; 0x9b8 <getPortNumber+0x3a>
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	88 31       	cpi	r24, 0x18	; 24
 9b0:	18 f4       	brcc	.+6      	; 0x9b8 <getPortNumber+0x3a>
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	8a 83       	std	Y+2, r24	; 0x02
 9b6:	0b c0       	rjmp	.+22     	; 0x9ce <getPortNumber+0x50>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 9b8:	89 81       	ldd	r24, Y+1	; 0x01
 9ba:	88 31       	cpi	r24, 0x18	; 24
 9bc:	30 f0       	brcs	.+12     	; 0x9ca <getPortNumber+0x4c>
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	80 32       	cpi	r24, 0x20	; 32
 9c2:	18 f4       	brcc	.+6      	; 0x9ca <getPortNumber+0x4c>
 9c4:	83 e0       	ldi	r24, 0x03	; 3
 9c6:	8a 83       	std	Y+2, r24	; 0x02
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <getPortNumber+0x50>
	return NC ;
 9ca:	8f ef       	ldi	r24, 0xFF	; 255
 9cc:	8a 83       	std	Y+2, r24	; 0x02
 9ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
 9d0:	0f 90       	pop	r0
 9d2:	0f 90       	pop	r0
 9d4:	cf 91       	pop	r28
 9d6:	df 91       	pop	r29
 9d8:	08 95       	ret

000009da <DIO_setPinValue>:
    }

}

void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
 9da:	df 93       	push	r29
 9dc:	cf 93       	push	r28
 9de:	cd b7       	in	r28, 0x3d	; 61
 9e0:	de b7       	in	r29, 0x3e	; 62
 9e2:	28 97       	sbiw	r28, 0x08	; 8
 9e4:	0f b6       	in	r0, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	de bf       	out	0x3e, r29	; 62
 9ea:	0f be       	out	0x3f, r0	; 63
 9ec:	cd bf       	out	0x3d, r28	; 61
 9ee:	8d 83       	std	Y+5, r24	; 0x05
 9f0:	6e 83       	std	Y+6, r22	; 0x06
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
 9f2:	8d 81       	ldd	r24, Y+5	; 0x05
 9f4:	0e 94 8a 04 	call	0x914	; 0x914 <getPinNumber>
 9f8:	8c 83       	std	Y+4, r24	; 0x04
 9fa:	8d 81       	ldd	r24, Y+5	; 0x05
 9fc:	0e 94 bf 04 	call	0x97e	; 0x97e <getPortNumber>
 a00:	8b 83       	std	Y+3, r24	; 0x03
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 a02:	8b 81       	ldd	r24, Y+3	; 0x03
 a04:	28 2f       	mov	r18, r24
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	c9 01       	movw	r24, r18
 a0a:	88 0f       	add	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	82 0f       	add	r24, r18
 a10:	93 1f       	adc	r25, r19
 a12:	88 0f       	add	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	fc 01       	movw	r30, r24
 a18:	e0 5a       	subi	r30, 0xA0	; 160
 a1a:	ff 4f       	sbci	r31, 0xFF	; 255
 a1c:	80 81       	ld	r24, Z
 a1e:	91 81       	ldd	r25, Z+1	; 0x01
 a20:	9a 83       	std	Y+2, r25	; 0x02
 a22:	89 83       	std	Y+1, r24	; 0x01
    switch (value)
 a24:	8e 81       	ldd	r24, Y+6	; 0x06
 a26:	28 2f       	mov	r18, r24
 a28:	30 e0       	ldi	r19, 0x00	; 0
 a2a:	38 87       	std	Y+8, r19	; 0x08
 a2c:	2f 83       	std	Y+7, r18	; 0x07
 a2e:	8f 81       	ldd	r24, Y+7	; 0x07
 a30:	98 85       	ldd	r25, Y+8	; 0x08
 a32:	81 30       	cpi	r24, 0x01	; 1
 a34:	91 05       	cpc	r25, r1
 a36:	f1 f0       	breq	.+60     	; 0xa74 <DIO_setPinValue+0x9a>
 a38:	2f 81       	ldd	r18, Y+7	; 0x07
 a3a:	38 85       	ldd	r19, Y+8	; 0x08
 a3c:	22 30       	cpi	r18, 0x02	; 2
 a3e:	31 05       	cpc	r19, r1
 a40:	69 f1       	breq	.+90     	; 0xa9c <DIO_setPinValue+0xc2>
 a42:	8f 81       	ldd	r24, Y+7	; 0x07
 a44:	98 85       	ldd	r25, Y+8	; 0x08
 a46:	00 97       	sbiw	r24, 0x00	; 0
 a48:	e1 f5       	brne	.+120    	; 0xac2 <DIO_setPinValue+0xe8>
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 a4a:	e9 81       	ldd	r30, Y+1	; 0x01
 a4c:	fa 81       	ldd	r31, Y+2	; 0x02
 a4e:	80 81       	ld	r24, Z
 a50:	48 2f       	mov	r20, r24
 a52:	8c 81       	ldd	r24, Y+4	; 0x04
 a54:	28 2f       	mov	r18, r24
 a56:	30 e0       	ldi	r19, 0x00	; 0
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	02 2e       	mov	r0, r18
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_setPinValue+0x8a>
 a60:	88 0f       	add	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	0a 94       	dec	r0
 a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_setPinValue+0x86>
 a68:	80 95       	com	r24
 a6a:	84 23       	and	r24, r20
 a6c:	e9 81       	ldd	r30, Y+1	; 0x01
 a6e:	fa 81       	ldd	r31, Y+2	; 0x02
 a70:	80 83       	st	Z, r24
 a72:	27 c0       	rjmp	.+78     	; 0xac2 <DIO_setPinValue+0xe8>
        break;    
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 a74:	e9 81       	ldd	r30, Y+1	; 0x01
 a76:	fa 81       	ldd	r31, Y+2	; 0x02
 a78:	80 81       	ld	r24, Z
 a7a:	48 2f       	mov	r20, r24
 a7c:	8c 81       	ldd	r24, Y+4	; 0x04
 a7e:	28 2f       	mov	r18, r24
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	02 2e       	mov	r0, r18
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <DIO_setPinValue+0xb4>
 a8a:	88 0f       	add	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	0a 94       	dec	r0
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <DIO_setPinValue+0xb0>
 a92:	84 2b       	or	r24, r20
 a94:	e9 81       	ldd	r30, Y+1	; 0x01
 a96:	fa 81       	ldd	r31, Y+2	; 0x02
 a98:	80 83       	st	Z, r24
 a9a:	13 c0       	rjmp	.+38     	; 0xac2 <DIO_setPinValue+0xe8>
        break;
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 a9c:	e9 81       	ldd	r30, Y+1	; 0x01
 a9e:	fa 81       	ldd	r31, Y+2	; 0x02
 aa0:	80 81       	ld	r24, Z
 aa2:	48 2f       	mov	r20, r24
 aa4:	8c 81       	ldd	r24, Y+4	; 0x04
 aa6:	28 2f       	mov	r18, r24
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	02 2e       	mov	r0, r18
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_setPinValue+0xdc>
 ab2:	88 0f       	add	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	0a 94       	dec	r0
 ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_setPinValue+0xd8>
 aba:	84 27       	eor	r24, r20
 abc:	e9 81       	ldd	r30, Y+1	; 0x01
 abe:	fa 81       	ldd	r31, Y+2	; 0x02
 ac0:	80 83       	st	Z, r24
    
    default:
        /*do nothing*/
        break;
    }
}
 ac2:	28 96       	adiw	r28, 0x08	; 8
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	de bf       	out	0x3e, r29	; 62
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	cd bf       	out	0x3d, r28	; 61
 ace:	cf 91       	pop	r28
 ad0:	df 91       	pop	r29
 ad2:	08 95       	ret

00000ad4 <DIO_getPinValue>:

uint8_t DIO_getPinValue(EN_PinNumber_t pinNum) 
{
 ad4:	df 93       	push	r29
 ad6:	cf 93       	push	r28
 ad8:	00 d0       	rcall	.+0      	; 0xada <DIO_getPinValue+0x6>
 ada:	00 d0       	rcall	.+0      	; 0xadc <DIO_getPinValue+0x8>
 adc:	0f 92       	push	r0
 ade:	cd b7       	in	r28, 0x3d	; 61
 ae0:	de b7       	in	r29, 0x3e	; 62
 ae2:	8d 83       	std	Y+5, r24	; 0x05
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
 ae4:	8d 81       	ldd	r24, Y+5	; 0x05
 ae6:	0e 94 8a 04 	call	0x914	; 0x914 <getPinNumber>
 aea:	8c 83       	std	Y+4, r24	; 0x04
 aec:	8d 81       	ldd	r24, Y+5	; 0x05
 aee:	0e 94 bf 04 	call	0x97e	; 0x97e <getPortNumber>
 af2:	8b 83       	std	Y+3, r24	; 0x03
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
 af4:	8b 81       	ldd	r24, Y+3	; 0x03
 af6:	28 2f       	mov	r18, r24
 af8:	30 e0       	ldi	r19, 0x00	; 0
 afa:	c9 01       	movw	r24, r18
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	82 0f       	add	r24, r18
 b02:	93 1f       	adc	r25, r19
 b04:	88 0f       	add	r24, r24
 b06:	99 1f       	adc	r25, r25
 b08:	fc 01       	movw	r30, r24
 b0a:	ec 59       	subi	r30, 0x9C	; 156
 b0c:	ff 4f       	sbci	r31, 0xFF	; 255
 b0e:	80 81       	ld	r24, Z
 b10:	91 81       	ldd	r25, Z+1	; 0x01
 b12:	9a 83       	std	Y+2, r25	; 0x02
 b14:	89 83       	std	Y+1, r24	; 0x01
   /* return pin value */
    return getBit((*PINX) ,pin);
 b16:	e9 81       	ldd	r30, Y+1	; 0x01
 b18:	fa 81       	ldd	r31, Y+2	; 0x02
 b1a:	80 81       	ld	r24, Z
 b1c:	28 2f       	mov	r18, r24
 b1e:	30 e0       	ldi	r19, 0x00	; 0
 b20:	8c 81       	ldd	r24, Y+4	; 0x04
 b22:	88 2f       	mov	r24, r24
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	a9 01       	movw	r20, r18
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_getPinValue+0x5a>
 b2a:	55 95       	asr	r21
 b2c:	47 95       	ror	r20
 b2e:	8a 95       	dec	r24
 b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_getPinValue+0x56>
 b32:	ca 01       	movw	r24, r20
 b34:	81 70       	andi	r24, 0x01	; 1
}
 b36:	0f 90       	pop	r0
 b38:	0f 90       	pop	r0
 b3a:	0f 90       	pop	r0
 b3c:	0f 90       	pop	r0
 b3e:	0f 90       	pop	r0
 b40:	cf 91       	pop	r28
 b42:	df 91       	pop	r29
 b44:	08 95       	ret

00000b46 <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
 b46:	df 93       	push	r29
 b48:	cf 93       	push	r28
 b4a:	cd b7       	in	r28, 0x3d	; 61
 b4c:	de b7       	in	r29, 0x3e	; 62
 b4e:	28 97       	sbiw	r28, 0x08	; 8
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	f8 94       	cli
 b54:	de bf       	out	0x3e, r29	; 62
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	cd bf       	out	0x3d, r28	; 61
 b5a:	8d 83       	std	Y+5, r24	; 0x05
 b5c:	6e 83       	std	Y+6, r22	; 0x06
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 b5e:	8d 81       	ldd	r24, Y+5	; 0x05
 b60:	28 2f       	mov	r18, r24
 b62:	30 e0       	ldi	r19, 0x00	; 0
 b64:	c9 01       	movw	r24, r18
 b66:	88 0f       	add	r24, r24
 b68:	99 1f       	adc	r25, r25
 b6a:	82 0f       	add	r24, r18
 b6c:	93 1f       	adc	r25, r19
 b6e:	01 96       	adiw	r24, 0x01	; 1
 b70:	88 0f       	add	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	fc 01       	movw	r30, r24
 b76:	e0 5a       	subi	r30, 0xA0	; 160
 b78:	ff 4f       	sbci	r31, 0xFF	; 255
 b7a:	80 81       	ld	r24, Z
 b7c:	91 81       	ldd	r25, Z+1	; 0x01
 b7e:	9c 83       	std	Y+4, r25	; 0x04
 b80:	8b 83       	std	Y+3, r24	; 0x03
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 b82:	8d 81       	ldd	r24, Y+5	; 0x05
 b84:	28 2f       	mov	r18, r24
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	c9 01       	movw	r24, r18
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	82 0f       	add	r24, r18
 b90:	93 1f       	adc	r25, r19
 b92:	88 0f       	add	r24, r24
 b94:	99 1f       	adc	r25, r25
 b96:	fc 01       	movw	r30, r24
 b98:	e0 5a       	subi	r30, 0xA0	; 160
 b9a:	ff 4f       	sbci	r31, 0xFF	; 255
 b9c:	80 81       	ld	r24, Z
 b9e:	91 81       	ldd	r25, Z+1	; 0x01
 ba0:	9a 83       	std	Y+2, r25	; 0x02
 ba2:	89 83       	std	Y+1, r24	; 0x01
	
    switch (pinDirection)
 ba4:	8e 81       	ldd	r24, Y+6	; 0x06
 ba6:	28 2f       	mov	r18, r24
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	38 87       	std	Y+8, r19	; 0x08
 bac:	2f 83       	std	Y+7, r18	; 0x07
 bae:	8f 81       	ldd	r24, Y+7	; 0x07
 bb0:	98 85       	ldd	r25, Y+8	; 0x08
 bb2:	81 30       	cpi	r24, 0x01	; 1
 bb4:	91 05       	cpc	r25, r1
 bb6:	69 f0       	breq	.+26     	; 0xbd2 <DIO_setPortDirection+0x8c>
 bb8:	2f 81       	ldd	r18, Y+7	; 0x07
 bba:	38 85       	ldd	r19, Y+8	; 0x08
 bbc:	22 30       	cpi	r18, 0x02	; 2
 bbe:	31 05       	cpc	r19, r1
 bc0:	69 f0       	breq	.+26     	; 0xbdc <DIO_setPortDirection+0x96>
 bc2:	8f 81       	ldd	r24, Y+7	; 0x07
 bc4:	98 85       	ldd	r25, Y+8	; 0x08
 bc6:	00 97       	sbiw	r24, 0x00	; 0
 bc8:	81 f4       	brne	.+32     	; 0xbea <DIO_setPortDirection+0xa4>
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 bca:	eb 81       	ldd	r30, Y+3	; 0x03
 bcc:	fc 81       	ldd	r31, Y+4	; 0x04
 bce:	10 82       	st	Z, r1
 bd0:	0c c0       	rjmp	.+24     	; 0xbea <DIO_setPortDirection+0xa4>
        break;
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 bd2:	eb 81       	ldd	r30, Y+3	; 0x03
 bd4:	fc 81       	ldd	r31, Y+4	; 0x04
 bd6:	8f ef       	ldi	r24, 0xFF	; 255
 bd8:	80 83       	st	Z, r24
 bda:	07 c0       	rjmp	.+14     	; 0xbea <DIO_setPortDirection+0xa4>
        break;
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 bdc:	e9 81       	ldd	r30, Y+1	; 0x01
 bde:	fa 81       	ldd	r31, Y+2	; 0x02
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 be4:	eb 81       	ldd	r30, Y+3	; 0x03
 be6:	fc 81       	ldd	r31, Y+4	; 0x04
 be8:	10 82       	st	Z, r1
        break;
    default:
        /* do nothing */
        break;
    }
}
 bea:	28 96       	adiw	r28, 0x08	; 8
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	f8 94       	cli
 bf0:	de bf       	out	0x3e, r29	; 62
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	cd bf       	out	0x3d, r28	; 61
 bf6:	cf 91       	pop	r28
 bf8:	df 91       	pop	r29
 bfa:	08 95       	ret

00000bfc <DIO_setPortValue>:

void DIO_setPortValue(EN_PortNumber_t portNum,uint8_t value) 
{
 bfc:	df 93       	push	r29
 bfe:	cf 93       	push	r28
 c00:	00 d0       	rcall	.+0      	; 0xc02 <DIO_setPortValue+0x6>
 c02:	00 d0       	rcall	.+0      	; 0xc04 <DIO_setPortValue+0x8>
 c04:	cd b7       	in	r28, 0x3d	; 61
 c06:	de b7       	in	r29, 0x3e	; 62
 c08:	8b 83       	std	Y+3, r24	; 0x03
 c0a:	6c 83       	std	Y+4, r22	; 0x04
	/* select PORTX Register */
    volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 c0c:	8b 81       	ldd	r24, Y+3	; 0x03
 c0e:	28 2f       	mov	r18, r24
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	c9 01       	movw	r24, r18
 c14:	88 0f       	add	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	82 0f       	add	r24, r18
 c1a:	93 1f       	adc	r25, r19
 c1c:	88 0f       	add	r24, r24
 c1e:	99 1f       	adc	r25, r25
 c20:	fc 01       	movw	r30, r24
 c22:	e0 5a       	subi	r30, 0xA0	; 160
 c24:	ff 4f       	sbci	r31, 0xFF	; 255
 c26:	80 81       	ld	r24, Z
 c28:	91 81       	ldd	r25, Z+1	; 0x01
 c2a:	9a 83       	std	Y+2, r25	; 0x02
 c2c:	89 83       	std	Y+1, r24	; 0x01
	/* set the port value */	
    *PORTX = value ;
 c2e:	e9 81       	ldd	r30, Y+1	; 0x01
 c30:	fa 81       	ldd	r31, Y+2	; 0x02
 c32:	8c 81       	ldd	r24, Y+4	; 0x04
 c34:	80 83       	st	Z, r24
}
 c36:	0f 90       	pop	r0
 c38:	0f 90       	pop	r0
 c3a:	0f 90       	pop	r0
 c3c:	0f 90       	pop	r0
 c3e:	cf 91       	pop	r28
 c40:	df 91       	pop	r29
 c42:	08 95       	ret

00000c44 <main>:
void task1(void) ;
void task2(void) ;
void task3(void) ;

int main(void)
{
 c44:	df 93       	push	r29
 c46:	cf 93       	push	r28
 c48:	cd b7       	in	r28, 0x3d	; 61
 c4a:	de b7       	in	r29, 0x3e	; 62
 c4c:	6e 97       	sbiw	r28, 0x1e	; 30
 c4e:	0f b6       	in	r0, 0x3f	; 63
 c50:	f8 94       	cli
 c52:	de bf       	out	0x3e, r29	; 62
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	cd bf       	out	0x3d, r28	; 61
	DIO_setPortDirection(PORTA,OUTPUT) ;
 c58:	80 e0       	ldi	r24, 0x00	; 0
 c5a:	61 e0       	ldi	r22, 0x01	; 1
 c5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_setPortDirection>
	ST_Task_t led1_task  = {0, 1000, &task1}  ;
 c60:	ce 01       	movw	r24, r28
 c62:	01 96       	adiw	r24, 0x01	; 1
 c64:	99 8b       	std	Y+17, r25	; 0x11
 c66:	88 8b       	std	Y+16, r24	; 0x10
 c68:	e2 e8       	ldi	r30, 0x82	; 130
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	fb 8b       	std	Y+19, r31	; 0x13
 c6e:	ea 8b       	std	Y+18, r30	; 0x12
 c70:	f5 e0       	ldi	r31, 0x05	; 5
 c72:	fc 8b       	std	Y+20, r31	; 0x14
 c74:	ea 89       	ldd	r30, Y+18	; 0x12
 c76:	fb 89       	ldd	r31, Y+19	; 0x13
 c78:	00 80       	ld	r0, Z
 c7a:	8a 89       	ldd	r24, Y+18	; 0x12
 c7c:	9b 89       	ldd	r25, Y+19	; 0x13
 c7e:	01 96       	adiw	r24, 0x01	; 1
 c80:	9b 8b       	std	Y+19, r25	; 0x13
 c82:	8a 8b       	std	Y+18, r24	; 0x12
 c84:	e8 89       	ldd	r30, Y+16	; 0x10
 c86:	f9 89       	ldd	r31, Y+17	; 0x11
 c88:	00 82       	st	Z, r0
 c8a:	88 89       	ldd	r24, Y+16	; 0x10
 c8c:	99 89       	ldd	r25, Y+17	; 0x11
 c8e:	01 96       	adiw	r24, 0x01	; 1
 c90:	99 8b       	std	Y+17, r25	; 0x11
 c92:	88 8b       	std	Y+16, r24	; 0x10
 c94:	9c 89       	ldd	r25, Y+20	; 0x14
 c96:	91 50       	subi	r25, 0x01	; 1
 c98:	9c 8b       	std	Y+20, r25	; 0x14
 c9a:	ec 89       	ldd	r30, Y+20	; 0x14
 c9c:	ee 23       	and	r30, r30
 c9e:	51 f7       	brne	.-44     	; 0xc74 <main+0x30>
	ST_Task_t led2_task  = {1, 2000, &task2}  ;
 ca0:	ce 01       	movw	r24, r28
 ca2:	06 96       	adiw	r24, 0x06	; 6
 ca4:	9e 8b       	std	Y+22, r25	; 0x16
 ca6:	8d 8b       	std	Y+21, r24	; 0x15
 ca8:	ed e7       	ldi	r30, 0x7D	; 125
 caa:	f0 e0       	ldi	r31, 0x00	; 0
 cac:	f8 8f       	std	Y+24, r31	; 0x18
 cae:	ef 8b       	std	Y+23, r30	; 0x17
 cb0:	f5 e0       	ldi	r31, 0x05	; 5
 cb2:	f9 8f       	std	Y+25, r31	; 0x19
 cb4:	ef 89       	ldd	r30, Y+23	; 0x17
 cb6:	f8 8d       	ldd	r31, Y+24	; 0x18
 cb8:	00 80       	ld	r0, Z
 cba:	8f 89       	ldd	r24, Y+23	; 0x17
 cbc:	98 8d       	ldd	r25, Y+24	; 0x18
 cbe:	01 96       	adiw	r24, 0x01	; 1
 cc0:	98 8f       	std	Y+24, r25	; 0x18
 cc2:	8f 8b       	std	Y+23, r24	; 0x17
 cc4:	ed 89       	ldd	r30, Y+21	; 0x15
 cc6:	fe 89       	ldd	r31, Y+22	; 0x16
 cc8:	00 82       	st	Z, r0
 cca:	8d 89       	ldd	r24, Y+21	; 0x15
 ccc:	9e 89       	ldd	r25, Y+22	; 0x16
 cce:	01 96       	adiw	r24, 0x01	; 1
 cd0:	9e 8b       	std	Y+22, r25	; 0x16
 cd2:	8d 8b       	std	Y+21, r24	; 0x15
 cd4:	99 8d       	ldd	r25, Y+25	; 0x19
 cd6:	91 50       	subi	r25, 0x01	; 1
 cd8:	99 8f       	std	Y+25, r25	; 0x19
 cda:	e9 8d       	ldd	r30, Y+25	; 0x19
 cdc:	ee 23       	and	r30, r30
 cde:	51 f7       	brne	.-44     	; 0xcb4 <main+0x70>
	ST_Task_t led3_task  = {2, 3000, &task3}  ;
 ce0:	ce 01       	movw	r24, r28
 ce2:	0b 96       	adiw	r24, 0x0b	; 11
 ce4:	9b 8f       	std	Y+27, r25	; 0x1b
 ce6:	8a 8f       	std	Y+26, r24	; 0x1a
 ce8:	e8 e7       	ldi	r30, 0x78	; 120
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	fd 8f       	std	Y+29, r31	; 0x1d
 cee:	ec 8f       	std	Y+28, r30	; 0x1c
 cf0:	f5 e0       	ldi	r31, 0x05	; 5
 cf2:	fe 8f       	std	Y+30, r31	; 0x1e
 cf4:	ec 8d       	ldd	r30, Y+28	; 0x1c
 cf6:	fd 8d       	ldd	r31, Y+29	; 0x1d
 cf8:	00 80       	ld	r0, Z
 cfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
 cfc:	9d 8d       	ldd	r25, Y+29	; 0x1d
 cfe:	01 96       	adiw	r24, 0x01	; 1
 d00:	9d 8f       	std	Y+29, r25	; 0x1d
 d02:	8c 8f       	std	Y+28, r24	; 0x1c
 d04:	ea 8d       	ldd	r30, Y+26	; 0x1a
 d06:	fb 8d       	ldd	r31, Y+27	; 0x1b
 d08:	00 82       	st	Z, r0
 d0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 d0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 d0e:	01 96       	adiw	r24, 0x01	; 1
 d10:	9b 8f       	std	Y+27, r25	; 0x1b
 d12:	8a 8f       	std	Y+26, r24	; 0x1a
 d14:	9e 8d       	ldd	r25, Y+30	; 0x1e
 d16:	91 50       	subi	r25, 0x01	; 1
 d18:	9e 8f       	std	Y+30, r25	; 0x1e
 d1a:	ee 8d       	ldd	r30, Y+30	; 0x1e
 d1c:	ee 23       	and	r30, r30
 d1e:	51 f7       	brne	.-44     	; 0xcf4 <main+0xb0>
	RTOS_CreateTask(&led1_task) ;
 d20:	ce 01       	movw	r24, r28
 d22:	01 96       	adiw	r24, 0x01	; 1
 d24:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RTOS_CreateTask>
	RTOS_CreateTask(&led2_task) ;
 d28:	ce 01       	movw	r24, r28
 d2a:	06 96       	adiw	r24, 0x06	; 6
 d2c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RTOS_CreateTask>
	RTOS_CreateTask(&led3_task)	;
 d30:	ce 01       	movw	r24, r28
 d32:	0b 96       	adiw	r24, 0x0b	; 11
 d34:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RTOS_CreateTask>
	RTOS_Start() ;
 d38:	0e 94 c8 02 	call	0x590	; 0x590 <RTOS_Start>
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <main+0xf8>

00000d3e <task1>:

	}
}

void task1(void)
{
 d3e:	df 93       	push	r29
 d40:	cf 93       	push	r28
 d42:	cd b7       	in	r28, 0x3d	; 61
 d44:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(PA0,TOGGLE) ;
 d46:	80 e0       	ldi	r24, 0x00	; 0
 d48:	62 e0       	ldi	r22, 0x02	; 2
 d4a:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_setPinValue>
}
 d4e:	cf 91       	pop	r28
 d50:	df 91       	pop	r29
 d52:	08 95       	ret

00000d54 <task2>:
void task2(void)
{
 d54:	df 93       	push	r29
 d56:	cf 93       	push	r28
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(PA1,TOGGLE) ;
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	62 e0       	ldi	r22, 0x02	; 2
 d60:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_setPinValue>
}
 d64:	cf 91       	pop	r28
 d66:	df 91       	pop	r29
 d68:	08 95       	ret

00000d6a <task3>:
void task3(void)
{
 d6a:	df 93       	push	r29
 d6c:	cf 93       	push	r28
 d6e:	cd b7       	in	r28, 0x3d	; 61
 d70:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(PA2,TOGGLE) ;
 d72:	82 e0       	ldi	r24, 0x02	; 2
 d74:	62 e0       	ldi	r22, 0x02	; 2
 d76:	0e 94 ed 04 	call	0x9da	; 0x9da <DIO_setPinValue>
}
 d7a:	cf 91       	pop	r28
 d7c:	df 91       	pop	r29
 d7e:	08 95       	ret

00000d80 <__udivmodsi4>:
 d80:	a1 e2       	ldi	r26, 0x21	; 33
 d82:	1a 2e       	mov	r1, r26
 d84:	aa 1b       	sub	r26, r26
 d86:	bb 1b       	sub	r27, r27
 d88:	fd 01       	movw	r30, r26
 d8a:	0d c0       	rjmp	.+26     	; 0xda6 <__udivmodsi4_ep>

00000d8c <__udivmodsi4_loop>:
 d8c:	aa 1f       	adc	r26, r26
 d8e:	bb 1f       	adc	r27, r27
 d90:	ee 1f       	adc	r30, r30
 d92:	ff 1f       	adc	r31, r31
 d94:	a2 17       	cp	r26, r18
 d96:	b3 07       	cpc	r27, r19
 d98:	e4 07       	cpc	r30, r20
 d9a:	f5 07       	cpc	r31, r21
 d9c:	20 f0       	brcs	.+8      	; 0xda6 <__udivmodsi4_ep>
 d9e:	a2 1b       	sub	r26, r18
 da0:	b3 0b       	sbc	r27, r19
 da2:	e4 0b       	sbc	r30, r20
 da4:	f5 0b       	sbc	r31, r21

00000da6 <__udivmodsi4_ep>:
 da6:	66 1f       	adc	r22, r22
 da8:	77 1f       	adc	r23, r23
 daa:	88 1f       	adc	r24, r24
 dac:	99 1f       	adc	r25, r25
 dae:	1a 94       	dec	r1
 db0:	69 f7       	brne	.-38     	; 0xd8c <__udivmodsi4_loop>
 db2:	60 95       	com	r22
 db4:	70 95       	com	r23
 db6:	80 95       	com	r24
 db8:	90 95       	com	r25
 dba:	9b 01       	movw	r18, r22
 dbc:	ac 01       	movw	r20, r24
 dbe:	bd 01       	movw	r22, r26
 dc0:	cf 01       	movw	r24, r30
 dc2:	08 95       	ret

00000dc4 <_exit>:
 dc4:	f8 94       	cli

00000dc6 <__stop_program>:
 dc6:	ff cf       	rjmp	.-2      	; 0xdc6 <__stop_program>
