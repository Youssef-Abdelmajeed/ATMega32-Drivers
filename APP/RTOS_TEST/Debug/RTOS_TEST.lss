
RTOS_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000e80  00000f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800078  00800078  00000f2c  2**0
                  ALLOC
  3 .stab         0000159c  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc5  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_4>
  14:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_10>
  2c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 06 	call	0xd98	; 0xd98 <main>
  8a:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer_SetPrescaler>:
void (*TIMERS_NORMAL_ISR[2])(void) = {NULL,NULL} ;
/*place holder for timers compare match callback */
void (*TIMERS_CTC_ISR[2])(void) = {NULL,NULL} ;

inline void Timer_SetPrescaler(Timers_t timer , prescalerModes_t Pmode)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <Timer_SetPrescaler+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <Timer_SetPrescaler+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	89 83       	std	Y+1, r24	; 0x01
  a0:	6a 83       	std	Y+2, r22	; 0x02
    /* set the clock mode to the corresponding Timer  */
    switch (timer)
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	28 2f       	mov	r18, r24
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	3c 83       	std	Y+4, r19	; 0x04
  aa:	2b 83       	std	Y+3, r18	; 0x03
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	31 f0       	breq	.+12     	; 0xc0 <Timer_SetPrescaler+0x2e>
  b4:	2b 81       	ldd	r18, Y+3	; 0x03
  b6:	3c 81       	ldd	r19, Y+4	; 0x04
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	31 05       	cpc	r19, r1
  bc:	89 f0       	breq	.+34     	; 0xe0 <Timer_SetPrescaler+0x4e>
  be:	1f c0       	rjmp	.+62     	; 0xfe <Timer_SetPrescaler+0x6c>
    {
    case TIMER0: 
        /* clear Timer0 clock selection bits */
        TCCR0 &= 0XF8 ;
  c0:	a3 e5       	ldi	r26, 0x53	; 83
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e3 e5       	ldi	r30, 0x53	; 83
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 7f       	andi	r24, 0xF8	; 248
  cc:	8c 93       	st	X, r24
        /* set Timer0 new clock mode  */
        TCCR0 |= Pmode ;
  ce:	a3 e5       	ldi	r26, 0x53	; 83
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e3 e5       	ldi	r30, 0x53	; 83
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	89 2b       	or	r24, r25
  dc:	8c 93       	st	X, r24
  de:	0f c0       	rjmp	.+30     	; 0xfe <Timer_SetPrescaler+0x6c>
        break;
    case TIMER2:
        /* clear Timer2 clock selection bits */
        TCCR2 &= 0xF8 ;
  e0:	a5 e4       	ldi	r26, 0x45	; 69
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e4       	ldi	r30, 0x45	; 69
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 7f       	andi	r24, 0xF8	; 248
  ec:	8c 93       	st	X, r24
         /* set Timer2 new clock mode  */
        TCCR2 |= Pmode ;
  ee:	a5 e4       	ldi	r26, 0x45	; 69
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e5 e4       	ldi	r30, 0x45	; 69
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	90 81       	ld	r25, Z
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	89 2b       	or	r24, r25
  fc:	8c 93       	st	X, r24
        break;
    default:
        /*do nothing*/
        break;
    }
}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <Timer_SetWaveMode>:
inline void Timer_SetWaveMode(Timers_t timer , waveModes_t Wmode)
{
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	00 d0       	rcall	.+0      	; 0x112 <Timer_SetWaveMode+0x6>
 112:	00 d0       	rcall	.+0      	; 0x114 <Timer_SetWaveMode+0x8>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	89 83       	std	Y+1, r24	; 0x01
 11a:	6a 83       	std	Y+2, r22	; 0x02
    /* set the wave mode to the corresponding Timer  */
    switch (timer)
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	3c 83       	std	Y+4, r19	; 0x04
 124:	2b 83       	std	Y+3, r18	; 0x03
 126:	8b 81       	ldd	r24, Y+3	; 0x03
 128:	9c 81       	ldd	r25, Y+4	; 0x04
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	31 f0       	breq	.+12     	; 0x13a <Timer_SetWaveMode+0x2e>
 12e:	2b 81       	ldd	r18, Y+3	; 0x03
 130:	3c 81       	ldd	r19, Y+4	; 0x04
 132:	21 30       	cpi	r18, 0x01	; 1
 134:	31 05       	cpc	r19, r1
 136:	69 f1       	breq	.+90     	; 0x192 <Timer_SetWaveMode+0x86>
 138:	57 c0       	rjmp	.+174    	; 0x1e8 <Timer_SetWaveMode+0xdc>
    {
    case TIMER0:
        /* clear Timer0 Wave mode selection bits */
        TCCR0 &= 0XB7 ;
 13a:	a3 e5       	ldi	r26, 0x53	; 83
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e3 e5       	ldi	r30, 0x53	; 83
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	87 7b       	andi	r24, 0xB7	; 183
 146:	8c 93       	st	X, r24
        /* set Timer0 new wave mode  */
        TCCR0 |= (getBit(Wmode,0)<<TCCR0_WGM00) | (getBit(Wmode,1)<<TCCR0_WGM01)  ; 
 148:	a3 e5       	ldi	r26, 0x53	; 83
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e3 e5       	ldi	r30, 0x53	; 83
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	38 2f       	mov	r19, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	88 2f       	mov	r24, r24
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	90 70       	andi	r25, 0x00	; 0
 15e:	00 24       	eor	r0, r0
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	07 94       	ror	r0
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	07 94       	ror	r0
 16c:	98 2f       	mov	r25, r24
 16e:	80 2d       	mov	r24, r0
 170:	28 2f       	mov	r18, r24
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	86 95       	lsr	r24
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	90 70       	andi	r25, 0x00	; 0
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	82 2b       	or	r24, r18
 18c:	83 2b       	or	r24, r19
 18e:	8c 93       	st	X, r24
 190:	2b c0       	rjmp	.+86     	; 0x1e8 <Timer_SetWaveMode+0xdc>
        break;
    case TIMER2 : 
         /* clear Timer2 Wave mode selection bits */
        TCCR2 &= 0XB7 ;
 192:	a5 e4       	ldi	r26, 0x45	; 69
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	e5 e4       	ldi	r30, 0x45	; 69
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	87 7b       	andi	r24, 0xB7	; 183
 19e:	8c 93       	st	X, r24
        /* set Timer2 new wave mode  */
        TCCR2 |= (getBit(Wmode,0)<<TCCR2_WGM00) | (getBit(Wmode,1)<<TCCR2_WGM01)  ; 
 1a0:	a5 e4       	ldi	r26, 0x45	; 69
 1a2:	b0 e0       	ldi	r27, 0x00	; 0
 1a4:	e5 e4       	ldi	r30, 0x45	; 69
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	38 2f       	mov	r19, r24
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	88 2f       	mov	r24, r24
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	90 70       	andi	r25, 0x00	; 0
 1b6:	00 24       	eor	r0, r0
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	07 94       	ror	r0
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	07 94       	ror	r0
 1c4:	98 2f       	mov	r25, r24
 1c6:	80 2d       	mov	r24, r0
 1c8:	28 2f       	mov	r18, r24
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	86 95       	lsr	r24
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	81 70       	andi	r24, 0x01	; 1
 1d4:	90 70       	andi	r25, 0x00	; 0
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	82 2b       	or	r24, r18
 1e4:	83 2b       	or	r24, r19
 1e6:	8c 93       	st	X, r24

    default:
        /* do nothing */
        break;
    }
}
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <Timer_Init>:

void Timer_Init(Timers_t timer , prescalerModes_t Pmode ,  waveModes_t Wmode)
{
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <Timer_Init+0x6>
 1fc:	0f 92       	push	r0
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	89 83       	std	Y+1, r24	; 0x01
 204:	6a 83       	std	Y+2, r22	; 0x02
 206:	4b 83       	std	Y+3, r20	; 0x03
    /* set timer clock mode */
    Timer_SetPrescaler(timer,Pmode) ; 
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	6a 81       	ldd	r22, Y+2	; 0x02
 20c:	0e 94 49 00 	call	0x92	; 0x92 <Timer_SetPrescaler>
    /* set timer wave mode */
    Timer_SetWaveMode(timer,Wmode) ;
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	6b 81       	ldd	r22, Y+3	; 0x03
 214:	0e 94 86 00 	call	0x10c	; 0x10c <Timer_SetWaveMode>
}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	08 95       	ret

00000224 <Timer_SetOverflow_Callback>:

inline void Timer_SetOverflow_Callback(Timers_t timer , void(*callback)(void)) 
{
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	00 d0       	rcall	.+0      	; 0x22a <Timer_SetOverflow_Callback+0x6>
 22a:	00 d0       	rcall	.+0      	; 0x22c <Timer_SetOverflow_Callback+0x8>
 22c:	0f 92       	push	r0
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	7b 83       	std	Y+3, r23	; 0x03
 236:	6a 83       	std	Y+2, r22	; 0x02
    /*if callback isn't NULL */
    if(callback!=NULL)
 238:	8a 81       	ldd	r24, Y+2	; 0x02
 23a:	9b 81       	ldd	r25, Y+3	; 0x03
 23c:	00 97       	sbiw	r24, 0x00	; 0
 23e:	c1 f1       	breq	.+112    	; 0x2b0 <Timer_SetOverflow_Callback+0x8c>
    {
        /* set callback to the corresponding Timer  */
        switch (timer)
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	3d 83       	std	Y+5, r19	; 0x05
 248:	2c 83       	std	Y+4, r18	; 0x04
 24a:	8c 81       	ldd	r24, Y+4	; 0x04
 24c:	9d 81       	ldd	r25, Y+5	; 0x05
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	31 f0       	breq	.+12     	; 0x25e <Timer_SetOverflow_Callback+0x3a>
 252:	2c 81       	ldd	r18, Y+4	; 0x04
 254:	3d 81       	ldd	r19, Y+5	; 0x05
 256:	21 30       	cpi	r18, 0x01	; 1
 258:	31 05       	cpc	r19, r1
 25a:	b1 f0       	breq	.+44     	; 0x288 <Timer_SetOverflow_Callback+0x64>
 25c:	29 c0       	rjmp	.+82     	; 0x2b0 <Timer_SetOverflow_Callback+0x8c>
        {
        case TIMER0:
            /* set overflow Interrupt Enable 0 */
            setBit(TIMSK,TIMSK_TOIE0) ; 
 25e:	a9 e5       	ldi	r26, 0x59	; 89
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	e9 e5       	ldi	r30, 0x59	; 89
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	81 60       	ori	r24, 0x01	; 1
 26a:	8c 93       	st	X, r24
            /* clear CTC Interrupt Enable 0 */
            clearBit(TIMSK,TIMSK_OCIE0) ;
 26c:	a9 e5       	ldi	r26, 0x59	; 89
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e9 e5       	ldi	r30, 0x59	; 89
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_NORMAL_ISR[0] = callback ; 
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	9b 81       	ldd	r25, Y+3	; 0x03
 27e:	90 93 79 00 	sts	0x0079, r25
 282:	80 93 78 00 	sts	0x0078, r24
 286:	14 c0       	rjmp	.+40     	; 0x2b0 <Timer_SetOverflow_Callback+0x8c>
            break;
        case TIMER2:
            /* set overflow Interrupt Enable 2 */
            setBit(TIMSK,TIMSK_TOIE2) ; 
 288:	a9 e5       	ldi	r26, 0x59	; 89
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e9 e5       	ldi	r30, 0x59	; 89
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	8c 93       	st	X, r24
            /* clear CTC Interrupt Enable 2*/
            clearBit(TIMSK,TIMSK_OCIE2) ;
 296:	a9 e5       	ldi	r26, 0x59	; 89
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e9 e5       	ldi	r30, 0x59	; 89
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8f 77       	andi	r24, 0x7F	; 127
 2a2:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_NORMAL_ISR[1] = callback ; 
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	9b 81       	ldd	r25, Y+3	; 0x03
 2a8:	90 93 7b 00 	sts	0x007B, r25
 2ac:	80 93 7a 00 	sts	0x007A, r24
    }
    else
    {
        /* do nothing */
    }
}
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <Timer_SetCTC_Callback>:
inline void Timer_SetCTC_Callback(Timers_t timer , void(*callback)(void)) 
{
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <Timer_SetCTC_Callback+0x6>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <Timer_SetCTC_Callback+0x8>
 2c8:	0f 92       	push	r0
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	89 83       	std	Y+1, r24	; 0x01
 2d0:	7b 83       	std	Y+3, r23	; 0x03
 2d2:	6a 83       	std	Y+2, r22	; 0x02
    /*if callback isn't NULL */
    if(callback!=NULL)
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	9b 81       	ldd	r25, Y+3	; 0x03
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	c1 f1       	breq	.+112    	; 0x34c <Timer_SetCTC_Callback+0x8c>
    {
        /* set callback to the corresponding Timer  */
        switch (timer)
 2dc:	89 81       	ldd	r24, Y+1	; 0x01
 2de:	28 2f       	mov	r18, r24
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	3d 83       	std	Y+5, r19	; 0x05
 2e4:	2c 83       	std	Y+4, r18	; 0x04
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	31 f0       	breq	.+12     	; 0x2fa <Timer_SetCTC_Callback+0x3a>
 2ee:	2c 81       	ldd	r18, Y+4	; 0x04
 2f0:	3d 81       	ldd	r19, Y+5	; 0x05
 2f2:	21 30       	cpi	r18, 0x01	; 1
 2f4:	31 05       	cpc	r19, r1
 2f6:	b1 f0       	breq	.+44     	; 0x324 <Timer_SetCTC_Callback+0x64>
 2f8:	29 c0       	rjmp	.+82     	; 0x34c <Timer_SetCTC_Callback+0x8c>
        {
        case TIMER0:
            /* set CTC Interrupt Enable 0 */
            setBit(TIMSK,TIMSK_OCIE0) ; 
 2fa:	a9 e5       	ldi	r26, 0x59	; 89
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	e9 e5       	ldi	r30, 0x59	; 89
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	82 60       	ori	r24, 0x02	; 2
 306:	8c 93       	st	X, r24
            /* clear overflow Interrupt Enable 0 */
            clearBit(TIMSK,TIMSK_TOIE0) ;
 308:	a9 e5       	ldi	r26, 0x59	; 89
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	e9 e5       	ldi	r30, 0x59	; 89
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_CTC_ISR[0] = callback ; 
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	9b 81       	ldd	r25, Y+3	; 0x03
 31a:	90 93 7d 00 	sts	0x007D, r25
 31e:	80 93 7c 00 	sts	0x007C, r24
 322:	14 c0       	rjmp	.+40     	; 0x34c <Timer_SetCTC_Callback+0x8c>
            break;
        case TIMER2:
            /* set CTC Interrupt Enable 2 */
            setBit(TIMSK,TIMSK_OCIE2) ;
 324:	a9 e5       	ldi	r26, 0x59	; 89
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e9 e5       	ldi	r30, 0x59	; 89
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	8c 93       	st	X, r24
            /* clear overflow Interrupt Enable 2 */
            clearBit(TIMSK,TIMSK_TOIE2) ;
 332:	a9 e5       	ldi	r26, 0x59	; 89
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e9 e5       	ldi	r30, 0x59	; 89
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	8f 7b       	andi	r24, 0xBF	; 191
 33e:	8c 93       	st	X, r24
            /* set callback */
            TIMERS_CTC_ISR[1] = callback ;
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	9b 81       	ldd	r25, Y+3	; 0x03
 344:	90 93 7f 00 	sts	0x007F, r25
 348:	80 93 7e 00 	sts	0x007E, r24
    }
    else
    {
        /* do nothing */
    }
}
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	cf 91       	pop	r28
 358:	df 91       	pop	r29
 35a:	08 95       	ret

0000035c <Timer_SetOVFRegister>:
inline void Timer_SetOVFRegister(Timers_t timer,uint8_t value)
{
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	00 d0       	rcall	.+0      	; 0x362 <Timer_SetOVFRegister+0x6>
 362:	00 d0       	rcall	.+0      	; 0x364 <Timer_SetOVFRegister+0x8>
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	6a 83       	std	Y+2, r22	; 0x02
    /* set value to the corresponding Timer overflow register  */
     switch (timer)
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	3c 83       	std	Y+4, r19	; 0x04
 374:	2b 83       	std	Y+3, r18	; 0x03
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	9c 81       	ldd	r25, Y+4	; 0x04
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	31 f0       	breq	.+12     	; 0x38a <Timer_SetOVFRegister+0x2e>
 37e:	2b 81       	ldd	r18, Y+3	; 0x03
 380:	3c 81       	ldd	r19, Y+4	; 0x04
 382:	21 30       	cpi	r18, 0x01	; 1
 384:	31 05       	cpc	r19, r1
 386:	31 f0       	breq	.+12     	; 0x394 <Timer_SetOVFRegister+0x38>
 388:	09 c0       	rjmp	.+18     	; 0x39c <Timer_SetOVFRegister+0x40>
        {
        case TIMER0:
            TCNT0= value ; 
 38a:	e2 e5       	ldi	r30, 0x52	; 82
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	80 83       	st	Z, r24
 392:	04 c0       	rjmp	.+8      	; 0x39c <Timer_SetOVFRegister+0x40>
            break;
        case TIMER2:
            TCNT2= value ; 
 394:	e4 e4       	ldi	r30, 0x44	; 68
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	80 83       	st	Z, r24
            break;
        default:
            /*do nothing*/
            break;
        }
}
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <Timer_SetCTCRegister>:
inline void Timer_SetCTCRegister(Timers_t timer,uint8_t value)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <Timer_SetCTCRegister+0x6>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <Timer_SetCTCRegister+0x8>
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	6a 83       	std	Y+2, r22	; 0x02
     /* set value to the corresponding Timer CTC register  */
     switch (timer)
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	3c 83       	std	Y+4, r19	; 0x04
 3c2:	2b 83       	std	Y+3, r18	; 0x03
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	9c 81       	ldd	r25, Y+4	; 0x04
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <Timer_SetCTCRegister+0x2e>
 3cc:	2b 81       	ldd	r18, Y+3	; 0x03
 3ce:	3c 81       	ldd	r19, Y+4	; 0x04
 3d0:	21 30       	cpi	r18, 0x01	; 1
 3d2:	31 05       	cpc	r19, r1
 3d4:	31 f0       	breq	.+12     	; 0x3e2 <Timer_SetCTCRegister+0x38>
 3d6:	09 c0       	rjmp	.+18     	; 0x3ea <Timer_SetCTCRegister+0x40>
        {
        case TIMER0:
            OCR0= value ; 
 3d8:	ec e5       	ldi	r30, 0x5C	; 92
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	80 83       	st	Z, r24
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <Timer_SetCTCRegister+0x40>
            break;

        case TIMER2:
            OCR2= value ; 
 3e2:	e3 e4       	ldi	r30, 0x43	; 67
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	80 83       	st	Z, r24
            break;
        default:
            /*do nothing*/
            break;
        }
}
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <__vector_11>:

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	2f 93       	push	r18
 404:	3f 93       	push	r19
 406:	4f 93       	push	r20
 408:	5f 93       	push	r21
 40a:	6f 93       	push	r22
 40c:	7f 93       	push	r23
 40e:	8f 93       	push	r24
 410:	9f 93       	push	r25
 412:	af 93       	push	r26
 414:	bf 93       	push	r27
 416:	ef 93       	push	r30
 418:	ff 93       	push	r31
 41a:	df 93       	push	r29
 41c:	cf 93       	push	r28
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_NORMAL_ISR[0] != NULL)
 422:	80 91 78 00 	lds	r24, 0x0078
 426:	90 91 79 00 	lds	r25, 0x0079
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	29 f0       	breq	.+10     	; 0x438 <__vector_11+0x40>
    {
        TIMERS_NORMAL_ISR[0]() ;
 42e:	e0 91 78 00 	lds	r30, 0x0078
 432:	f0 91 79 00 	lds	r31, 0x0079
 436:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 438:	cf 91       	pop	r28
 43a:	df 91       	pop	r29
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	2f 93       	push	r18
 46a:	3f 93       	push	r19
 46c:	4f 93       	push	r20
 46e:	5f 93       	push	r21
 470:	6f 93       	push	r22
 472:	7f 93       	push	r23
 474:	8f 93       	push	r24
 476:	9f 93       	push	r25
 478:	af 93       	push	r26
 47a:	bf 93       	push	r27
 47c:	ef 93       	push	r30
 47e:	ff 93       	push	r31
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 488:	80 91 7c 00 	lds	r24, 0x007C
 48c:	90 91 7d 00 	lds	r25, 0x007D
 490:	00 97       	sbiw	r24, 0x00	; 0
 492:	29 f0       	breq	.+10     	; 0x49e <__vector_10+0x40>
    {
        TIMERS_CTC_ISR[0]() ;
 494:	e0 91 7c 00 	lds	r30, 0x007C
 498:	f0 91 7d 00 	lds	r31, 0x007D
 49c:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 49e:	cf 91       	pop	r28
 4a0:	df 91       	pop	r29
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	df 93       	push	r29
 4e8:	cf 93       	push	r28
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_NORMAL_ISR[1] != NULL)
 4ee:	80 91 7a 00 	lds	r24, 0x007A
 4f2:	90 91 7b 00 	lds	r25, 0x007B
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	29 f0       	breq	.+10     	; 0x504 <__vector_5+0x40>
    {
        TIMERS_NORMAL_ISR[1]() ;
 4fa:	e0 91 7a 00 	lds	r30, 0x007A
 4fe:	f0 91 7b 00 	lds	r31, 0x007B
 502:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 504:	cf 91       	pop	r28
 506:	df 91       	pop	r29
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 52a:	1f 92       	push	r1
 52c:	0f 92       	push	r0
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	0f 92       	push	r0
 532:	11 24       	eor	r1, r1
 534:	2f 93       	push	r18
 536:	3f 93       	push	r19
 538:	4f 93       	push	r20
 53a:	5f 93       	push	r21
 53c:	6f 93       	push	r22
 53e:	7f 93       	push	r23
 540:	8f 93       	push	r24
 542:	9f 93       	push	r25
 544:	af 93       	push	r26
 546:	bf 93       	push	r27
 548:	ef 93       	push	r30
 54a:	ff 93       	push	r31
 54c:	df 93       	push	r29
 54e:	cf 93       	push	r28
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
    if(TIMERS_CTC_ISR[1] != NULL)
 554:	80 91 7e 00 	lds	r24, 0x007E
 558:	90 91 7f 00 	lds	r25, 0x007F
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	29 f0       	breq	.+10     	; 0x56a <__vector_4+0x40>
    {
        TIMERS_CTC_ISR[1]() ;
 560:	e0 91 7e 00 	lds	r30, 0x007E
 564:	f0 91 7f 00 	lds	r31, 0x007F
 568:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <RTOS_Start>:

/*place holder for all RTOS Suspended System Tasks*/
uint8_t SuspendedTasks[TASK_NUM] ={0} ;

void RTOS_Start(void) 
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
	/*set the Timer CTC Mode callback to the Scheduler function*/
	Timer_SetCTC_Callback(TIMER_USED,&Scheduler) ;
 598:	2b ec       	ldi	r18, 0xCB	; 203
 59a:	33 e0       	ldi	r19, 0x03	; 3
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Timer_SetCTC_Callback>
	/*Global Interrupt Enable*/
	GIE_Enable() ;
 5a4:	0e 94 75 04 	call	0x8ea	; 0x8ea <GIE_Enable>
	/*Set the Selected timer with a Prescaler and use CTC Mode*/
	Timer_Init(TIMER_USED,prescaler64,CTC) ;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	42 e0       	ldi	r20, 0x02	; 2
 5ae:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Timer_Init>
	/*Set output match compare value*/
	Timer_SetCTCRegister(TIMER_USED,125) ;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	6d e7       	ldi	r22, 0x7D	; 125
 5b6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <Timer_SetCTCRegister>
} 
 5ba:	cf 91       	pop	r28
 5bc:	df 91       	pop	r29
 5be:	08 95       	ret

000005c0 <RTOS_CreateTask>:
uint8_t RTOS_CreateTask(ST_Task_t * task)
{
 5c0:	df 93       	push	r29
 5c2:	cf 93       	push	r28
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	28 97       	sbiw	r28, 0x08	; 8
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	9b 83       	std	Y+3, r25	; 0x03
 5d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t errorStates = RTOS_OK ;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	89 83       	std	Y+1, r24	; 0x01
	if(SystemsTasks[task->Priority].taskFunction==NULL)
 5dc:	ea 81       	ldd	r30, Y+2	; 0x02
 5de:	fb 81       	ldd	r31, Y+3	; 0x03
 5e0:	80 81       	ld	r24, Z
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	c9 01       	movw	r24, r18
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	82 1b       	sub	r24, r18
 5f6:	93 0b       	sbc	r25, r19
 5f8:	fc 01       	movw	r30, r24
 5fa:	ed 57       	subi	r30, 0x7D	; 125
 5fc:	ff 4f       	sbci	r31, 0xFF	; 255
 5fe:	80 81       	ld	r24, Z
 600:	91 81       	ldd	r25, Z+1	; 0x01
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	79 f5       	brne	.+94     	; 0x664 <RTOS_CreateTask+0xa4>
	{
		SystemsTasks[task->Priority] = *task ;
 606:	ea 81       	ldd	r30, Y+2	; 0x02
 608:	fb 81       	ldd	r31, Y+3	; 0x03
 60a:	80 81       	ld	r24, Z
 60c:	28 2f       	mov	r18, r24
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	c9 01       	movw	r24, r18
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	82 1b       	sub	r24, r18
 620:	93 0b       	sbc	r25, r19
 622:	80 58       	subi	r24, 0x80	; 128
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	2a 81       	ldd	r18, Y+2	; 0x02
 628:	3b 81       	ldd	r19, Y+3	; 0x03
 62a:	9d 83       	std	Y+5, r25	; 0x05
 62c:	8c 83       	std	Y+4, r24	; 0x04
 62e:	3f 83       	std	Y+7, r19	; 0x07
 630:	2e 83       	std	Y+6, r18	; 0x06
 632:	87 e0       	ldi	r24, 0x07	; 7
 634:	88 87       	std	Y+8, r24	; 0x08
 636:	ee 81       	ldd	r30, Y+6	; 0x06
 638:	ff 81       	ldd	r31, Y+7	; 0x07
 63a:	00 80       	ld	r0, Z
 63c:	8e 81       	ldd	r24, Y+6	; 0x06
 63e:	9f 81       	ldd	r25, Y+7	; 0x07
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	9f 83       	std	Y+7, r25	; 0x07
 644:	8e 83       	std	Y+6, r24	; 0x06
 646:	ec 81       	ldd	r30, Y+4	; 0x04
 648:	fd 81       	ldd	r31, Y+5	; 0x05
 64a:	00 82       	st	Z, r0
 64c:	8c 81       	ldd	r24, Y+4	; 0x04
 64e:	9d 81       	ldd	r25, Y+5	; 0x05
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	9d 83       	std	Y+5, r25	; 0x05
 654:	8c 83       	std	Y+4, r24	; 0x04
 656:	98 85       	ldd	r25, Y+8	; 0x08
 658:	91 50       	subi	r25, 0x01	; 1
 65a:	98 87       	std	Y+8, r25	; 0x08
 65c:	e8 85       	ldd	r30, Y+8	; 0x08
 65e:	ee 23       	and	r30, r30
 660:	51 f7       	brne	.-44     	; 0x636 <RTOS_CreateTask+0x76>
 662:	02 c0       	rjmp	.+4      	; 0x668 <RTOS_CreateTask+0xa8>
	}
	else
	{
		errorStates = OCCUPATED ;
 664:	82 e0       	ldi	r24, 0x02	; 2
 666:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorStates ;
 668:	89 81       	ldd	r24, Y+1	; 0x01
}
 66a:	28 96       	adiw	r28, 0x08	; 8
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
 676:	cf 91       	pop	r28
 678:	df 91       	pop	r29
 67a:	08 95       	ret

0000067c <RTOS_SuspendTask>:
uint8_t RTOS_SuspendTask(ST_Task_t * task)
{
 67c:	df 93       	push	r29
 67e:	cf 93       	push	r28
 680:	00 d0       	rcall	.+0      	; 0x682 <RTOS_SuspendTask+0x6>
 682:	0f 92       	push	r0
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	9b 83       	std	Y+3, r25	; 0x03
 68a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t errorStates = RTOS_OK ;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	89 83       	std	Y+1, r24	; 0x01
	if(SuspendedTasks[task->Priority] == 0 )
 690:	ea 81       	ldd	r30, Y+2	; 0x02
 692:	fb 81       	ldd	r31, Y+3	; 0x03
 694:	80 81       	ld	r24, Z
 696:	88 2f       	mov	r24, r24
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	fc 01       	movw	r30, r24
 69c:	eb 56       	subi	r30, 0x6B	; 107
 69e:	ff 4f       	sbci	r31, 0xFF	; 255
 6a0:	80 81       	ld	r24, Z
 6a2:	88 23       	and	r24, r24
 6a4:	59 f4       	brne	.+22     	; 0x6bc <RTOS_SuspendTask+0x40>
	{
		SuspendedTasks[task->Priority] = 1 ;
 6a6:	ea 81       	ldd	r30, Y+2	; 0x02
 6a8:	fb 81       	ldd	r31, Y+3	; 0x03
 6aa:	80 81       	ld	r24, Z
 6ac:	88 2f       	mov	r24, r24
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	fc 01       	movw	r30, r24
 6b2:	eb 56       	subi	r30, 0x6B	; 107
 6b4:	ff 4f       	sbci	r31, 0xFF	; 255
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	80 83       	st	Z, r24
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <RTOS_SuspendTask+0x44>
	}
	else
	{
		errorStates = SUSPENDED_BEFORE ;
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorStates ;
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
}
 6c2:	0f 90       	pop	r0
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	cf 91       	pop	r28
 6ca:	df 91       	pop	r29
 6cc:	08 95       	ret

000006ce <RTOS_ResumeTask>:

uint8_t RTOS_ResumeTask(ST_Task_t *task)
{
 6ce:	df 93       	push	r29
 6d0:	cf 93       	push	r28
 6d2:	00 d0       	rcall	.+0      	; 0x6d4 <RTOS_ResumeTask+0x6>
 6d4:	0f 92       	push	r0
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	9b 83       	std	Y+3, r25	; 0x03
 6dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t errorStates = RTOS_OK ;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	89 83       	std	Y+1, r24	; 0x01
	if(SuspendedTasks[task->Priority] == 1 )
 6e2:	ea 81       	ldd	r30, Y+2	; 0x02
 6e4:	fb 81       	ldd	r31, Y+3	; 0x03
 6e6:	80 81       	ld	r24, Z
 6e8:	88 2f       	mov	r24, r24
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	fc 01       	movw	r30, r24
 6ee:	eb 56       	subi	r30, 0x6B	; 107
 6f0:	ff 4f       	sbci	r31, 0xFF	; 255
 6f2:	80 81       	ld	r24, Z
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	51 f4       	brne	.+20     	; 0x70c <RTOS_ResumeTask+0x3e>
	{
		SuspendedTasks[task->Priority] = 0 ;
 6f8:	ea 81       	ldd	r30, Y+2	; 0x02
 6fa:	fb 81       	ldd	r31, Y+3	; 0x03
 6fc:	80 81       	ld	r24, Z
 6fe:	88 2f       	mov	r24, r24
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	fc 01       	movw	r30, r24
 704:	eb 56       	subi	r30, 0x6B	; 107
 706:	ff 4f       	sbci	r31, 0xFF	; 255
 708:	10 82       	st	Z, r1
 70a:	02 c0       	rjmp	.+4      	; 0x710 <RTOS_ResumeTask+0x42>
	}
	else
	{
		errorStates = RUNNING_BEFORE ;
 70c:	84 e0       	ldi	r24, 0x04	; 4
 70e:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorStates ;
 710:	89 81       	ldd	r24, Y+1	; 0x01
}
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	cf 91       	pop	r28
 71a:	df 91       	pop	r29
 71c:	08 95       	ret

0000071e <RTOS_DeleteTask>:
uint8_t RTOS_DeleteTask(ST_Task_t  *task)
{
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	00 d0       	rcall	.+0      	; 0x724 <RTOS_DeleteTask+0x6>
 724:	0f 92       	push	r0
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
 72a:	9b 83       	std	Y+3, r25	; 0x03
 72c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t errorStates;
	if(SystemsTasks[task->Priority].taskFunction!=NULL)
 72e:	ea 81       	ldd	r30, Y+2	; 0x02
 730:	fb 81       	ldd	r31, Y+3	; 0x03
 732:	80 81       	ld	r24, Z
 734:	28 2f       	mov	r18, r24
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	c9 01       	movw	r24, r18
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	82 1b       	sub	r24, r18
 748:	93 0b       	sbc	r25, r19
 74a:	fc 01       	movw	r30, r24
 74c:	ed 57       	subi	r30, 0x7D	; 125
 74e:	ff 4f       	sbci	r31, 0xFF	; 255
 750:	80 81       	ld	r24, Z
 752:	91 81       	ldd	r25, Z+1	; 0x01
 754:	00 97       	sbiw	r24, 0x00	; 0
 756:	b1 f0       	breq	.+44     	; 0x784 <RTOS_DeleteTask+0x66>
	{
		SystemsTasks[task->Priority].taskFunction=NULL ;
 758:	ea 81       	ldd	r30, Y+2	; 0x02
 75a:	fb 81       	ldd	r31, Y+3	; 0x03
 75c:	80 81       	ld	r24, Z
 75e:	28 2f       	mov	r18, r24
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	c9 01       	movw	r24, r18
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	88 0f       	add	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	82 1b       	sub	r24, r18
 772:	93 0b       	sbc	r25, r19
 774:	fc 01       	movw	r30, r24
 776:	ed 57       	subi	r30, 0x7D	; 125
 778:	ff 4f       	sbci	r31, 0xFF	; 255
 77a:	11 82       	std	Z+1, r1	; 0x01
 77c:	10 82       	st	Z, r1
		errorStates = RTOS_OK ;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	02 c0       	rjmp	.+4      	; 0x788 <RTOS_DeleteTask+0x6a>
	}
	else
	{
		errorStates = EMPTY_BEFORE ;
 784:	85 e0       	ldi	r24, 0x05	; 5
 786:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorStates ;
 788:	89 81       	ldd	r24, Y+1	; 0x01
}
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <Scheduler>:
void Scheduler(void)
{
 796:	df 93       	push	r29
 798:	cf 93       	push	r28
 79a:	00 d0       	rcall	.+0      	; 0x79c <Scheduler+0x6>
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
	uint16_t TaskCounter ;
	for(TaskCounter=0 ; TaskCounter<TASK_NUM;TaskCounter++)
 7a0:	1a 82       	std	Y+2, r1	; 0x02
 7a2:	19 82       	std	Y+1, r1	; 0x01
 7a4:	97 c0       	rjmp	.+302    	; 0x8d4 <__stack+0x75>
	{
		/*check if the task is suspended*/
		if(SuspendedTasks[SystemsTasks[TaskCounter].Priority]!=1)
 7a6:	29 81       	ldd	r18, Y+1	; 0x01
 7a8:	3a 81       	ldd	r19, Y+2	; 0x02
 7aa:	c9 01       	movw	r24, r18
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	82 1b       	sub	r24, r18
 7ba:	93 0b       	sbc	r25, r19
 7bc:	fc 01       	movw	r30, r24
 7be:	e0 58       	subi	r30, 0x80	; 128
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	80 81       	ld	r24, Z
 7c4:	88 2f       	mov	r24, r24
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	fc 01       	movw	r30, r24
 7ca:	eb 56       	subi	r30, 0x6B	; 107
 7cc:	ff 4f       	sbci	r31, 0xFF	; 255
 7ce:	80 81       	ld	r24, Z
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <Scheduler+0x40>
 7d4:	7a c0       	rjmp	.+244    	; 0x8ca <__stack+0x6b>
		{
			/*if it time for the task*/
			if(SystemsTasks[TaskCounter].firstDelay==0)
 7d6:	29 81       	ldd	r18, Y+1	; 0x01
 7d8:	3a 81       	ldd	r19, Y+2	; 0x02
 7da:	c9 01       	movw	r24, r18
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	88 0f       	add	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	82 1b       	sub	r24, r18
 7ea:	93 0b       	sbc	r25, r19
 7ec:	fc 01       	movw	r30, r24
 7ee:	eb 57       	subi	r30, 0x7B	; 123
 7f0:	ff 4f       	sbci	r31, 0xFF	; 255
 7f2:	80 81       	ld	r24, Z
 7f4:	91 81       	ldd	r25, Z+1	; 0x01
 7f6:	00 97       	sbiw	r24, 0x00	; 0
 7f8:	09 f0       	breq	.+2      	; 0x7fc <Scheduler+0x66>
 7fa:	46 c0       	rjmp	.+140    	; 0x888 <__stack+0x29>
			{

				if(SystemsTasks[TaskCounter].taskFunction!=NULL)
 7fc:	29 81       	ldd	r18, Y+1	; 0x01
 7fe:	3a 81       	ldd	r19, Y+2	; 0x02
 800:	c9 01       	movw	r24, r18
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	82 1b       	sub	r24, r18
 810:	93 0b       	sbc	r25, r19
 812:	fc 01       	movw	r30, r24
 814:	ed 57       	subi	r30, 0x7D	; 125
 816:	ff 4f       	sbci	r31, 0xFF	; 255
 818:	80 81       	ld	r24, Z
 81a:	91 81       	ldd	r25, Z+1	; 0x01
 81c:	00 97       	sbiw	r24, 0x00	; 0
 81e:	09 f4       	brne	.+2      	; 0x822 <Scheduler+0x8c>
 820:	54 c0       	rjmp	.+168    	; 0x8ca <__stack+0x6b>
				{
					/*run task*/
					SystemsTasks[TaskCounter].taskFunction() ;
 822:	29 81       	ldd	r18, Y+1	; 0x01
 824:	3a 81       	ldd	r19, Y+2	; 0x02
 826:	c9 01       	movw	r24, r18
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	82 1b       	sub	r24, r18
 836:	93 0b       	sbc	r25, r19
 838:	fc 01       	movw	r30, r24
 83a:	ed 57       	subi	r30, 0x7D	; 125
 83c:	ff 4f       	sbci	r31, 0xFF	; 255
 83e:	01 90       	ld	r0, Z+
 840:	f0 81       	ld	r31, Z
 842:	e0 2d       	mov	r30, r0
 844:	09 95       	icall
					/*set first delay to be equal to task periodicity*/
					SystemsTasks[TaskCounter].firstDelay = SystemsTasks[TaskCounter].Periodicity ;
 846:	49 81       	ldd	r20, Y+1	; 0x01
 848:	5a 81       	ldd	r21, Y+2	; 0x02
 84a:	29 81       	ldd	r18, Y+1	; 0x01
 84c:	3a 81       	ldd	r19, Y+2	; 0x02
 84e:	c9 01       	movw	r24, r18
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	82 1b       	sub	r24, r18
 85e:	93 0b       	sbc	r25, r19
 860:	fc 01       	movw	r30, r24
 862:	ef 57       	subi	r30, 0x7F	; 127
 864:	ff 4f       	sbci	r31, 0xFF	; 255
 866:	20 81       	ld	r18, Z
 868:	31 81       	ldd	r19, Z+1	; 0x01
 86a:	ca 01       	movw	r24, r20
 86c:	88 0f       	add	r24, r24
 86e:	99 1f       	adc	r25, r25
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	84 1b       	sub	r24, r20
 87a:	95 0b       	sbc	r25, r21
 87c:	fc 01       	movw	r30, r24
 87e:	eb 57       	subi	r30, 0x7B	; 123
 880:	ff 4f       	sbci	r31, 0xFF	; 255
 882:	31 83       	std	Z+1, r19	; 0x01
 884:	20 83       	st	Z, r18
 886:	21 c0       	rjmp	.+66     	; 0x8ca <__stack+0x6b>
				}
			}
			else
			{
				/*decrement first delay*/
				SystemsTasks[TaskCounter].firstDelay-- ;
 888:	29 81       	ldd	r18, Y+1	; 0x01
 88a:	3a 81       	ldd	r19, Y+2	; 0x02
 88c:	c9 01       	movw	r24, r18
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	82 1b       	sub	r24, r18
 89c:	93 0b       	sbc	r25, r19
 89e:	fc 01       	movw	r30, r24
 8a0:	eb 57       	subi	r30, 0x7B	; 123
 8a2:	ff 4f       	sbci	r31, 0xFF	; 255
 8a4:	80 81       	ld	r24, Z
 8a6:	91 81       	ldd	r25, Z+1	; 0x01
 8a8:	ac 01       	movw	r20, r24
 8aa:	41 50       	subi	r20, 0x01	; 1
 8ac:	50 40       	sbci	r21, 0x00	; 0
 8ae:	c9 01       	movw	r24, r18
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	82 1b       	sub	r24, r18
 8be:	93 0b       	sbc	r25, r19
 8c0:	fc 01       	movw	r30, r24
 8c2:	eb 57       	subi	r30, 0x7B	; 123
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	51 83       	std	Z+1, r21	; 0x01
 8c8:	40 83       	st	Z, r20
	return errorStates ;
}
void Scheduler(void)
{
	uint16_t TaskCounter ;
	for(TaskCounter=0 ; TaskCounter<TASK_NUM;TaskCounter++)
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	9a 81       	ldd	r25, Y+2	; 0x02
 8ce:	01 96       	adiw	r24, 0x01	; 1
 8d0:	9a 83       	std	Y+2, r25	; 0x02
 8d2:	89 83       	std	Y+1, r24	; 0x01
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	9a 81       	ldd	r25, Y+2	; 0x02
 8d8:	83 30       	cpi	r24, 0x03	; 3
 8da:	91 05       	cpc	r25, r1
 8dc:	08 f4       	brcc	.+2      	; 0x8e0 <__stack+0x81>
 8de:	63 cf       	rjmp	.-314    	; 0x7a6 <Scheduler+0x10>
			/*the task is suspended do nothing*/
		}

	}

}
 8e0:	0f 90       	pop	r0
 8e2:	0f 90       	pop	r0
 8e4:	cf 91       	pop	r28
 8e6:	df 91       	pop	r29
 8e8:	08 95       	ret

000008ea <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"
#include "../LIB/STD_TYPES.h"

inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 8ea:	df 93       	push	r29
 8ec:	cf 93       	push	r28
 8ee:	cd b7       	in	r28, 0x3d	; 61
 8f0:	de b7       	in	r29, 0x3e	; 62
 8f2:	af e5       	ldi	r26, 0x5F	; 95
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	ef e5       	ldi	r30, 0x5F	; 95
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	80 68       	ori	r24, 0x80	; 128
 8fe:	8c 93       	st	X, r24
 900:	cf 91       	pop	r28
 902:	df 91       	pop	r29
 904:	08 95       	ret

00000906 <GIE_Disable>:

 906:	df 93       	push	r29
 908:	cf 93       	push	r28
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	af e5       	ldi	r26, 0x5F	; 95
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	ef e5       	ldi	r30, 0x5F	; 95
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	8f 77       	andi	r24, 0x7F	; 127
 91a:	8c 93       	st	X, r24
 91c:	cf 91       	pop	r28
 91e:	df 91       	pop	r29
 920:	08 95       	ret

00000922 <DIO_setPinDirection>:
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
}

void DIO_setPinDirection(EN_PinNumber_t pinNum,EN_Directions_t pinDirection) 
{
 922:	df 93       	push	r29
 924:	cf 93       	push	r28
 926:	cd b7       	in	r28, 0x3d	; 61
 928:	de b7       	in	r29, 0x3e	; 62
 92a:	2a 97       	sbiw	r28, 0x0a	; 10
 92c:	0f b6       	in	r0, 0x3f	; 63
 92e:	f8 94       	cli
 930:	de bf       	out	0x3e, r29	; 62
 932:	0f be       	out	0x3f, r0	; 63
 934:	cd bf       	out	0x3d, r28	; 61
 936:	8f 83       	std	Y+7, r24	; 0x07
 938:	68 87       	std	Y+8, r22	; 0x08
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
 93a:	8f 81       	ldd	r24, Y+7	; 0x07
 93c:	0e 94 34 05 	call	0xa68	; 0xa68 <getPinNumber>
 940:	8e 83       	std	Y+6, r24	; 0x06
 942:	8f 81       	ldd	r24, Y+7	; 0x07
 944:	0e 94 69 05 	call	0xad2	; 0xad2 <getPortNumber>
 948:	8d 83       	std	Y+5, r24	; 0x05
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
 94a:	8d 81       	ldd	r24, Y+5	; 0x05
 94c:	28 2f       	mov	r18, r24
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	c9 01       	movw	r24, r18
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	82 0f       	add	r24, r18
 958:	93 1f       	adc	r25, r19
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	fc 01       	movw	r30, r24
 962:	e0 5a       	subi	r30, 0xA0	; 160
 964:	ff 4f       	sbci	r31, 0xFF	; 255
 966:	80 81       	ld	r24, Z
 968:	91 81       	ldd	r25, Z+1	; 0x01
 96a:	9c 83       	std	Y+4, r25	; 0x04
 96c:	8b 83       	std	Y+3, r24	; 0x03
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 96e:	8d 81       	ldd	r24, Y+5	; 0x05
 970:	28 2f       	mov	r18, r24
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	c9 01       	movw	r24, r18
 976:	88 0f       	add	r24, r24
 978:	99 1f       	adc	r25, r25
 97a:	82 0f       	add	r24, r18
 97c:	93 1f       	adc	r25, r19
 97e:	88 0f       	add	r24, r24
 980:	99 1f       	adc	r25, r25
 982:	fc 01       	movw	r30, r24
 984:	e0 5a       	subi	r30, 0xA0	; 160
 986:	ff 4f       	sbci	r31, 0xFF	; 255
 988:	80 81       	ld	r24, Z
 98a:	91 81       	ldd	r25, Z+1	; 0x01
 98c:	9a 83       	std	Y+2, r25	; 0x02
 98e:	89 83       	std	Y+1, r24	; 0x01
    switch (pinDirection)
 990:	88 85       	ldd	r24, Y+8	; 0x08
 992:	28 2f       	mov	r18, r24
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	3a 87       	std	Y+10, r19	; 0x0a
 998:	29 87       	std	Y+9, r18	; 0x09
 99a:	89 85       	ldd	r24, Y+9	; 0x09
 99c:	9a 85       	ldd	r25, Y+10	; 0x0a
 99e:	81 30       	cpi	r24, 0x01	; 1
 9a0:	91 05       	cpc	r25, r1
 9a2:	f9 f0       	breq	.+62     	; 0x9e2 <DIO_setPinDirection+0xc0>
 9a4:	29 85       	ldd	r18, Y+9	; 0x09
 9a6:	3a 85       	ldd	r19, Y+10	; 0x0a
 9a8:	22 30       	cpi	r18, 0x02	; 2
 9aa:	31 05       	cpc	r19, r1
 9ac:	71 f1       	breq	.+92     	; 0xa0a <DIO_setPinDirection+0xe8>
 9ae:	89 85       	ldd	r24, Y+9	; 0x09
 9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 9b2:	00 97       	sbiw	r24, 0x00	; 0
 9b4:	09 f0       	breq	.+2      	; 0x9b8 <DIO_setPinDirection+0x96>
 9b6:	4f c0       	rjmp	.+158    	; 0xa56 <DIO_setPinDirection+0x134>
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 9b8:	eb 81       	ldd	r30, Y+3	; 0x03
 9ba:	fc 81       	ldd	r31, Y+4	; 0x04
 9bc:	80 81       	ld	r24, Z
 9be:	48 2f       	mov	r20, r24
 9c0:	8e 81       	ldd	r24, Y+6	; 0x06
 9c2:	28 2f       	mov	r18, r24
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	02 2e       	mov	r0, r18
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_setPinDirection+0xb0>
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	0a 94       	dec	r0
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_setPinDirection+0xac>
 9d6:	80 95       	com	r24
 9d8:	84 23       	and	r24, r20
 9da:	eb 81       	ldd	r30, Y+3	; 0x03
 9dc:	fc 81       	ldd	r31, Y+4	; 0x04
 9de:	80 83       	st	Z, r24
 9e0:	3a c0       	rjmp	.+116    	; 0xa56 <DIO_setPinDirection+0x134>
        break;
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 9e2:	eb 81       	ldd	r30, Y+3	; 0x03
 9e4:	fc 81       	ldd	r31, Y+4	; 0x04
 9e6:	80 81       	ld	r24, Z
 9e8:	48 2f       	mov	r20, r24
 9ea:	8e 81       	ldd	r24, Y+6	; 0x06
 9ec:	28 2f       	mov	r18, r24
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	02 2e       	mov	r0, r18
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_setPinDirection+0xda>
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	0a 94       	dec	r0
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_setPinDirection+0xd6>
 a00:	84 2b       	or	r24, r20
 a02:	eb 81       	ldd	r30, Y+3	; 0x03
 a04:	fc 81       	ldd	r31, Y+4	; 0x04
 a06:	80 83       	st	Z, r24
 a08:	26 c0       	rjmp	.+76     	; 0xa56 <DIO_setPinDirection+0x134>
        break;
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 a0a:	e9 81       	ldd	r30, Y+1	; 0x01
 a0c:	fa 81       	ldd	r31, Y+2	; 0x02
 a0e:	80 81       	ld	r24, Z
 a10:	48 2f       	mov	r20, r24
 a12:	8e 81       	ldd	r24, Y+6	; 0x06
 a14:	28 2f       	mov	r18, r24
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	81 e0       	ldi	r24, 0x01	; 1
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <DIO_setPinDirection+0x100>
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	2a 95       	dec	r18
 a24:	e2 f7       	brpl	.-8      	; 0xa1e <DIO_setPinDirection+0xfc>
 a26:	84 2b       	or	r24, r20
 a28:	e9 81       	ldd	r30, Y+1	; 0x01
 a2a:	fa 81       	ldd	r31, Y+2	; 0x02
 a2c:	80 83       	st	Z, r24
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 a2e:	eb 81       	ldd	r30, Y+3	; 0x03
 a30:	fc 81       	ldd	r31, Y+4	; 0x04
 a32:	80 81       	ld	r24, Z
 a34:	48 2f       	mov	r20, r24
 a36:	8e 81       	ldd	r24, Y+6	; 0x06
 a38:	28 2f       	mov	r18, r24
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	02 2e       	mov	r0, r18
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_setPinDirection+0x126>
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	0a 94       	dec	r0
 a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_setPinDirection+0x122>
 a4c:	80 95       	com	r24
 a4e:	84 23       	and	r24, r20
 a50:	eb 81       	ldd	r30, Y+3	; 0x03
 a52:	fc 81       	ldd	r31, Y+4	; 0x04
 a54:	80 83       	st	Z, r24
    default:
        /* do nothing */
        break;
    }

}
 a56:	2a 96       	adiw	r28, 0x0a	; 10
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	f8 94       	cli
 a5c:	de bf       	out	0x3e, r29	; 62
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	cd bf       	out	0x3d, r28	; 61
 a62:	cf 91       	pop	r28
 a64:	df 91       	pop	r29
 a66:	08 95       	ret

00000a68 <getPinNumber>:
 * 
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	00 d0       	rcall	.+0      	; 0xa6e <getPinNumber+0x6>
 a6e:	cd b7       	in	r28, 0x3d	; 61
 a70:	de b7       	in	r29, 0x3e	; 62
 a72:	89 83       	std	Y+1, r24	; 0x01
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 a74:	89 81       	ldd	r24, Y+1	; 0x01
 a76:	88 30       	cpi	r24, 0x08	; 8
 a78:	18 f4       	brcc	.+6      	; 0xa80 <getPinNumber+0x18>
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	8a 83       	std	Y+2, r24	; 0x02
 a7e:	23 c0       	rjmp	.+70     	; 0xac6 <getPinNumber+0x5e>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 a80:	89 81       	ldd	r24, Y+1	; 0x01
 a82:	88 30       	cpi	r24, 0x08	; 8
 a84:	40 f0       	brcs	.+16     	; 0xa96 <getPinNumber+0x2e>
 a86:	89 81       	ldd	r24, Y+1	; 0x01
 a88:	80 31       	cpi	r24, 0x10	; 16
 a8a:	28 f4       	brcc	.+10     	; 0xa96 <getPinNumber+0x2e>
 a8c:	89 81       	ldd	r24, Y+1	; 0x01
 a8e:	98 2f       	mov	r25, r24
 a90:	98 50       	subi	r25, 0x08	; 8
 a92:	9a 83       	std	Y+2, r25	; 0x02
 a94:	18 c0       	rjmp	.+48     	; 0xac6 <getPinNumber+0x5e>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	80 31       	cpi	r24, 0x10	; 16
 a9a:	40 f0       	brcs	.+16     	; 0xaac <getPinNumber+0x44>
 a9c:	89 81       	ldd	r24, Y+1	; 0x01
 a9e:	88 31       	cpi	r24, 0x18	; 24
 aa0:	28 f4       	brcc	.+10     	; 0xaac <getPinNumber+0x44>
 aa2:	89 81       	ldd	r24, Y+1	; 0x01
 aa4:	98 2f       	mov	r25, r24
 aa6:	90 51       	subi	r25, 0x10	; 16
 aa8:	9a 83       	std	Y+2, r25	; 0x02
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <getPinNumber+0x5e>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 aac:	89 81       	ldd	r24, Y+1	; 0x01
 aae:	88 31       	cpi	r24, 0x18	; 24
 ab0:	40 f0       	brcs	.+16     	; 0xac2 <getPinNumber+0x5a>
 ab2:	89 81       	ldd	r24, Y+1	; 0x01
 ab4:	80 32       	cpi	r24, 0x20	; 32
 ab6:	28 f4       	brcc	.+10     	; 0xac2 <getPinNumber+0x5a>
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	98 2f       	mov	r25, r24
 abc:	98 51       	subi	r25, 0x18	; 24
 abe:	9a 83       	std	Y+2, r25	; 0x02
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <getPinNumber+0x5e>
	return NC ; 
 ac2:	8f ef       	ldi	r24, 0xFF	; 255
 ac4:	8a 83       	std	Y+2, r24	; 0x02
 ac6:	8a 81       	ldd	r24, Y+2	; 0x02
}
 ac8:	0f 90       	pop	r0
 aca:	0f 90       	pop	r0
 acc:	cf 91       	pop	r28
 ace:	df 91       	pop	r29
 ad0:	08 95       	ret

00000ad2 <getPortNumber>:
 * 
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
 ad2:	df 93       	push	r29
 ad4:	cf 93       	push	r28
 ad6:	00 d0       	rcall	.+0      	; 0xad8 <getPortNumber+0x6>
 ad8:	cd b7       	in	r28, 0x3d	; 61
 ada:	de b7       	in	r29, 0x3e	; 62
 adc:	89 83       	std	Y+1, r24	; 0x01
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 ade:	89 81       	ldd	r24, Y+1	; 0x01
 ae0:	88 30       	cpi	r24, 0x08	; 8
 ae2:	10 f4       	brcc	.+4      	; 0xae8 <getPortNumber+0x16>
 ae4:	1a 82       	std	Y+2, r1	; 0x02
 ae6:	1d c0       	rjmp	.+58     	; 0xb22 <getPortNumber+0x50>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 ae8:	89 81       	ldd	r24, Y+1	; 0x01
 aea:	88 30       	cpi	r24, 0x08	; 8
 aec:	30 f0       	brcs	.+12     	; 0xafa <getPortNumber+0x28>
 aee:	89 81       	ldd	r24, Y+1	; 0x01
 af0:	80 31       	cpi	r24, 0x10	; 16
 af2:	18 f4       	brcc	.+6      	; 0xafa <getPortNumber+0x28>
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	8a 83       	std	Y+2, r24	; 0x02
 af8:	14 c0       	rjmp	.+40     	; 0xb22 <getPortNumber+0x50>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 afa:	89 81       	ldd	r24, Y+1	; 0x01
 afc:	80 31       	cpi	r24, 0x10	; 16
 afe:	30 f0       	brcs	.+12     	; 0xb0c <getPortNumber+0x3a>
 b00:	89 81       	ldd	r24, Y+1	; 0x01
 b02:	88 31       	cpi	r24, 0x18	; 24
 b04:	18 f4       	brcc	.+6      	; 0xb0c <getPortNumber+0x3a>
 b06:	82 e0       	ldi	r24, 0x02	; 2
 b08:	8a 83       	std	Y+2, r24	; 0x02
 b0a:	0b c0       	rjmp	.+22     	; 0xb22 <getPortNumber+0x50>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 b0c:	89 81       	ldd	r24, Y+1	; 0x01
 b0e:	88 31       	cpi	r24, 0x18	; 24
 b10:	30 f0       	brcs	.+12     	; 0xb1e <getPortNumber+0x4c>
 b12:	89 81       	ldd	r24, Y+1	; 0x01
 b14:	80 32       	cpi	r24, 0x20	; 32
 b16:	18 f4       	brcc	.+6      	; 0xb1e <getPortNumber+0x4c>
 b18:	83 e0       	ldi	r24, 0x03	; 3
 b1a:	8a 83       	std	Y+2, r24	; 0x02
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <getPortNumber+0x50>
	return NC ;
 b1e:	8f ef       	ldi	r24, 0xFF	; 255
 b20:	8a 83       	std	Y+2, r24	; 0x02
 b22:	8a 81       	ldd	r24, Y+2	; 0x02
}
 b24:	0f 90       	pop	r0
 b26:	0f 90       	pop	r0
 b28:	cf 91       	pop	r28
 b2a:	df 91       	pop	r29
 b2c:	08 95       	ret

00000b2e <DIO_setPinValue>:
    }

}

void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
 b2e:	df 93       	push	r29
 b30:	cf 93       	push	r28
 b32:	cd b7       	in	r28, 0x3d	; 61
 b34:	de b7       	in	r29, 0x3e	; 62
 b36:	28 97       	sbiw	r28, 0x08	; 8
 b38:	0f b6       	in	r0, 0x3f	; 63
 b3a:	f8 94       	cli
 b3c:	de bf       	out	0x3e, r29	; 62
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	cd bf       	out	0x3d, r28	; 61
 b42:	8d 83       	std	Y+5, r24	; 0x05
 b44:	6e 83       	std	Y+6, r22	; 0x06
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
 b46:	8d 81       	ldd	r24, Y+5	; 0x05
 b48:	0e 94 34 05 	call	0xa68	; 0xa68 <getPinNumber>
 b4c:	8c 83       	std	Y+4, r24	; 0x04
 b4e:	8d 81       	ldd	r24, Y+5	; 0x05
 b50:	0e 94 69 05 	call	0xad2	; 0xad2 <getPortNumber>
 b54:	8b 83       	std	Y+3, r24	; 0x03
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 b56:	8b 81       	ldd	r24, Y+3	; 0x03
 b58:	28 2f       	mov	r18, r24
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	c9 01       	movw	r24, r18
 b5e:	88 0f       	add	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	82 0f       	add	r24, r18
 b64:	93 1f       	adc	r25, r19
 b66:	88 0f       	add	r24, r24
 b68:	99 1f       	adc	r25, r25
 b6a:	fc 01       	movw	r30, r24
 b6c:	e0 5a       	subi	r30, 0xA0	; 160
 b6e:	ff 4f       	sbci	r31, 0xFF	; 255
 b70:	80 81       	ld	r24, Z
 b72:	91 81       	ldd	r25, Z+1	; 0x01
 b74:	9a 83       	std	Y+2, r25	; 0x02
 b76:	89 83       	std	Y+1, r24	; 0x01
    switch (value)
 b78:	8e 81       	ldd	r24, Y+6	; 0x06
 b7a:	28 2f       	mov	r18, r24
 b7c:	30 e0       	ldi	r19, 0x00	; 0
 b7e:	38 87       	std	Y+8, r19	; 0x08
 b80:	2f 83       	std	Y+7, r18	; 0x07
 b82:	8f 81       	ldd	r24, Y+7	; 0x07
 b84:	98 85       	ldd	r25, Y+8	; 0x08
 b86:	81 30       	cpi	r24, 0x01	; 1
 b88:	91 05       	cpc	r25, r1
 b8a:	f1 f0       	breq	.+60     	; 0xbc8 <DIO_setPinValue+0x9a>
 b8c:	2f 81       	ldd	r18, Y+7	; 0x07
 b8e:	38 85       	ldd	r19, Y+8	; 0x08
 b90:	22 30       	cpi	r18, 0x02	; 2
 b92:	31 05       	cpc	r19, r1
 b94:	69 f1       	breq	.+90     	; 0xbf0 <DIO_setPinValue+0xc2>
 b96:	8f 81       	ldd	r24, Y+7	; 0x07
 b98:	98 85       	ldd	r25, Y+8	; 0x08
 b9a:	00 97       	sbiw	r24, 0x00	; 0
 b9c:	e1 f5       	brne	.+120    	; 0xc16 <DIO_setPinValue+0xe8>
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 b9e:	e9 81       	ldd	r30, Y+1	; 0x01
 ba0:	fa 81       	ldd	r31, Y+2	; 0x02
 ba2:	80 81       	ld	r24, Z
 ba4:	48 2f       	mov	r20, r24
 ba6:	8c 81       	ldd	r24, Y+4	; 0x04
 ba8:	28 2f       	mov	r18, r24
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	02 2e       	mov	r0, r18
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <DIO_setPinValue+0x8a>
 bb4:	88 0f       	add	r24, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	0a 94       	dec	r0
 bba:	e2 f7       	brpl	.-8      	; 0xbb4 <DIO_setPinValue+0x86>
 bbc:	80 95       	com	r24
 bbe:	84 23       	and	r24, r20
 bc0:	e9 81       	ldd	r30, Y+1	; 0x01
 bc2:	fa 81       	ldd	r31, Y+2	; 0x02
 bc4:	80 83       	st	Z, r24
 bc6:	27 c0       	rjmp	.+78     	; 0xc16 <DIO_setPinValue+0xe8>
        break;    
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 bc8:	e9 81       	ldd	r30, Y+1	; 0x01
 bca:	fa 81       	ldd	r31, Y+2	; 0x02
 bcc:	80 81       	ld	r24, Z
 bce:	48 2f       	mov	r20, r24
 bd0:	8c 81       	ldd	r24, Y+4	; 0x04
 bd2:	28 2f       	mov	r18, r24
 bd4:	30 e0       	ldi	r19, 0x00	; 0
 bd6:	81 e0       	ldi	r24, 0x01	; 1
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	02 2e       	mov	r0, r18
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_setPinValue+0xb4>
 bde:	88 0f       	add	r24, r24
 be0:	99 1f       	adc	r25, r25
 be2:	0a 94       	dec	r0
 be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_setPinValue+0xb0>
 be6:	84 2b       	or	r24, r20
 be8:	e9 81       	ldd	r30, Y+1	; 0x01
 bea:	fa 81       	ldd	r31, Y+2	; 0x02
 bec:	80 83       	st	Z, r24
 bee:	13 c0       	rjmp	.+38     	; 0xc16 <DIO_setPinValue+0xe8>
        break;
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 bf0:	e9 81       	ldd	r30, Y+1	; 0x01
 bf2:	fa 81       	ldd	r31, Y+2	; 0x02
 bf4:	80 81       	ld	r24, Z
 bf6:	48 2f       	mov	r20, r24
 bf8:	8c 81       	ldd	r24, Y+4	; 0x04
 bfa:	28 2f       	mov	r18, r24
 bfc:	30 e0       	ldi	r19, 0x00	; 0
 bfe:	81 e0       	ldi	r24, 0x01	; 1
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	02 2e       	mov	r0, r18
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <DIO_setPinValue+0xdc>
 c06:	88 0f       	add	r24, r24
 c08:	99 1f       	adc	r25, r25
 c0a:	0a 94       	dec	r0
 c0c:	e2 f7       	brpl	.-8      	; 0xc06 <DIO_setPinValue+0xd8>
 c0e:	84 27       	eor	r24, r20
 c10:	e9 81       	ldd	r30, Y+1	; 0x01
 c12:	fa 81       	ldd	r31, Y+2	; 0x02
 c14:	80 83       	st	Z, r24
    
    default:
        /*do nothing*/
        break;
    }
}
 c16:	28 96       	adiw	r28, 0x08	; 8
 c18:	0f b6       	in	r0, 0x3f	; 63
 c1a:	f8 94       	cli
 c1c:	de bf       	out	0x3e, r29	; 62
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	cd bf       	out	0x3d, r28	; 61
 c22:	cf 91       	pop	r28
 c24:	df 91       	pop	r29
 c26:	08 95       	ret

00000c28 <DIO_getPinValue>:

uint8_t DIO_getPinValue(EN_PinNumber_t pinNum) 
{
 c28:	df 93       	push	r29
 c2a:	cf 93       	push	r28
 c2c:	00 d0       	rcall	.+0      	; 0xc2e <DIO_getPinValue+0x6>
 c2e:	00 d0       	rcall	.+0      	; 0xc30 <DIO_getPinValue+0x8>
 c30:	0f 92       	push	r0
 c32:	cd b7       	in	r28, 0x3d	; 61
 c34:	de b7       	in	r29, 0x3e	; 62
 c36:	8d 83       	std	Y+5, r24	; 0x05
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
 c38:	8d 81       	ldd	r24, Y+5	; 0x05
 c3a:	0e 94 34 05 	call	0xa68	; 0xa68 <getPinNumber>
 c3e:	8c 83       	std	Y+4, r24	; 0x04
 c40:	8d 81       	ldd	r24, Y+5	; 0x05
 c42:	0e 94 69 05 	call	0xad2	; 0xad2 <getPortNumber>
 c46:	8b 83       	std	Y+3, r24	; 0x03
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
 c48:	8b 81       	ldd	r24, Y+3	; 0x03
 c4a:	28 2f       	mov	r18, r24
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	c9 01       	movw	r24, r18
 c50:	88 0f       	add	r24, r24
 c52:	99 1f       	adc	r25, r25
 c54:	82 0f       	add	r24, r18
 c56:	93 1f       	adc	r25, r19
 c58:	88 0f       	add	r24, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	fc 01       	movw	r30, r24
 c5e:	ec 59       	subi	r30, 0x9C	; 156
 c60:	ff 4f       	sbci	r31, 0xFF	; 255
 c62:	80 81       	ld	r24, Z
 c64:	91 81       	ldd	r25, Z+1	; 0x01
 c66:	9a 83       	std	Y+2, r25	; 0x02
 c68:	89 83       	std	Y+1, r24	; 0x01
   /* return pin value */
    return getBit((*PINX) ,pin);
 c6a:	e9 81       	ldd	r30, Y+1	; 0x01
 c6c:	fa 81       	ldd	r31, Y+2	; 0x02
 c6e:	80 81       	ld	r24, Z
 c70:	28 2f       	mov	r18, r24
 c72:	30 e0       	ldi	r19, 0x00	; 0
 c74:	8c 81       	ldd	r24, Y+4	; 0x04
 c76:	88 2f       	mov	r24, r24
 c78:	90 e0       	ldi	r25, 0x00	; 0
 c7a:	a9 01       	movw	r20, r18
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_getPinValue+0x5a>
 c7e:	55 95       	asr	r21
 c80:	47 95       	ror	r20
 c82:	8a 95       	dec	r24
 c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_getPinValue+0x56>
 c86:	ca 01       	movw	r24, r20
 c88:	81 70       	andi	r24, 0x01	; 1
}
 c8a:	0f 90       	pop	r0
 c8c:	0f 90       	pop	r0
 c8e:	0f 90       	pop	r0
 c90:	0f 90       	pop	r0
 c92:	0f 90       	pop	r0
 c94:	cf 91       	pop	r28
 c96:	df 91       	pop	r29
 c98:	08 95       	ret

00000c9a <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
 c9a:	df 93       	push	r29
 c9c:	cf 93       	push	r28
 c9e:	cd b7       	in	r28, 0x3d	; 61
 ca0:	de b7       	in	r29, 0x3e	; 62
 ca2:	28 97       	sbiw	r28, 0x08	; 8
 ca4:	0f b6       	in	r0, 0x3f	; 63
 ca6:	f8 94       	cli
 ca8:	de bf       	out	0x3e, r29	; 62
 caa:	0f be       	out	0x3f, r0	; 63
 cac:	cd bf       	out	0x3d, r28	; 61
 cae:	8d 83       	std	Y+5, r24	; 0x05
 cb0:	6e 83       	std	Y+6, r22	; 0x06
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 cb2:	8d 81       	ldd	r24, Y+5	; 0x05
 cb4:	28 2f       	mov	r18, r24
 cb6:	30 e0       	ldi	r19, 0x00	; 0
 cb8:	c9 01       	movw	r24, r18
 cba:	88 0f       	add	r24, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	82 0f       	add	r24, r18
 cc0:	93 1f       	adc	r25, r19
 cc2:	01 96       	adiw	r24, 0x01	; 1
 cc4:	88 0f       	add	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	fc 01       	movw	r30, r24
 cca:	e0 5a       	subi	r30, 0xA0	; 160
 ccc:	ff 4f       	sbci	r31, 0xFF	; 255
 cce:	80 81       	ld	r24, Z
 cd0:	91 81       	ldd	r25, Z+1	; 0x01
 cd2:	9c 83       	std	Y+4, r25	; 0x04
 cd4:	8b 83       	std	Y+3, r24	; 0x03
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 cd6:	8d 81       	ldd	r24, Y+5	; 0x05
 cd8:	28 2f       	mov	r18, r24
 cda:	30 e0       	ldi	r19, 0x00	; 0
 cdc:	c9 01       	movw	r24, r18
 cde:	88 0f       	add	r24, r24
 ce0:	99 1f       	adc	r25, r25
 ce2:	82 0f       	add	r24, r18
 ce4:	93 1f       	adc	r25, r19
 ce6:	88 0f       	add	r24, r24
 ce8:	99 1f       	adc	r25, r25
 cea:	fc 01       	movw	r30, r24
 cec:	e0 5a       	subi	r30, 0xA0	; 160
 cee:	ff 4f       	sbci	r31, 0xFF	; 255
 cf0:	80 81       	ld	r24, Z
 cf2:	91 81       	ldd	r25, Z+1	; 0x01
 cf4:	9a 83       	std	Y+2, r25	; 0x02
 cf6:	89 83       	std	Y+1, r24	; 0x01
	
    switch (pinDirection)
 cf8:	8e 81       	ldd	r24, Y+6	; 0x06
 cfa:	28 2f       	mov	r18, r24
 cfc:	30 e0       	ldi	r19, 0x00	; 0
 cfe:	38 87       	std	Y+8, r19	; 0x08
 d00:	2f 83       	std	Y+7, r18	; 0x07
 d02:	8f 81       	ldd	r24, Y+7	; 0x07
 d04:	98 85       	ldd	r25, Y+8	; 0x08
 d06:	81 30       	cpi	r24, 0x01	; 1
 d08:	91 05       	cpc	r25, r1
 d0a:	69 f0       	breq	.+26     	; 0xd26 <DIO_setPortDirection+0x8c>
 d0c:	2f 81       	ldd	r18, Y+7	; 0x07
 d0e:	38 85       	ldd	r19, Y+8	; 0x08
 d10:	22 30       	cpi	r18, 0x02	; 2
 d12:	31 05       	cpc	r19, r1
 d14:	69 f0       	breq	.+26     	; 0xd30 <DIO_setPortDirection+0x96>
 d16:	8f 81       	ldd	r24, Y+7	; 0x07
 d18:	98 85       	ldd	r25, Y+8	; 0x08
 d1a:	00 97       	sbiw	r24, 0x00	; 0
 d1c:	81 f4       	brne	.+32     	; 0xd3e <DIO_setPortDirection+0xa4>
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 d1e:	eb 81       	ldd	r30, Y+3	; 0x03
 d20:	fc 81       	ldd	r31, Y+4	; 0x04
 d22:	10 82       	st	Z, r1
 d24:	0c c0       	rjmp	.+24     	; 0xd3e <DIO_setPortDirection+0xa4>
        break;
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 d26:	eb 81       	ldd	r30, Y+3	; 0x03
 d28:	fc 81       	ldd	r31, Y+4	; 0x04
 d2a:	8f ef       	ldi	r24, 0xFF	; 255
 d2c:	80 83       	st	Z, r24
 d2e:	07 c0       	rjmp	.+14     	; 0xd3e <DIO_setPortDirection+0xa4>
        break;
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 d30:	e9 81       	ldd	r30, Y+1	; 0x01
 d32:	fa 81       	ldd	r31, Y+2	; 0x02
 d34:	8f ef       	ldi	r24, 0xFF	; 255
 d36:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 d38:	eb 81       	ldd	r30, Y+3	; 0x03
 d3a:	fc 81       	ldd	r31, Y+4	; 0x04
 d3c:	10 82       	st	Z, r1
        break;
    default:
        /* do nothing */
        break;
    }
}
 d3e:	28 96       	adiw	r28, 0x08	; 8
 d40:	0f b6       	in	r0, 0x3f	; 63
 d42:	f8 94       	cli
 d44:	de bf       	out	0x3e, r29	; 62
 d46:	0f be       	out	0x3f, r0	; 63
 d48:	cd bf       	out	0x3d, r28	; 61
 d4a:	cf 91       	pop	r28
 d4c:	df 91       	pop	r29
 d4e:	08 95       	ret

00000d50 <DIO_setPortValue>:

void DIO_setPortValue(EN_PortNumber_t portNum,uint8_t value) 
{
 d50:	df 93       	push	r29
 d52:	cf 93       	push	r28
 d54:	00 d0       	rcall	.+0      	; 0xd56 <DIO_setPortValue+0x6>
 d56:	00 d0       	rcall	.+0      	; 0xd58 <DIO_setPortValue+0x8>
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62
 d5c:	8b 83       	std	Y+3, r24	; 0x03
 d5e:	6c 83       	std	Y+4, r22	; 0x04
	/* select PORTX Register */
    volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 d60:	8b 81       	ldd	r24, Y+3	; 0x03
 d62:	28 2f       	mov	r18, r24
 d64:	30 e0       	ldi	r19, 0x00	; 0
 d66:	c9 01       	movw	r24, r18
 d68:	88 0f       	add	r24, r24
 d6a:	99 1f       	adc	r25, r25
 d6c:	82 0f       	add	r24, r18
 d6e:	93 1f       	adc	r25, r19
 d70:	88 0f       	add	r24, r24
 d72:	99 1f       	adc	r25, r25
 d74:	fc 01       	movw	r30, r24
 d76:	e0 5a       	subi	r30, 0xA0	; 160
 d78:	ff 4f       	sbci	r31, 0xFF	; 255
 d7a:	80 81       	ld	r24, Z
 d7c:	91 81       	ldd	r25, Z+1	; 0x01
 d7e:	9a 83       	std	Y+2, r25	; 0x02
 d80:	89 83       	std	Y+1, r24	; 0x01
	/* set the port value */	
    *PORTX = value ;
 d82:	e9 81       	ldd	r30, Y+1	; 0x01
 d84:	fa 81       	ldd	r31, Y+2	; 0x02
 d86:	8c 81       	ldd	r24, Y+4	; 0x04
 d88:	80 83       	st	Z, r24
}
 d8a:	0f 90       	pop	r0
 d8c:	0f 90       	pop	r0
 d8e:	0f 90       	pop	r0
 d90:	0f 90       	pop	r0
 d92:	cf 91       	pop	r28
 d94:	df 91       	pop	r29
 d96:	08 95       	ret

00000d98 <main>:
void task1(void) ;
void task2(void) ;
void task3(void) ;

int main(void)
{
 d98:	df 93       	push	r29
 d9a:	cf 93       	push	r28
 d9c:	cd b7       	in	r28, 0x3d	; 61
 d9e:	de b7       	in	r29, 0x3e	; 62
 da0:	65 97       	sbiw	r28, 0x15	; 21
 da2:	0f b6       	in	r0, 0x3f	; 63
 da4:	f8 94       	cli
 da6:	de bf       	out	0x3e, r29	; 62
 da8:	0f be       	out	0x3f, r0	; 63
 daa:	cd bf       	out	0x3d, r28	; 61
	DIO_setPortDirection(PORTA,OUTPUT) ;
 dac:	80 e0       	ldi	r24, 0x00	; 0
 dae:	61 e0       	ldi	r22, 0x01	; 1
 db0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <DIO_setPortDirection>
	ST_Task_t led1_task  = {0, 1000, &task1}  ;
 db4:	87 e0       	ldi	r24, 0x07	; 7
 db6:	fe 01       	movw	r30, r28
 db8:	31 96       	adiw	r30, 0x01	; 1
 dba:	df 01       	movw	r26, r30
 dbc:	98 2f       	mov	r25, r24
 dbe:	1d 92       	st	X+, r1
 dc0:	9a 95       	dec	r25
 dc2:	e9 f7       	brne	.-6      	; 0xdbe <main+0x26>
 dc4:	88 ee       	ldi	r24, 0xE8	; 232
 dc6:	93 e0       	ldi	r25, 0x03	; 3
 dc8:	9b 83       	std	Y+3, r25	; 0x03
 dca:	8a 83       	std	Y+2, r24	; 0x02
 dcc:	8d e1       	ldi	r24, 0x1D	; 29
 dce:	97 e0       	ldi	r25, 0x07	; 7
 dd0:	9d 83       	std	Y+5, r25	; 0x05
 dd2:	8c 83       	std	Y+4, r24	; 0x04
	ST_Task_t led2_task  = {1, 2000, &task2}  ;
 dd4:	87 e0       	ldi	r24, 0x07	; 7
 dd6:	fe 01       	movw	r30, r28
 dd8:	38 96       	adiw	r30, 0x08	; 8
 dda:	df 01       	movw	r26, r30
 ddc:	98 2f       	mov	r25, r24
 dde:	1d 92       	st	X+, r1
 de0:	9a 95       	dec	r25
 de2:	e9 f7       	brne	.-6      	; 0xdde <main+0x46>
 de4:	81 e0       	ldi	r24, 0x01	; 1
 de6:	88 87       	std	Y+8, r24	; 0x08
 de8:	80 ed       	ldi	r24, 0xD0	; 208
 dea:	97 e0       	ldi	r25, 0x07	; 7
 dec:	9a 87       	std	Y+10, r25	; 0x0a
 dee:	89 87       	std	Y+9, r24	; 0x09
 df0:	88 e2       	ldi	r24, 0x28	; 40
 df2:	97 e0       	ldi	r25, 0x07	; 7
 df4:	9c 87       	std	Y+12, r25	; 0x0c
 df6:	8b 87       	std	Y+11, r24	; 0x0b
	ST_Task_t led3_task  = {2, 3000, &task3}  ;
 df8:	87 e0       	ldi	r24, 0x07	; 7
 dfa:	fe 01       	movw	r30, r28
 dfc:	3f 96       	adiw	r30, 0x0f	; 15
 dfe:	df 01       	movw	r26, r30
 e00:	98 2f       	mov	r25, r24
 e02:	1d 92       	st	X+, r1
 e04:	9a 95       	dec	r25
 e06:	e9 f7       	brne	.-6      	; 0xe02 <main+0x6a>
 e08:	82 e0       	ldi	r24, 0x02	; 2
 e0a:	8f 87       	std	Y+15, r24	; 0x0f
 e0c:	88 eb       	ldi	r24, 0xB8	; 184
 e0e:	9b e0       	ldi	r25, 0x0B	; 11
 e10:	99 8b       	std	Y+17, r25	; 0x11
 e12:	88 8b       	std	Y+16, r24	; 0x10
 e14:	83 e3       	ldi	r24, 0x33	; 51
 e16:	97 e0       	ldi	r25, 0x07	; 7
 e18:	9b 8b       	std	Y+19, r25	; 0x13
 e1a:	8a 8b       	std	Y+18, r24	; 0x12
	RTOS_CreateTask(&led1_task) ;
 e1c:	ce 01       	movw	r24, r28
 e1e:	01 96       	adiw	r24, 0x01	; 1
 e20:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RTOS_CreateTask>
	RTOS_CreateTask(&led2_task) ;
 e24:	ce 01       	movw	r24, r28
 e26:	08 96       	adiw	r24, 0x08	; 8
 e28:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RTOS_CreateTask>
	RTOS_CreateTask(&led3_task)	;
 e2c:	ce 01       	movw	r24, r28
 e2e:	0f 96       	adiw	r24, 0x0f	; 15
 e30:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <RTOS_CreateTask>
	RTOS_Start() ;
 e34:	0e 94 c8 02 	call	0x590	; 0x590 <RTOS_Start>
 e38:	ff cf       	rjmp	.-2      	; 0xe38 <main+0xa0>

00000e3a <task1>:

	}
}

void task1(void)
{
 e3a:	df 93       	push	r29
 e3c:	cf 93       	push	r28
 e3e:	cd b7       	in	r28, 0x3d	; 61
 e40:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(PA0,TOGGLE) ;
 e42:	80 e0       	ldi	r24, 0x00	; 0
 e44:	62 e0       	ldi	r22, 0x02	; 2
 e46:	0e 94 97 05 	call	0xb2e	; 0xb2e <DIO_setPinValue>
}
 e4a:	cf 91       	pop	r28
 e4c:	df 91       	pop	r29
 e4e:	08 95       	ret

00000e50 <task2>:
void task2(void)
{
 e50:	df 93       	push	r29
 e52:	cf 93       	push	r28
 e54:	cd b7       	in	r28, 0x3d	; 61
 e56:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(PA1,TOGGLE) ;
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	62 e0       	ldi	r22, 0x02	; 2
 e5c:	0e 94 97 05 	call	0xb2e	; 0xb2e <DIO_setPinValue>
}
 e60:	cf 91       	pop	r28
 e62:	df 91       	pop	r29
 e64:	08 95       	ret

00000e66 <task3>:
void task3(void)
{
 e66:	df 93       	push	r29
 e68:	cf 93       	push	r28
 e6a:	cd b7       	in	r28, 0x3d	; 61
 e6c:	de b7       	in	r29, 0x3e	; 62
	DIO_setPinValue(PA2,TOGGLE) ;
 e6e:	82 e0       	ldi	r24, 0x02	; 2
 e70:	62 e0       	ldi	r22, 0x02	; 2
 e72:	0e 94 97 05 	call	0xb2e	; 0xb2e <DIO_setPinValue>
}
 e76:	cf 91       	pop	r28
 e78:	df 91       	pop	r29
 e7a:	08 95       	ret

00000e7c <_exit>:
 e7c:	f8 94       	cli

00000e7e <__stop_program>:
 e7e:	ff cf       	rjmp	.-2      	; 0xe7e <__stop_program>
