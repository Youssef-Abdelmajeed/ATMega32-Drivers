
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000258  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eea  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f7  00000000  00000000  000012f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b5  00000000  00000000  00001ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000545  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e2  00000000  00000000  00002701  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  7a:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:

    /* clear channel selection bits 0 - 3 */
    ADMUX &=  0XF0 ; 

    /* select a channel */
    ADMUX |= channel ;
  82:	96 b1       	in	r25, 0x06	; 6
  84:	90 68       	ori	r25, 0x80	; 128
  86:	96 b9       	out	0x06, r25	; 6
  88:	97 b1       	in	r25, 0x07	; 7
  8a:	9f 73       	andi	r25, 0x3F	; 63
  8c:	97 b9       	out	0x07, r25	; 7
  8e:	27 b1       	in	r18, 0x07	; 7
  90:	30 e4       	ldi	r19, 0x40	; 64
  92:	83 9f       	mul	r24, r19
  94:	c0 01       	movw	r24, r0
  96:	11 24       	eor	r1, r1
  98:	82 2b       	or	r24, r18
  9a:	87 b9       	out	0x07, r24	; 7
  9c:	67 70       	andi	r22, 0x07	; 7
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	88 7f       	andi	r24, 0xF8	; 248
  a2:	86 b9       	out	0x06, r24	; 6
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	68 2b       	or	r22, r24
  a8:	66 b9       	out	0x06, r22	; 6
  aa:	08 95       	ret

000000ac <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel)
{
    /* set the result register to be in right adjust mode   */
    clearBit(ADMUX,ADMUX_ADLAR) ; 
  ac:	97 b1       	in	r25, 0x07	; 7
  ae:	9f 7d       	andi	r25, 0xDF	; 223
  b0:	97 b9       	out	0x07, r25	; 7
}

inline void  ADC_SelectChannel(uint8_t channel)
{
    /* limit selection to  8 (0 - 7) */
    channel &= 0x07 ; 
  b2:	87 70       	andi	r24, 0x07	; 7

    /* clear channel selection bits 0 - 3 */
    ADMUX &=  0XF0 ; 
  b4:	97 b1       	in	r25, 0x07	; 7
  b6:	90 7f       	andi	r25, 0xF0	; 240
  b8:	97 b9       	out	0x07, r25	; 7

    /* select a channel */
    ADMUX |= channel ;
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	89 2b       	or	r24, r25
  be:	87 b9       	out	0x07, r24	; 7

    /* select the channel to read from */
     ADC_SelectChannel(channel) ;
   
    /* Start conversion */
    setBit(ADCSRA,ADCSRA_ADSC) ; 
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	86 b9       	out	0x06, r24	; 6
   
    /* polling on ADC Interrupt flag */
    while (getBit(ADCSRA,ADCSRA_ADIF)!= 1 ) ; 
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <ADC_Read+0x1a>
    
    /* clear ADC Interrupt flag */
    setBit(ADCSRA,ADCSRA_ADIF) ; 
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	86 b9       	out	0x06, r24	; 6

    return ADC_Result ;
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	95 b1       	in	r25, 0x05	; 5

}
  d4:	08 95       	ret

000000d6 <DIO_setPinDirection>:
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
   /* return pin value */
    return getBit((*PINX) ,pin);
}
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	70 f0       	brcs	.+28     	; 0xf6 <DIO_setPinDirection+0x20>
  da:	28 ef       	ldi	r18, 0xF8	; 248
  dc:	28 0f       	add	r18, r24
  de:	28 30       	cpi	r18, 0x08	; 8
  e0:	58 f0       	brcs	.+22     	; 0xf8 <DIO_setPinDirection+0x22>
  e2:	20 ef       	ldi	r18, 0xF0	; 240
  e4:	28 0f       	add	r18, r24
  e6:	28 30       	cpi	r18, 0x08	; 8
  e8:	38 f0       	brcs	.+14     	; 0xf8 <DIO_setPinDirection+0x22>
  ea:	28 ee       	ldi	r18, 0xE8	; 232
  ec:	28 0f       	add	r18, r24
  ee:	28 30       	cpi	r18, 0x08	; 8
  f0:	18 f0       	brcs	.+6      	; 0xf8 <DIO_setPinDirection+0x22>
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <DIO_setPinDirection+0x22>
  f6:	28 2f       	mov	r18, r24
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	68 f0       	brcs	.+26     	; 0x116 <DIO_setPinDirection+0x40>
  fc:	98 ef       	ldi	r25, 0xF8	; 248
  fe:	98 0f       	add	r25, r24
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	58 f0       	brcs	.+22     	; 0x11a <DIO_setPinDirection+0x44>
 104:	90 ef       	ldi	r25, 0xF0	; 240
 106:	98 0f       	add	r25, r24
 108:	98 30       	cpi	r25, 0x08	; 8
 10a:	48 f0       	brcs	.+18     	; 0x11e <DIO_setPinDirection+0x48>
 10c:	88 51       	subi	r24, 0x18	; 24
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	40 f4       	brcc	.+16     	; 0x122 <DIO_setPinDirection+0x4c>
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	07 c0       	rjmp	.+14     	; 0x124 <DIO_setPinDirection+0x4e>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <DIO_setPinDirection+0x4e>
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	03 c0       	rjmp	.+6      	; 0x124 <DIO_setPinDirection+0x4e>
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	01 c0       	rjmp	.+2      	; 0x124 <DIO_setPinDirection+0x4e>
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	df 01       	movw	r26, r30
 12e:	a8 0f       	add	r26, r24
 130:	b9 1f       	adc	r27, r25
 132:	aa 0f       	add	r26, r26
 134:	bb 1f       	adc	r27, r27
 136:	a0 5a       	subi	r26, 0xA0	; 160
 138:	bf 4f       	sbci	r27, 0xFF	; 255
 13a:	12 96       	adiw	r26, 0x02	; 2
 13c:	0d 90       	ld	r0, X+
 13e:	bc 91       	ld	r27, X
 140:	a0 2d       	mov	r26, r0
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	e0 5a       	subi	r30, 0xA0	; 160
 14c:	ff 4f       	sbci	r31, 0xFF	; 255
 14e:	01 90       	ld	r0, Z+
 150:	f0 81       	ld	r31, Z
 152:	e0 2d       	mov	r30, r0
 154:	61 30       	cpi	r22, 0x01	; 1
 156:	81 f0       	breq	.+32     	; 0x178 <DIO_setPinDirection+0xa2>
 158:	18 f0       	brcs	.+6      	; 0x160 <DIO_setPinDirection+0x8a>
 15a:	62 30       	cpi	r22, 0x02	; 2
 15c:	c1 f0       	breq	.+48     	; 0x18e <DIO_setPinDirection+0xb8>
 15e:	08 95       	ret
 160:	3c 91       	ld	r19, X
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_setPinDirection+0x96>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_setPinDirection+0x92>
 170:	80 95       	com	r24
 172:	83 23       	and	r24, r19
 174:	8c 93       	st	X, r24
 176:	08 95       	ret
 178:	3c 91       	ld	r19, X
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_setPinDirection+0xae>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	2a 95       	dec	r18
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_setPinDirection+0xaa>
 188:	83 2b       	or	r24, r19
 18a:	8c 93       	st	X, r24
 18c:	08 95       	ret
 18e:	30 81       	ld	r19, Z
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_setPinDirection+0xc4>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	2a 95       	dec	r18
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_setPinDirection+0xc0>
 19e:	93 2f       	mov	r25, r19
 1a0:	98 2b       	or	r25, r24
 1a2:	90 83       	st	Z, r25
 1a4:	9c 91       	ld	r25, X
 1a6:	80 95       	com	r24
 1a8:	89 23       	and	r24, r25
 1aa:	8c 93       	st	X, r24
 1ac:	08 95       	ret

000001ae <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	fc 01       	movw	r30, r24
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	df 01       	movw	r26, r30
 1b8:	a8 0f       	add	r26, r24
 1ba:	b9 1f       	adc	r27, r25
 1bc:	aa 0f       	add	r26, r26
 1be:	bb 1f       	adc	r27, r27
 1c0:	a0 5a       	subi	r26, 0xA0	; 160
 1c2:	bf 4f       	sbci	r27, 0xFF	; 255
 1c4:	12 96       	adiw	r26, 0x02	; 2
 1c6:	0d 90       	ld	r0, X+
 1c8:	bc 91       	ld	r27, X
 1ca:	a0 2d       	mov	r26, r0
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 1cc:	e8 0f       	add	r30, r24
 1ce:	f9 1f       	adc	r31, r25
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e0 5a       	subi	r30, 0xA0	; 160
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	01 90       	ld	r0, Z+
 1da:	f0 81       	ld	r31, Z
 1dc:	e0 2d       	mov	r30, r0
	
    switch (pinDirection)
 1de:	61 30       	cpi	r22, 0x01	; 1
 1e0:	31 f0       	breq	.+12     	; 0x1ee <DIO_setPortDirection+0x40>
 1e2:	18 f0       	brcs	.+6      	; 0x1ea <DIO_setPortDirection+0x3c>
 1e4:	62 30       	cpi	r22, 0x02	; 2
 1e6:	31 f0       	breq	.+12     	; 0x1f4 <DIO_setPortDirection+0x46>
 1e8:	08 95       	ret
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 1ea:	1c 92       	st	X, r1
        break;
 1ec:	08 95       	ret
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	8c 93       	st	X, r24
        break;
 1f2:	08 95       	ret
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 1f8:	1c 92       	st	X, r1
 1fa:	08 95       	ret

000001fc <DIO_setPortValue>:
}

void DIO_setPortValue(EN_PortNumber_t portNum,uint8_t value) 
{
	/* select PORTX Register */
    volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	e8 0f       	add	r30, r24
 206:	f9 1f       	adc	r31, r25
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	e0 5a       	subi	r30, 0xA0	; 160
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	01 90       	ld	r0, Z+
 212:	f0 81       	ld	r31, Z
 214:	e0 2d       	mov	r30, r0
	/* set the port value */	
    *PORTX = value ;
 216:	60 83       	st	Z, r22
 218:	08 95       	ret

0000021a <main>:


int main(void)
{
	/* Set ADC0 pin to input  */
	DIO_setPinDirection(PA0,INPUT) ;
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPinDirection>
	/* set two ports as outputs */
	DIO_setPortDirection(PORTB,OUTPUT) ;
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_setPortDirection>
	DIO_setPortDirection(PORTC,OUTPUT) ; 
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <DIO_setPortDirection>
	/* init ADC  */
	ADC_Init(AREF,prescaller128) ; 
 232:	67 e0       	ldi	r22, 0x07	; 7
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	uint16_t reading =0 ; 
 	while (1) 
    {
		reading = ADC_Read(ADC0) ; 
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 56 00 	call	0xac	; 0xac <ADC_Read>
 240:	c9 2f       	mov	r28, r25
		DIO_setPortValue(PORTB,reading) ;
 242:	68 2f       	mov	r22, r24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_setPortValue>
		DIO_setPortValue(PORTC,reading>>8) ;
 24a:	6c 2f       	mov	r22, r28
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_setPortValue>
 252:	f3 cf       	rjmp	.-26     	; 0x23a <main+0x20>

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
