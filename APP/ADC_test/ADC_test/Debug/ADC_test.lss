
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000003ee  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800082  00800082  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012cc  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090e  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000087c  00000000  00000000  000021ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000776  00000000  00000000  0000332a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003aa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 a1 00 	jmp	0x142	; 0x142 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 39       	cpi	r26, 0x91	; 145
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
  8a:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
    /*Set the ISR Source to be Single channel conversion */
    ISR_SOURCE = ISR_SINGLE_CHANNEL ;
	
	return ADC_OK ;

}
  92:	96 b1       	in	r25, 0x06	; 6
  94:	90 68       	ori	r25, 0x80	; 128
  96:	96 b9       	out	0x06, r25	; 6
  98:	97 b1       	in	r25, 0x07	; 7
  9a:	9f 73       	andi	r25, 0x3F	; 63
  9c:	97 b9       	out	0x07, r25	; 7
  9e:	27 b1       	in	r18, 0x07	; 7
  a0:	30 e4       	ldi	r19, 0x40	; 64
  a2:	83 9f       	mul	r24, r19
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	82 2b       	or	r24, r18
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	67 70       	andi	r22, 0x07	; 7
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	86 b9       	out	0x06, r24	; 6
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	68 2b       	or	r22, r24
  b8:	66 b9       	out	0x06, r22	; 6
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	08 95       	ret

000000be <ADC_ReadChainAsync>:

uint8_t ADC_ReadChainAsync(ST_ADC_Chain_t *chain)
{
  be:	fc 01       	movw	r30, r24
	/* Check if the ADC is busy */
	if(globalADCStatus==ADC_BUSY) return ADC_BUSY ;
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	85 30       	cpi	r24, 0x05	; 5
  c6:	e1 f1       	breq	.+120    	; 0x140 <ADC_ReadChainAsync+0x82>

     /* check the given ADC reading pointer and notification callback function */
    if(chain->results==NULL||chain->notifcation==NULL) return ADC_NULL ;
  c8:	83 81       	ldd	r24, Z+3	; 0x03
  ca:	94 81       	ldd	r25, Z+4	; 0x04
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	a9 f1       	breq	.+106    	; 0x13a <ADC_ReadChainAsync+0x7c>
  d0:	25 81       	ldd	r18, Z+5	; 0x05
  d2:	36 81       	ldd	r19, Z+6	; 0x06
  d4:	21 15       	cp	r18, r1
  d6:	31 05       	cpc	r19, r1
  d8:	91 f1       	breq	.+100    	; 0x13e <ADC_ReadChainAsync+0x80>
    
    /* set callback notification function */
    globalNotificationFunc = chain->notifcation ; 
  da:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <globalNotificationFunc+0x1>
  de:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <globalNotificationFunc>
    
    /* set ADC readings */
    globalADC_ChainResultArr = chain->results ; 
  e2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__data_end+0x1>
  e6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
    
	/*set ADC Channels */
	globalChannelsArr = chain->channelsArr ; 
  ea:	81 81       	ldd	r24, Z+1	; 0x01
  ec:	92 81       	ldd	r25, Z+2	; 0x02
  ee:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <globalChannelsArr+0x1>
  f2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <globalChannelsArr>
	
	/*set How many ADC Channels to read */
	globalADC_ChainLenght = chain->length ; 
  f6:	80 81       	ld	r24, Z
  f8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <globalADC_ChainLenght>
	
     /* set the result register to be in right adjust mode */
    clearBit(ADMUX,ADMUX_ADLAR) ;
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	87 b9       	out	0x07, r24	; 7
   
    /* initialize chain Index */
	globalChainIndex = 0 ; 
 102:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <globalChainIndex>
	
	/*select the first channel */
    ADC_SelectChannel(globalChannelsArr[globalChainIndex]) ;
 106:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <globalChannelsArr>
 10a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <globalChannelsArr+0x1>
 10e:	80 81       	ld	r24, Z
}

inline void  ADC_SelectChannel(uint8_t channel)
{
    /* limit selection to  8 (0 - 7) */
    channel &= 0x07 ; 
 110:	87 70       	andi	r24, 0x07	; 7

    /* clear channel selection bits 0 - 3 */
    ADMUX &=  0XF0 ; 
 112:	97 b1       	in	r25, 0x07	; 7
 114:	90 7f       	andi	r25, 0xF0	; 240
 116:	97 b9       	out	0x07, r25	; 7

    /* select a channel */
    ADMUX |= channel ;
 118:	97 b1       	in	r25, 0x07	; 7
 11a:	89 2b       	or	r24, r25
 11c:	87 b9       	out	0x07, r24	; 7
	
	/*select the first channel */
    ADC_SelectChannel(globalChannelsArr[globalChainIndex]) ;

    /* Start conversion */
    setBit(ADCSRA,ADCSRA_ADSC) ; 
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	80 64       	ori	r24, 0x40	; 64
 122:	86 b9       	out	0x06, r24	; 6
    
    /*Set ADC Interrupt Enable */
    setBit(ADCSRA,ADCSRA_ADIE) ;
 124:	86 b1       	in	r24, 0x06	; 6
 126:	88 60       	ori	r24, 0x08	; 8
 128:	86 b9       	out	0x06, r24	; 6
	
    /* set the ADC status to be busy */
	globalADCStatus = ADC_BUSY ;
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	/*Set the ISR Source to be Chain conversion */
	ISR_SOURCE = ISR_CHAIN ; 
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <ISR_SOURCE>
	
	return ADC_OK ;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	08 95       	ret
{
	/* Check if the ADC is busy */
	if(globalADCStatus==ADC_BUSY) return ADC_BUSY ;

     /* check the given ADC reading pointer and notification callback function */
    if(chain->results==NULL||chain->notifcation==NULL) return ADC_NULL ;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	08 95       	ret
 13e:	83 e0       	ldi	r24, 0x03	; 3
	/*Set the ISR Source to be Chain conversion */
	ISR_SOURCE = ISR_CHAIN ; 
	
	return ADC_OK ;

}
 140:	08 95       	ret

00000142 <__vector_16>:

void __vector_16(void) __attribute__((signal)) ;
void __vector_16(void)
{
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
    switch (ISR_SOURCE)
 164:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <ISR_SOURCE>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	19 f0       	breq	.+6      	; 0x172 <__vector_16+0x30>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	a9 f0       	breq	.+42     	; 0x19a <__vector_16+0x58>
 170:	48 c0       	rjmp	.+144    	; 0x202 <__vector_16+0xc0>
    {
    case ISR_SINGLE_CHANNEL:
        /* store ADC result */
        *globalADCResult = ADC_Result ; 
 172:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <globalADCResult>
 176:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <globalADCResult+0x1>
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	95 b1       	in	r25, 0x05	; 5
 17e:	91 83       	std	Z+1, r25	; 0x01
 180:	80 83       	st	Z, r24

        /*set ADC Status to be free */
        globalADCStatus = ADC_IDLE ;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        
        /* invoke notification function*/
        globalNotificationFunc(); 
 188:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <globalNotificationFunc>
 18c:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <globalNotificationFunc+0x1>
 190:	09 95       	icall
        
        /* disable ADC Interrupt Enable */
        clearBit(ADCSRA,ADCSRA_ADIE) ; 
 192:	86 b1       	in	r24, 0x06	; 6
 194:	87 7f       	andi	r24, 0xF7	; 247
 196:	86 b9       	out	0x06, r24	; 6
        break;
 198:	34 c0       	rjmp	.+104    	; 0x202 <__vector_16+0xc0>
    case ISR_CHAIN: 
        /* store the ADC reading at the appropriate index */
        globalADC_ChainResultArr[globalChainIndex] = ADC_Result ; 
 19a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <globalChainIndex>
 19e:	e8 2f       	mov	r30, r24
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <__data_end>
 1aa:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <__data_end+0x1>
 1ae:	e2 0f       	add	r30, r18
 1b0:	f3 1f       	adc	r31, r19
 1b2:	24 b1       	in	r18, 0x04	; 4
 1b4:	35 b1       	in	r19, 0x05	; 5
 1b6:	31 83       	std	Z+1, r19	; 0x01
 1b8:	20 83       	st	Z, r18
		
		/*increment chain reading index*/
		globalChainIndex++ ; 
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <globalChainIndex>
		
        if(globalChainIndex==globalADC_ChainLenght)		/* Chain is complete */
 1c0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <globalADC_ChainLenght>
 1c4:	89 13       	cpse	r24, r25
 1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <__vector_16+0x9e>
        {
			/*set ADC Status to be free */
			globalADCStatus = ADC_IDLE ;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			  
			/* invoke notification function*/
			globalNotificationFunc();
 1ce:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <globalNotificationFunc>
 1d2:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <globalNotificationFunc+0x1>
 1d6:	09 95       	icall
			  
			/* disable ADC Interrupt Enable */
			clearBit(ADCSRA,ADCSRA_ADIE) ;
 1d8:	86 b1       	in	r24, 0x06	; 6
 1da:	87 7f       	andi	r24, 0xF7	; 247
 1dc:	86 b9       	out	0x06, r24	; 6
 1de:	11 c0       	rjmp	.+34     	; 0x202 <__vector_16+0xc0>
        }
        else /* Chain isn't complete */
        {
			/* select the next channel to read */
			ADC_SelectChannel(globalChannelsArr[globalChainIndex]) ;
 1e0:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <globalChannelsArr>
 1e4:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <globalChannelsArr+0x1>
 1e8:	e8 0f       	add	r30, r24
 1ea:	f1 1d       	adc	r31, r1
 1ec:	80 81       	ld	r24, Z
}

inline void  ADC_SelectChannel(uint8_t channel)
{
    /* limit selection to  8 (0 - 7) */
    channel &= 0x07 ; 
 1ee:	87 70       	andi	r24, 0x07	; 7

    /* clear channel selection bits 0 - 3 */
    ADMUX &=  0XF0 ; 
 1f0:	97 b1       	in	r25, 0x07	; 7
 1f2:	90 7f       	andi	r25, 0xF0	; 240
 1f4:	97 b9       	out	0x07, r25	; 7

    /* select a channel */
    ADMUX |= channel ;
 1f6:	97 b1       	in	r25, 0x07	; 7
 1f8:	89 2b       	or	r24, r25
 1fa:	87 b9       	out	0x07, r24	; 7
        else /* Chain isn't complete */
        {
			/* select the next channel to read */
			ADC_SelectChannel(globalChannelsArr[globalChainIndex]) ;
			/* start the next conversion */
			setBit(ADCSRA,ADCSRA_ADSC) ;
 1fc:	86 b1       	in	r24, 0x06	; 6
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	86 b9       	out	0x06, r24	; 6
        }
        break;
    }
 
}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <DIO_setPinDirection>:
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
   /* return pin value */
    return getBit((*PINX) ,pin);
}
 224:	88 30       	cpi	r24, 0x08	; 8
 226:	70 f0       	brcs	.+28     	; 0x244 <DIO_setPinDirection+0x20>
 228:	28 ef       	ldi	r18, 0xF8	; 248
 22a:	28 0f       	add	r18, r24
 22c:	28 30       	cpi	r18, 0x08	; 8
 22e:	58 f0       	brcs	.+22     	; 0x246 <DIO_setPinDirection+0x22>
 230:	20 ef       	ldi	r18, 0xF0	; 240
 232:	28 0f       	add	r18, r24
 234:	28 30       	cpi	r18, 0x08	; 8
 236:	38 f0       	brcs	.+14     	; 0x246 <DIO_setPinDirection+0x22>
 238:	28 ee       	ldi	r18, 0xE8	; 232
 23a:	28 0f       	add	r18, r24
 23c:	28 30       	cpi	r18, 0x08	; 8
 23e:	18 f0       	brcs	.+6      	; 0x246 <DIO_setPinDirection+0x22>
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	01 c0       	rjmp	.+2      	; 0x246 <DIO_setPinDirection+0x22>
 244:	28 2f       	mov	r18, r24
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	68 f0       	brcs	.+26     	; 0x264 <DIO_setPinDirection+0x40>
 24a:	98 ef       	ldi	r25, 0xF8	; 248
 24c:	98 0f       	add	r25, r24
 24e:	98 30       	cpi	r25, 0x08	; 8
 250:	58 f0       	brcs	.+22     	; 0x268 <DIO_setPinDirection+0x44>
 252:	90 ef       	ldi	r25, 0xF0	; 240
 254:	98 0f       	add	r25, r24
 256:	98 30       	cpi	r25, 0x08	; 8
 258:	48 f0       	brcs	.+18     	; 0x26c <DIO_setPinDirection+0x48>
 25a:	88 51       	subi	r24, 0x18	; 24
 25c:	88 30       	cpi	r24, 0x08	; 8
 25e:	40 f4       	brcc	.+16     	; 0x270 <DIO_setPinDirection+0x4c>
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	07 c0       	rjmp	.+14     	; 0x272 <DIO_setPinDirection+0x4e>
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	05 c0       	rjmp	.+10     	; 0x272 <DIO_setPinDirection+0x4e>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	03 c0       	rjmp	.+6      	; 0x272 <DIO_setPinDirection+0x4e>
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	01 c0       	rjmp	.+2      	; 0x272 <DIO_setPinDirection+0x4e>
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	df 01       	movw	r26, r30
 27c:	a8 0f       	add	r26, r24
 27e:	b9 1f       	adc	r27, r25
 280:	aa 0f       	add	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	af 59       	subi	r26, 0x9F	; 159
 286:	bf 4f       	sbci	r27, 0xFF	; 255
 288:	12 96       	adiw	r26, 0x02	; 2
 28a:	0d 90       	ld	r0, X+
 28c:	bc 91       	ld	r27, X
 28e:	a0 2d       	mov	r26, r0
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	ef 59       	subi	r30, 0x9F	; 159
 29a:	ff 4f       	sbci	r31, 0xFF	; 255
 29c:	01 90       	ld	r0, Z+
 29e:	f0 81       	ld	r31, Z
 2a0:	e0 2d       	mov	r30, r0
 2a2:	61 30       	cpi	r22, 0x01	; 1
 2a4:	81 f0       	breq	.+32     	; 0x2c6 <DIO_setPinDirection+0xa2>
 2a6:	18 f0       	brcs	.+6      	; 0x2ae <DIO_setPinDirection+0x8a>
 2a8:	62 30       	cpi	r22, 0x02	; 2
 2aa:	c1 f0       	breq	.+48     	; 0x2dc <DIO_setPinDirection+0xb8>
 2ac:	08 95       	ret
 2ae:	3c 91       	ld	r19, X
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_setPinDirection+0x96>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	2a 95       	dec	r18
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_setPinDirection+0x92>
 2be:	80 95       	com	r24
 2c0:	83 23       	and	r24, r19
 2c2:	8c 93       	st	X, r24
 2c4:	08 95       	ret
 2c6:	3c 91       	ld	r19, X
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_setPinDirection+0xae>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	2a 95       	dec	r18
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_setPinDirection+0xaa>
 2d6:	83 2b       	or	r24, r19
 2d8:	8c 93       	st	X, r24
 2da:	08 95       	ret
 2dc:	30 81       	ld	r19, Z
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_setPinDirection+0xc4>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	2a 95       	dec	r18
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_setPinDirection+0xc0>
 2ec:	93 2f       	mov	r25, r19
 2ee:	98 2b       	or	r25, r24
 2f0:	90 83       	st	Z, r25
 2f2:	9c 91       	ld	r25, X
 2f4:	80 95       	com	r24
 2f6:	89 23       	and	r24, r25
 2f8:	8c 93       	st	X, r24
 2fa:	08 95       	ret

000002fc <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	df 01       	movw	r26, r30
 306:	a8 0f       	add	r26, r24
 308:	b9 1f       	adc	r27, r25
 30a:	aa 0f       	add	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	af 59       	subi	r26, 0x9F	; 159
 310:	bf 4f       	sbci	r27, 0xFF	; 255
 312:	12 96       	adiw	r26, 0x02	; 2
 314:	0d 90       	ld	r0, X+
 316:	bc 91       	ld	r27, X
 318:	a0 2d       	mov	r26, r0
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 31a:	e8 0f       	add	r30, r24
 31c:	f9 1f       	adc	r31, r25
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	ef 59       	subi	r30, 0x9F	; 159
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	01 90       	ld	r0, Z+
 328:	f0 81       	ld	r31, Z
 32a:	e0 2d       	mov	r30, r0
	
    switch (pinDirection)
 32c:	61 30       	cpi	r22, 0x01	; 1
 32e:	31 f0       	breq	.+12     	; 0x33c <DIO_setPortDirection+0x40>
 330:	18 f0       	brcs	.+6      	; 0x338 <DIO_setPortDirection+0x3c>
 332:	62 30       	cpi	r22, 0x02	; 2
 334:	31 f0       	breq	.+12     	; 0x342 <DIO_setPortDirection+0x46>
 336:	08 95       	ret
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 338:	1c 92       	st	X, r1
        break;
 33a:	08 95       	ret
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	8c 93       	st	X, r24
        break;
 340:	08 95       	ret
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 346:	1c 92       	st	X, r1
 348:	08 95       	ret

0000034a <DIO_setPortValue>:
}

void DIO_setPortValue(EN_PortNumber_t portNum,uint8_t value) 
{
	/* select PORTX Register */
    volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	fc 01       	movw	r30, r24
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	e8 0f       	add	r30, r24
 354:	f9 1f       	adc	r31, r25
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	ef 59       	subi	r30, 0x9F	; 159
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	01 90       	ld	r0, Z+
 360:	f0 81       	ld	r31, Z
 362:	e0 2d       	mov	r30, r0
	/* set the port value */	
    *PORTX = value ;
 364:	60 83       	st	Z, r22
 366:	08 95       	ret

00000368 <GIE_Enable>:
 */
#include "LIB/STD_TYPES.h"
#include "GIE_INT.h"
#include "GIE_REG.h"

inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 368:	8f b7       	in	r24, 0x3f	; 63
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	8f bf       	out	0x3f, r24	; 63
 36e:	08 95       	ret

00000370 <ADC_happend>:
uint16_t channelsReadings[2]= {0,0} ;
uint8_t channelsarr[2] = {PA0,PA1} ;
	 
#if debug==chainAsync
void ADC_happend(void)
{
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
	DIO_setPortValue(PORTC,channelsReadings[0]) ;
 374:	cd e8       	ldi	r28, 0x8D	; 141
 376:	d0 e0       	ldi	r29, 0x00	; 0
 378:	68 81       	ld	r22, Y
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_setPortValue>
	DIO_setPortValue(PORTB,channelsReadings[1]) ;
 380:	6a 81       	ldd	r22, Y+2	; 0x02
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_setPortValue>
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <main>:
	DIO_setPortValue(PORTB,reading>>8) ;
}
#endif

int main(void)
{
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	27 97       	sbiw	r28, 0x07	; 7
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
	
	/* Set ADC0 pin to input  */
	DIO_setPinDirection(PA0,INPUT) ;
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 12 01 	call	0x224	; 0x224 <DIO_setPinDirection>
	/* Set ADC1 pin to input  */
	DIO_setPinDirection(PA1,INPUT) ;
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 12 01 	call	0x224	; 0x224 <DIO_setPinDirection>

	/* set two ports as outputs */
	DIO_setPortDirection(PORTB,OUTPUT) ;
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_setPortDirection>
	DIO_setPortDirection(PORTC,OUTPUT) ; 
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_setPortDirection>
		
	GIE_Enable() ;
 3c2:	0e 94 b4 01 	call	0x368	; 0x368 <GIE_Enable>

	/* init ADC  */
	ADC_Init(AREF,prescaller128) ; 
 3c6:	67 e0       	ldi	r22, 0x07	; 7
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
		#if debug == Async
		ADC_ReadAsync(ADC0,&reading,&ADC_happend) ;
		#endif
		
		#if debug == chainAsync
		ST_ADC_Chain_t chain1 = {.channelsArr=channelsarr,.length = 2 , .results=channelsReadings,&ADC_happend} ;
 3ce:	87 e0       	ldi	r24, 0x07	; 7
 3d0:	eb e7       	ldi	r30, 0x7B	; 123
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	de 01       	movw	r26, r28
 3d6:	11 96       	adiw	r26, 0x01	; 1
 3d8:	01 90       	ld	r0, Z+
 3da:	0d 92       	st	X+, r0
 3dc:	8a 95       	dec	r24
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x4a>
		ADC_ReadChainAsync(&chain1) ;
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_ReadChainAsync>
 3e8:	f2 cf       	rjmp	.-28     	; 0x3ce <main+0x40>

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
