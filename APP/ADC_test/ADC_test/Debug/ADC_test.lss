
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000338  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007a  0080007a  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010b7  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  000015fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076b  00000000  00000000  00001e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000025d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e5  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000694  00000000  00000000  00002d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003405  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  8a:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
	
	globalADCStatus = ADC_BUSY ;
	
	return ADC_OK ;

}
  92:	96 b1       	in	r25, 0x06	; 6
  94:	90 68       	ori	r25, 0x80	; 128
  96:	96 b9       	out	0x06, r25	; 6
  98:	97 b1       	in	r25, 0x07	; 7
  9a:	9f 73       	andi	r25, 0x3F	; 63
  9c:	97 b9       	out	0x07, r25	; 7
  9e:	27 b1       	in	r18, 0x07	; 7
  a0:	30 e4       	ldi	r19, 0x40	; 64
  a2:	83 9f       	mul	r24, r19
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	82 2b       	or	r24, r18
  aa:	87 b9       	out	0x07, r24	; 7
  ac:	67 70       	andi	r22, 0x07	; 7
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	86 b9       	out	0x06, r24	; 6
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	68 2b       	or	r22, r24
  b8:	66 b9       	out	0x06, r22	; 6
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	08 95       	ret

000000be <ADC_Read>:
  be:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	95 30       	cpi	r25, 0x05	; 5
  c4:	b9 f1       	breq	.+110    	; 0x134 <ADC_Read+0x76>
  c6:	61 15       	cp	r22, r1
  c8:	71 05       	cpc	r23, r1
  ca:	89 f1       	breq	.+98     	; 0x12e <ADC_Read+0x70>
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	97 b1       	in	r25, 0x07	; 7
  d4:	9f 7d       	andi	r25, 0xDF	; 223
  d6:	97 b9       	out	0x07, r25	; 7
  d8:	87 70       	andi	r24, 0x07	; 7
  da:	97 b1       	in	r25, 0x07	; 7
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	97 b9       	out	0x07, r25	; 7
  e0:	97 b1       	in	r25, 0x07	; 7
  e2:	89 2b       	or	r24, r25
  e4:	87 b9       	out	0x07, r24	; 7
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	86 b9       	out	0x06, r24	; 6
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	dc 01       	movw	r26, r24
  f2:	03 c0       	rjmp	.+6      	; 0xfa <ADC_Read+0x3c>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	a1 1d       	adc	r26, r1
  f8:	b1 1d       	adc	r27, r1
  fa:	34 99       	sbic	0x06, 4	; 6
  fc:	06 c0       	rjmp	.+12     	; 0x10a <ADC_Read+0x4c>
  fe:	80 35       	cpi	r24, 0x50	; 80
 100:	23 ec       	ldi	r18, 0xC3	; 195
 102:	92 07       	cpc	r25, r18
 104:	a1 05       	cpc	r26, r1
 106:	b1 05       	cpc	r27, r1
 108:	a9 f7       	brne	.-22     	; 0xf4 <ADC_Read+0x36>
 10a:	24 e0       	ldi	r18, 0x04	; 4
 10c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 110:	80 35       	cpi	r24, 0x50	; 80
 112:	93 4c       	sbci	r25, 0xC3	; 195
 114:	a1 05       	cpc	r26, r1
 116:	b1 05       	cpc	r27, r1
 118:	61 f0       	breq	.+24     	; 0x132 <ADC_Read+0x74>
 11a:	86 b1       	in	r24, 0x06	; 6
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	86 b9       	out	0x06, r24	; 6
 120:	84 b1       	in	r24, 0x04	; 4
 122:	95 b1       	in	r25, 0x05	; 5
 124:	fb 01       	movw	r30, r22
 126:	91 83       	std	Z+1, r25	; 0x01
 128:	80 83       	st	Z, r24
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	03 c0       	rjmp	.+6      	; 0x134 <ADC_Read+0x76>
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	01 c0       	rjmp	.+2      	; 0x134 <ADC_Read+0x76>
 132:	92 e0       	ldi	r25, 0x02	; 2
 134:	89 2f       	mov	r24, r25
 136:	08 95       	ret

00000138 <__vector_16>:
void __vector_16(void) __attribute__((signal)) ;
void __vector_16(void)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
    /* store ADC result */
    *globalADCResult = ADC_Result ; 
 15a:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 15e:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__data_end+0x1>
 162:	84 b1       	in	r24, 0x04	; 4
 164:	95 b1       	in	r25, 0x05	; 5
 166:	91 83       	std	Z+1, r25	; 0x01
 168:	80 83       	st	Z, r24

	/*set ADC Status to be free */
	globalADCStatus = ADC_IDLE ;
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
    /* invoke notification function*/
    globalNotificationFunc(); 
 170:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <globalNotificationFunc>
 174:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <globalNotificationFunc+0x1>
 178:	09 95       	icall
    
    /* disable ADC Interrupt Enable */
    clearBit(ADCSRA,ADCSRA_ADIE) ; 
 17a:	86 b1       	in	r24, 0x06	; 6
 17c:	87 7f       	andi	r24, 0xF7	; 247
 17e:	86 b9       	out	0x06, r24	; 6
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <DIO_setPinDirection>:
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
   /* return pin value */
    return getBit((*PINX) ,pin);
}
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	70 f0       	brcs	.+28     	; 0x1c2 <DIO_setPinDirection+0x20>
 1a6:	28 ef       	ldi	r18, 0xF8	; 248
 1a8:	28 0f       	add	r18, r24
 1aa:	28 30       	cpi	r18, 0x08	; 8
 1ac:	58 f0       	brcs	.+22     	; 0x1c4 <DIO_setPinDirection+0x22>
 1ae:	20 ef       	ldi	r18, 0xF0	; 240
 1b0:	28 0f       	add	r18, r24
 1b2:	28 30       	cpi	r18, 0x08	; 8
 1b4:	38 f0       	brcs	.+14     	; 0x1c4 <DIO_setPinDirection+0x22>
 1b6:	28 ee       	ldi	r18, 0xE8	; 232
 1b8:	28 0f       	add	r18, r24
 1ba:	28 30       	cpi	r18, 0x08	; 8
 1bc:	18 f0       	brcs	.+6      	; 0x1c4 <DIO_setPinDirection+0x22>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <DIO_setPinDirection+0x22>
 1c2:	28 2f       	mov	r18, r24
 1c4:	88 30       	cpi	r24, 0x08	; 8
 1c6:	68 f0       	brcs	.+26     	; 0x1e2 <DIO_setPinDirection+0x40>
 1c8:	98 ef       	ldi	r25, 0xF8	; 248
 1ca:	98 0f       	add	r25, r24
 1cc:	98 30       	cpi	r25, 0x08	; 8
 1ce:	58 f0       	brcs	.+22     	; 0x1e6 <DIO_setPinDirection+0x44>
 1d0:	90 ef       	ldi	r25, 0xF0	; 240
 1d2:	98 0f       	add	r25, r24
 1d4:	98 30       	cpi	r25, 0x08	; 8
 1d6:	48 f0       	brcs	.+18     	; 0x1ea <DIO_setPinDirection+0x48>
 1d8:	88 51       	subi	r24, 0x18	; 24
 1da:	88 30       	cpi	r24, 0x08	; 8
 1dc:	40 f4       	brcc	.+16     	; 0x1ee <DIO_setPinDirection+0x4c>
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <DIO_setPinDirection+0x4e>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <DIO_setPinDirection+0x4e>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <DIO_setPinDirection+0x4e>
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <DIO_setPinDirection+0x4e>
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	df 01       	movw	r26, r30
 1fa:	a8 0f       	add	r26, r24
 1fc:	b9 1f       	adc	r27, r25
 1fe:	aa 0f       	add	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	af 59       	subi	r26, 0x9F	; 159
 204:	bf 4f       	sbci	r27, 0xFF	; 255
 206:	12 96       	adiw	r26, 0x02	; 2
 208:	0d 90       	ld	r0, X+
 20a:	bc 91       	ld	r27, X
 20c:	a0 2d       	mov	r26, r0
 20e:	e8 0f       	add	r30, r24
 210:	f9 1f       	adc	r31, r25
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31
 216:	ef 59       	subi	r30, 0x9F	; 159
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	01 90       	ld	r0, Z+
 21c:	f0 81       	ld	r31, Z
 21e:	e0 2d       	mov	r30, r0
 220:	61 30       	cpi	r22, 0x01	; 1
 222:	81 f0       	breq	.+32     	; 0x244 <DIO_setPinDirection+0xa2>
 224:	18 f0       	brcs	.+6      	; 0x22c <DIO_setPinDirection+0x8a>
 226:	62 30       	cpi	r22, 0x02	; 2
 228:	c1 f0       	breq	.+48     	; 0x25a <DIO_setPinDirection+0xb8>
 22a:	08 95       	ret
 22c:	3c 91       	ld	r19, X
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinDirection+0x96>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	2a 95       	dec	r18
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinDirection+0x92>
 23c:	80 95       	com	r24
 23e:	83 23       	and	r24, r19
 240:	8c 93       	st	X, r24
 242:	08 95       	ret
 244:	3c 91       	ld	r19, X
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_setPinDirection+0xae>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	2a 95       	dec	r18
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_setPinDirection+0xaa>
 254:	83 2b       	or	r24, r19
 256:	8c 93       	st	X, r24
 258:	08 95       	ret
 25a:	30 81       	ld	r19, Z
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_setPinDirection+0xc4>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	2a 95       	dec	r18
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_setPinDirection+0xc0>
 26a:	93 2f       	mov	r25, r19
 26c:	98 2b       	or	r25, r24
 26e:	90 83       	st	Z, r25
 270:	9c 91       	ld	r25, X
 272:	80 95       	com	r24
 274:	89 23       	and	r24, r25
 276:	8c 93       	st	X, r24
 278:	08 95       	ret

0000027a <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	df 01       	movw	r26, r30
 284:	a8 0f       	add	r26, r24
 286:	b9 1f       	adc	r27, r25
 288:	aa 0f       	add	r26, r26
 28a:	bb 1f       	adc	r27, r27
 28c:	af 59       	subi	r26, 0x9F	; 159
 28e:	bf 4f       	sbci	r27, 0xFF	; 255
 290:	12 96       	adiw	r26, 0x02	; 2
 292:	0d 90       	ld	r0, X+
 294:	bc 91       	ld	r27, X
 296:	a0 2d       	mov	r26, r0
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 298:	e8 0f       	add	r30, r24
 29a:	f9 1f       	adc	r31, r25
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	ef 59       	subi	r30, 0x9F	; 159
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	01 90       	ld	r0, Z+
 2a6:	f0 81       	ld	r31, Z
 2a8:	e0 2d       	mov	r30, r0
	
    switch (pinDirection)
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	31 f0       	breq	.+12     	; 0x2ba <DIO_setPortDirection+0x40>
 2ae:	18 f0       	brcs	.+6      	; 0x2b6 <DIO_setPortDirection+0x3c>
 2b0:	62 30       	cpi	r22, 0x02	; 2
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <DIO_setPortDirection+0x46>
 2b4:	08 95       	ret
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 2b6:	1c 92       	st	X, r1
        break;
 2b8:	08 95       	ret
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	8c 93       	st	X, r24
        break;
 2be:	08 95       	ret
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 2c4:	1c 92       	st	X, r1
 2c6:	08 95       	ret

000002c8 <DIO_setPortValue>:
}

void DIO_setPortValue(EN_PortNumber_t portNum,uint8_t value) 
{
	/* select PORTX Register */
    volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	fc 01       	movw	r30, r24
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	e8 0f       	add	r30, r24
 2d2:	f9 1f       	adc	r31, r25
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	ef 59       	subi	r30, 0x9F	; 159
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	01 90       	ld	r0, Z+
 2de:	f0 81       	ld	r31, Z
 2e0:	e0 2d       	mov	r30, r0
	/* set the port value */	
    *PORTX = value ;
 2e2:	60 83       	st	Z, r22
 2e4:	08 95       	ret

000002e6 <GIE_Enable>:
#include "LIB/STD_TYPES.h"
#include "GIE_INT.h"
#include "GIE_REG.h"


inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 2e6:	8f b7       	in	r24, 0x3f	; 63
 2e8:	80 68       	ori	r24, 0x80	; 128
 2ea:	8f bf       	out	0x3f, r24	; 63
 2ec:	08 95       	ret

000002ee <main>:
#endif

int main(void)
{
	/* Set ADC0 pin to input  */
	DIO_setPinDirection(PA0,INPUT) ;
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_setPinDirection>
	/* set two ports as outputs */
	DIO_setPortDirection(PORTB,OUTPUT) ;
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_setPortDirection>
	DIO_setPortDirection(PORTC,OUTPUT) ; 
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 3d 01 	call	0x27a	; 0x27a <DIO_setPortDirection>
	
	GIE_Enable() ;
 306:	0e 94 73 01 	call	0x2e6	; 0x2e6 <GIE_Enable>

	/* init ADC  */
	ADC_Init(AREF,prescaller128) ; 
 30a:	67 e0       	ldi	r22, 0x07	; 7
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
 	while (1) 
    {
		#if debug == sync
		/* if ADC conversion is ok*/
		if (ADC_Read(ADC0,&reading)==ADC_OK)
 312:	6e e7       	ldi	r22, 0x7E	; 126
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_Read>
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	c9 f7       	brne	.-14     	; 0x312 <main+0x24>
		{
			/*Write the first 8 bit to portB*/
			DIO_setPortValue(PORTB,reading) ;
 320:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <reading>
 324:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_setPortValue>
			/*get the remained 2 bit and write it to portC*/
			DIO_setPortValue(PORTC,reading>>8) ;
 328:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <reading+0x1>
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <DIO_setPortValue>
 332:	ef cf       	rjmp	.-34     	; 0x312 <main+0x24>

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
