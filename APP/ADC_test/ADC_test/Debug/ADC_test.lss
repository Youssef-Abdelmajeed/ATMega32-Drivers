
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f45  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f5  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060f  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000561  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000582  00000000  00000000  00002829  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002dab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  7a:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "ADC_INT.h"
#include "ADC_REG.h"

inline void ADC_Start (void) 
{
    setBit(ADCSRA,ADCSRA_ADEN) ; 
  82:	96 b1       	in	r25, 0x06	; 6
  84:	90 68       	ori	r25, 0x80	; 128
  86:	96 b9       	out	0x06, r25	; 6
} 

inline void ADC_SelectRefMode(EN_ADC_Ref_t refmode) 
{
    /* clear reference selection bits 6, 7  */
    ADMUX &=  0X3F ; 
  88:	97 b1       	in	r25, 0x07	; 7
  8a:	9f 73       	andi	r25, 0x3F	; 63
  8c:	97 b9       	out	0x07, r25	; 7
    /* set ADC reference mode */
    ADMUX |= (refmode<<6) ;
  8e:	27 b1       	in	r18, 0x07	; 7
  90:	30 e4       	ldi	r19, 0x40	; 64
  92:	83 9f       	mul	r24, r19
  94:	c0 01       	movw	r24, r0
  96:	11 24       	eor	r1, r1
  98:	82 2b       	or	r24, r18
  9a:	87 b9       	out	0x07, r24	; 7
}

inline void ADC_SelectPrescaller(uint8_t prescaller)
{
    /* limit selection to  8 (0 - 7) */
    prescaller &= 0x07 ;
  9c:	67 70       	andi	r22, 0x07	; 7

    /* clear prescaller selection bits */
    ADCSRA &= 0XF8 ;
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	88 7f       	andi	r24, 0xF8	; 248
  a2:	86 b9       	out	0x06, r24	; 6

    /* set prescaller value */
    ADCSRA |= prescaller ;
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	68 2b       	or	r22, r24
  a8:	66 b9       	out	0x06, r22	; 6

    /* Select ADC Clock prescaller */
    ADC_SelectPrescaller(prescaller) ; 

    return ADC_OK ;
}
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	08 95       	ret

000000ae <ADC_Read>:
uint8_t ADC_Read(uint8_t channel,uint16_t *adcReading)
{
    /* initialing counter to add timeout option to ADC polling */
    uint32_t counter = 0 ; 
    /* set the result register to be in right adjust mode */
    clearBit(ADMUX,ADMUX_ADLAR) ; 
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	9f 7d       	andi	r25, 0xDF	; 223
  b2:	97 b9       	out	0x07, r25	; 7
}

inline void  ADC_SelectChannel(uint8_t channel)
{
    /* limit selection to  8 (0 - 7) */
    channel &= 0x07 ; 
  b4:	87 70       	andi	r24, 0x07	; 7

    /* clear channel selection bits 0 - 3 */
    ADMUX &=  0XF0 ; 
  b6:	97 b1       	in	r25, 0x07	; 7
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	97 b9       	out	0x07, r25	; 7

    /* select a channel */
    ADMUX |= channel ;
  bc:	97 b1       	in	r25, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	87 b9       	out	0x07, r24	; 7

    /* select the channel to read from */
    ADC_SelectChannel(channel) ;
   
    /* Start conversion */
    setBit(ADCSRA,ADCSRA_ADSC) ; 
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6

/* Synchronous mode functions */
uint8_t ADC_Read(uint8_t channel,uint16_t *adcReading)
{
    /* initialing counter to add timeout option to ADC polling */
    uint32_t counter = 0 ; 
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	dc 01       	movw	r26, r24
   
    /* Start conversion */
    setBit(ADCSRA,ADCSRA_ADSC) ; 
   
    /* polling on ADC Interrupt flag or ADC timeout */
    while ((getBit(ADCSRA,ADCSRA_ADIF)!= 1 )&&(counter!=ADC_TIMEOUT)) 
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <ADC_Read+0x28>
    {
        counter++;
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	a1 1d       	adc	r26, r1
  d4:	b1 1d       	adc	r27, r1
   
    /* Start conversion */
    setBit(ADCSRA,ADCSRA_ADSC) ; 
   
    /* polling on ADC Interrupt flag or ADC timeout */
    while ((getBit(ADCSRA,ADCSRA_ADIF)!= 1 )&&(counter!=ADC_TIMEOUT)) 
  d6:	34 99       	sbic	0x06, 4	; 6
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <ADC_Read+0x38>
  da:	80 35       	cpi	r24, 0x50	; 80
  dc:	23 ec       	ldi	r18, 0xC3	; 195
  de:	92 07       	cpc	r25, r18
  e0:	a1 05       	cpc	r26, r1
  e2:	b1 05       	cpc	r27, r1
  e4:	a9 f7       	brne	.-22     	; 0xd0 <ADC_Read+0x22>
    {
        counter++;
    }
    if(counter==ADC_TIMEOUT)
  e6:	80 35       	cpi	r24, 0x50	; 80
  e8:	93 4c       	sbci	r25, 0xC3	; 195
  ea:	a1 05       	cpc	r26, r1
  ec:	b1 05       	cpc	r27, r1
  ee:	51 f0       	breq	.+20     	; 0x104 <ADC_Read+0x56>
        return ADC_TIMEOUT_EXCEEDED ;
    }
    else
    {
        /* clear ADC Interrupt flag */
        setBit(ADCSRA,ADCSRA_ADIF) ;
  f0:	86 b1       	in	r24, 0x06	; 6
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	86 b9       	out	0x06, r24	; 6
    
        /* update ADC reading */ 
        *adcReading = ADC_Result ; 
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	fb 01       	movw	r30, r22
  fc:	91 83       	std	Z+1, r25	; 0x01
  fe:	80 83       	st	Z, r24
    }
    /* everything is working ok flag */
    return ADC_OK ;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
        counter++;
    }
    if(counter==ADC_TIMEOUT)
    {
        /* return exceeded timeout flag */
        return ADC_TIMEOUT_EXCEEDED ;
 104:	82 e0       	ldi	r24, 0x02	; 2
        *adcReading = ADC_Result ; 
    }
    /* everything is working ok flag */
    return ADC_OK ;

}
 106:	08 95       	ret

00000108 <DIO_setPinDirection>:
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PINX Register */ 
	volatile uint8_t * PINX = (DIO_Registers[port][2]);
   /* return pin value */
    return getBit((*PINX) ,pin);
}
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	70 f0       	brcs	.+28     	; 0x128 <DIO_setPinDirection+0x20>
 10c:	28 ef       	ldi	r18, 0xF8	; 248
 10e:	28 0f       	add	r18, r24
 110:	28 30       	cpi	r18, 0x08	; 8
 112:	58 f0       	brcs	.+22     	; 0x12a <DIO_setPinDirection+0x22>
 114:	20 ef       	ldi	r18, 0xF0	; 240
 116:	28 0f       	add	r18, r24
 118:	28 30       	cpi	r18, 0x08	; 8
 11a:	38 f0       	brcs	.+14     	; 0x12a <DIO_setPinDirection+0x22>
 11c:	28 ee       	ldi	r18, 0xE8	; 232
 11e:	28 0f       	add	r18, r24
 120:	28 30       	cpi	r18, 0x08	; 8
 122:	18 f0       	brcs	.+6      	; 0x12a <DIO_setPinDirection+0x22>
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	01 c0       	rjmp	.+2      	; 0x12a <DIO_setPinDirection+0x22>
 128:	28 2f       	mov	r18, r24
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	68 f0       	brcs	.+26     	; 0x148 <DIO_setPinDirection+0x40>
 12e:	98 ef       	ldi	r25, 0xF8	; 248
 130:	98 0f       	add	r25, r24
 132:	98 30       	cpi	r25, 0x08	; 8
 134:	58 f0       	brcs	.+22     	; 0x14c <DIO_setPinDirection+0x44>
 136:	90 ef       	ldi	r25, 0xF0	; 240
 138:	98 0f       	add	r25, r24
 13a:	98 30       	cpi	r25, 0x08	; 8
 13c:	48 f0       	brcs	.+18     	; 0x150 <DIO_setPinDirection+0x48>
 13e:	88 51       	subi	r24, 0x18	; 24
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	40 f4       	brcc	.+16     	; 0x154 <DIO_setPinDirection+0x4c>
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	07 c0       	rjmp	.+14     	; 0x156 <DIO_setPinDirection+0x4e>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <DIO_setPinDirection+0x4e>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	03 c0       	rjmp	.+6      	; 0x156 <DIO_setPinDirection+0x4e>
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	01 c0       	rjmp	.+2      	; 0x156 <DIO_setPinDirection+0x4e>
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	df 01       	movw	r26, r30
 160:	a8 0f       	add	r26, r24
 162:	b9 1f       	adc	r27, r25
 164:	aa 0f       	add	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	a0 5a       	subi	r26, 0xA0	; 160
 16a:	bf 4f       	sbci	r27, 0xFF	; 255
 16c:	12 96       	adiw	r26, 0x02	; 2
 16e:	0d 90       	ld	r0, X+
 170:	bc 91       	ld	r27, X
 172:	a0 2d       	mov	r26, r0
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	e0 5a       	subi	r30, 0xA0	; 160
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	01 90       	ld	r0, Z+
 182:	f0 81       	ld	r31, Z
 184:	e0 2d       	mov	r30, r0
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	81 f0       	breq	.+32     	; 0x1aa <DIO_setPinDirection+0xa2>
 18a:	18 f0       	brcs	.+6      	; 0x192 <DIO_setPinDirection+0x8a>
 18c:	62 30       	cpi	r22, 0x02	; 2
 18e:	c1 f0       	breq	.+48     	; 0x1c0 <DIO_setPinDirection+0xb8>
 190:	08 95       	ret
 192:	3c 91       	ld	r19, X
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_setPinDirection+0x96>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	2a 95       	dec	r18
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_setPinDirection+0x92>
 1a2:	80 95       	com	r24
 1a4:	83 23       	and	r24, r19
 1a6:	8c 93       	st	X, r24
 1a8:	08 95       	ret
 1aa:	3c 91       	ld	r19, X
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_setPinDirection+0xae>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	2a 95       	dec	r18
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_setPinDirection+0xaa>
 1ba:	83 2b       	or	r24, r19
 1bc:	8c 93       	st	X, r24
 1be:	08 95       	ret
 1c0:	30 81       	ld	r19, Z
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_setPinDirection+0xc4>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	2a 95       	dec	r18
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_setPinDirection+0xc0>
 1d0:	93 2f       	mov	r25, r19
 1d2:	98 2b       	or	r25, r24
 1d4:	90 83       	st	Z, r25
 1d6:	9c 91       	ld	r25, X
 1d8:	80 95       	com	r24
 1da:	89 23       	and	r24, r25
 1dc:	8c 93       	st	X, r24
 1de:	08 95       	ret

000001e0 <DIO_setPortDirection>:

void DIO_setPortDirection(EN_PortNumber_t portNum,EN_Directions_t pinDirection) 
{
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[portNum][1]) ;
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	df 01       	movw	r26, r30
 1ea:	a8 0f       	add	r26, r24
 1ec:	b9 1f       	adc	r27, r25
 1ee:	aa 0f       	add	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	a0 5a       	subi	r26, 0xA0	; 160
 1f4:	bf 4f       	sbci	r27, 0xFF	; 255
 1f6:	12 96       	adiw	r26, 0x02	; 2
 1f8:	0d 90       	ld	r0, X+
 1fa:	bc 91       	ld	r27, X
 1fc:	a0 2d       	mov	r26, r0
	/* select PORTX Register */
	volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 1fe:	e8 0f       	add	r30, r24
 200:	f9 1f       	adc	r31, r25
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e0 5a       	subi	r30, 0xA0	; 160
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	01 90       	ld	r0, Z+
 20c:	f0 81       	ld	r31, Z
 20e:	e0 2d       	mov	r30, r0
	
    switch (pinDirection)
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	31 f0       	breq	.+12     	; 0x220 <DIO_setPortDirection+0x40>
 214:	18 f0       	brcs	.+6      	; 0x21c <DIO_setPortDirection+0x3c>
 216:	62 30       	cpi	r22, 0x02	; 2
 218:	31 f0       	breq	.+12     	; 0x226 <DIO_setPortDirection+0x46>
 21a:	08 95       	ret
    {
    case INPUT:
        /* set the whole port as input */
        *DDRX = 0X00 ; 
 21c:	1c 92       	st	X, r1
        break;
 21e:	08 95       	ret
    case OUTPUT:
        /* set the whole port as output */
       *DDRX= 0XFF ; 
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	8c 93       	st	X, r24
        break;
 224:	08 95       	ret
    case INPUT_PULLUP:
        /* active pull up resistor for the whole port */
       *PORTX =0xFF; 
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	80 83       	st	Z, r24
        /* set the whole port as input */
      *DDRX = 0X00 ; 
 22a:	1c 92       	st	X, r1
 22c:	08 95       	ret

0000022e <DIO_setPortValue>:
}

void DIO_setPortValue(EN_PortNumber_t portNum,uint8_t value) 
{
	/* select PORTX Register */
    volatile uint8_t  * PORTX = (DIO_Registers[portNum][0]) ;
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fc 01       	movw	r30, r24
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	e8 0f       	add	r30, r24
 238:	f9 1f       	adc	r31, r25
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	e0 5a       	subi	r30, 0xA0	; 160
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	01 90       	ld	r0, Z+
 244:	f0 81       	ld	r31, Z
 246:	e0 2d       	mov	r30, r0
	/* set the port value */	
    *PORTX = value ;
 248:	60 83       	st	Z, r22
 24a:	08 95       	ret

0000024c <main>:
#include "DIO_INT.h"
#include "ADC_INT.h"


int main(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <main+0x6>
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
	/* Set ADC0 pin to input  */
	DIO_setPinDirection(PA0,INPUT) ;
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	0e 94 84 00 	call	0x108	; 0x108 <DIO_setPinDirection>
	/* set two ports as outputs */
	DIO_setPortDirection(PORTB,OUTPUT) ;
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_setPortDirection>
	DIO_setPortDirection(PORTC,OUTPUT) ; 
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_setPortDirection>
	/* init ADC  */
	ADC_Init(AREF,prescaller128) ; 
 26e:	67 e0       	ldi	r22, 0x07	; 7
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	uint16_t reading =0 ; 
 276:	1a 82       	std	Y+2, r1	; 0x02
 278:	19 82       	std	Y+1, r1	; 0x01
 	while (1) 
    {
		if (ADC_Read(ADC0,&reading)==ADC_OK)
 27a:	be 01       	movw	r22, r28
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 57 00 	call	0xae	; 0xae <ADC_Read>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	c1 f7       	brne	.-16     	; 0x27a <main+0x2e>
		{
			DIO_setPortValue(PORTB,reading) ;
 28a:	69 81       	ldd	r22, Y+1	; 0x01
 28c:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_setPortValue>
			DIO_setPortValue(PORTC,reading>>8) ;
 290:	6a 81       	ldd	r22, Y+2	; 0x02
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_setPortValue>
 298:	f0 cf       	rjmp	.-32     	; 0x27a <main+0x2e>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
