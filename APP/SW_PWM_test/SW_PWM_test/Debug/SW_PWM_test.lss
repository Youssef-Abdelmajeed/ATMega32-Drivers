
SW_PWM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000004ca  0000055e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800078  00800078  00000576  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001115  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082a  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fe  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00002724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068e  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000825  00000000  00000000  0000306e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_4>
  14:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_10>
  2c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  8a:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	70 f0       	brcs	.+28     	; 0xb2 <DIO_setPinDirection+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
  96:	28 ef       	ldi	r18, 0xF8	; 248
  98:	28 0f       	add	r18, r24
  9a:	28 30       	cpi	r18, 0x08	; 8
  9c:	58 f0       	brcs	.+22     	; 0xb4 <DIO_setPinDirection+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
  9e:	20 ef       	ldi	r18, 0xF0	; 240
  a0:	28 0f       	add	r18, r24
  a2:	28 30       	cpi	r18, 0x08	; 8
  a4:	38 f0       	brcs	.+14     	; 0xb4 <DIO_setPinDirection+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
  a6:	28 ee       	ldi	r18, 0xE8	; 232
  a8:	28 0f       	add	r18, r24
  aa:	28 30       	cpi	r18, 0x08	; 8
  ac:	18 f0       	brcs	.+6      	; 0xb4 <DIO_setPinDirection+0x22>
	return NC ; 
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <DIO_setPinDirection+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
  b2:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	68 f0       	brcs	.+26     	; 0xd2 <DIO_setPinDirection+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  b8:	98 ef       	ldi	r25, 0xF8	; 248
  ba:	98 0f       	add	r25, r24
  bc:	98 30       	cpi	r25, 0x08	; 8
  be:	58 f0       	brcs	.+22     	; 0xd6 <DIO_setPinDirection+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  c0:	90 ef       	ldi	r25, 0xF0	; 240
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	48 f0       	brcs	.+18     	; 0xda <DIO_setPinDirection+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
  c8:	88 51       	subi	r24, 0x18	; 24
  ca:	88 30       	cpi	r24, 0x08	; 8
  cc:	40 f4       	brcc	.+16     	; 0xde <DIO_setPinDirection+0x4c>
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <DIO_setPinDirection+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	05 c0       	rjmp	.+10     	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <DIO_setPinDirection+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
  de:	8f ef       	ldi	r24, 0xFF	; 255
{
	
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select DDRX Register */
	volatile uint8_t  * DDRX =  (DIO_Registers[port][1]) ;
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	df 01       	movw	r26, r30
  ea:	a8 0f       	add	r26, r24
  ec:	b9 1f       	adc	r27, r25
  ee:	aa 0f       	add	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	a0 5a       	subi	r26, 0xA0	; 160
  f4:	bf 4f       	sbci	r27, 0xFF	; 255
  f6:	12 96       	adiw	r26, 0x02	; 2
  f8:	0d 90       	ld	r0, X+
  fa:	bc 91       	ld	r27, X
  fc:	a0 2d       	mov	r26, r0
	/* select PORTX Register */ 
	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
  fe:	e8 0f       	add	r30, r24
 100:	f9 1f       	adc	r31, r25
 102:	ee 0f       	add	r30, r30
 104:	ff 1f       	adc	r31, r31
 106:	e0 5a       	subi	r30, 0xA0	; 160
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
    switch (pinDirection)
 110:	61 30       	cpi	r22, 0x01	; 1
 112:	81 f0       	breq	.+32     	; 0x134 <DIO_setPinDirection+0xa2>
 114:	18 f0       	brcs	.+6      	; 0x11c <DIO_setPinDirection+0x8a>
 116:	62 30       	cpi	r22, 0x02	; 2
 118:	c1 f0       	breq	.+48     	; 0x14a <DIO_setPinDirection+0xb8>
 11a:	08 95       	ret
    {
    case INPUT:
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 11c:	3c 91       	ld	r19, X
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_setPinDirection+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_setPinDirection+0x92>
 12c:	80 95       	com	r24
 12e:	83 23       	and	r24, r19
 130:	8c 93       	st	X, r24
        break;
 132:	08 95       	ret
    case OUTPUT:
        /* set PORTX to 1 to set as output */
        setBit((*DDRX),pin) ;
 134:	3c 91       	ld	r19, X
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xaa>
 144:	83 2b       	or	r24, r19
 146:	8c 93       	st	X, r24
        break;
 148:	08 95       	ret
    case INPUT_PULLUP:
        /* set PORTX to 1 to active the pull up resistor */
        setBit((*PORTX),pin) ;  
 14a:	30 81       	ld	r19, Z
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_setPinDirection+0xc4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_setPinDirection+0xc0>
 15a:	93 2f       	mov	r25, r19
 15c:	98 2b       	or	r25, r24
 15e:	90 83       	st	Z, r25
        /* set DDRX to 0 to set as input  */
        clearBit((*DDRX),pin) ;
 160:	9c 91       	ld	r25, X
 162:	80 95       	com	r24
 164:	89 23       	and	r24, r25
 166:	8c 93       	st	X, r24
 168:	08 95       	ret

0000016a <DIO_setPinValue>:
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	70 f0       	brcs	.+28     	; 0x18a <DIO_setPinValue+0x20>
    else if (pinnum>=8  && pinnum<=15) return   (pinnum-8)  ; 
 16e:	28 ef       	ldi	r18, 0xF8	; 248
 170:	28 0f       	add	r18, r24
 172:	28 30       	cpi	r18, 0x08	; 8
 174:	58 f0       	brcs	.+22     	; 0x18c <DIO_setPinValue+0x22>
    else if (pinnum>=16 && pinnum<=23) return   (pinnum-16) ;
 176:	20 ef       	ldi	r18, 0xF0	; 240
 178:	28 0f       	add	r18, r24
 17a:	28 30       	cpi	r18, 0x08	; 8
 17c:	38 f0       	brcs	.+14     	; 0x18c <DIO_setPinValue+0x22>
    else if (pinnum>=24 && pinnum<=31) return   (pinnum-24) ;
 17e:	28 ee       	ldi	r18, 0xE8	; 232
 180:	28 0f       	add	r18, r24
 182:	28 30       	cpi	r18, 0x08	; 8
 184:	18 f0       	brcs	.+6      	; 0x18c <DIO_setPinValue+0x22>
	return NC ; 
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	01 c0       	rjmp	.+2      	; 0x18c <DIO_setPinValue+0x22>
 * @param pinnum pin name
 * @return uint8_t pin number 
 */
inline static uint8_t getPinNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    pinnum     ; 
 18a:	28 2f       	mov	r18, r24
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	68 f0       	brcs	.+26     	; 0x1aa <DIO_setPinValue+0x40>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 190:	98 ef       	ldi	r25, 0xF8	; 248
 192:	98 0f       	add	r25, r24
 194:	98 30       	cpi	r25, 0x08	; 8
 196:	58 f0       	brcs	.+22     	; 0x1ae <DIO_setPinValue+0x44>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 198:	90 ef       	ldi	r25, 0xF0	; 240
 19a:	98 0f       	add	r25, r24
 19c:	98 30       	cpi	r25, 0x08	; 8
 19e:	48 f0       	brcs	.+18     	; 0x1b2 <DIO_setPinValue+0x48>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
 1a0:	88 51       	subi	r24, 0x18	; 24
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	40 f4       	brcc	.+16     	; 0x1b6 <DIO_setPinValue+0x4c>
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <DIO_setPinValue+0x4e>
 * @param pinnum pin name
 * @return uint8_t port number 
 */
inline static uint8_t getPortNumber(EN_PinNumber_t pinnum)
{
    if(pinnum>=0 && pinnum<=7)         return    PORTA  ; 
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=8  && pinnum<=15) return    PORTB  ; 
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=16 && pinnum<=23) return    PORTC  ;
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <DIO_setPinValue+0x4e>
    else if (pinnum>=24 && pinnum<=31) return    PORTD  ;
	return NC ;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
void DIO_setPinValue(EN_PinNumber_t pinNum, EN_Values_t value) 
{
    /* get pin number and port number */
    uint8_t pin = getPinNumber(pinNum) , port = getPortNumber(pinNum) ;
	/* select PORTX Register */
   	volatile uint8_t  * PORTX = (DIO_Registers[port][0]) ;
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	fc 01       	movw	r30, r24
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e8 0f       	add	r30, r24
 1c2:	f9 1f       	adc	r31, r25
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	01 90       	ld	r0, Z+
 1ce:	f0 81       	ld	r31, Z
 1d0:	e0 2d       	mov	r30, r0
    switch (value)
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	81 f0       	breq	.+32     	; 0x1f6 <DIO_setPinValue+0x8c>
 1d6:	18 f0       	brcs	.+6      	; 0x1de <DIO_setPinValue+0x74>
 1d8:	62 30       	cpi	r22, 0x02	; 2
 1da:	c1 f0       	breq	.+48     	; 0x20c <DIO_setPinValue+0xa2>
 1dc:	08 95       	ret
    {
        
    case LOW:
        /* set the selected pin to LOW */
       clearBit((*PORTX),pin) ;
 1de:	30 81       	ld	r19, Z
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinValue+0x80>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinValue+0x7c>
 1ee:	80 95       	com	r24
 1f0:	83 23       	and	r24, r19
 1f2:	80 83       	st	Z, r24
        break;    
 1f4:	08 95       	ret
    case HIGH:
        /* set the selected pin to HIGH */
        setBit((*PORTX),pin) ;
 1f6:	30 81       	ld	r19, Z
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_setPinValue+0x98>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_setPinValue+0x94>
 206:	83 2b       	or	r24, r19
 208:	80 83       	st	Z, r24
        break;
 20a:	08 95       	ret
    case TOGGLE:
        /*TOGGLE the selected pin */
        toggleBit((*PORTX),pin) ;
 20c:	30 81       	ld	r19, Z
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_setPinValue+0xae>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_setPinValue+0xaa>
 21c:	83 27       	eor	r24, r19
 21e:	80 83       	st	Z, r24
 220:	08 95       	ret

00000222 <GIE_Enable>:

#include "GIE_INT.h"
#include "GIE_REG.h"


inline void GIE_Enable(void)  {SREG |=  (1<<SREG_I) ;}
 222:	8f b7       	in	r24, 0x3f	; 63
 224:	80 68       	ori	r24, 0x80	; 128
 226:	8f bf       	out	0x3f, r24	; 63
 228:	08 95       	ret

0000022a <do_fake_pwm>:
}

void do_fake_pwm(void)
{
	static uint8_t counter = 0 ; 
	counter++ ; 
 22a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
	if (counter==2)
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	29 f4       	brne	.+10     	; 0x242 <do_fake_pwm+0x18>
	{
		DIO_setPinValue(PIN,LOW) ; 
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
 240:	08 95       	ret
	}
	else if (counter==10)
 242:	8a 30       	cpi	r24, 0x0A	; 10
 244:	31 f4       	brne	.+12     	; 0x252 <do_fake_pwm+0x28>
	{
		DIO_setPinValue(PIN,HIGH) ;
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
		counter = 0 ;  
 24e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__data_end>
 252:	08 95       	ret

00000254 <main>:

void do_fake_pwm(void); 

int main(void)
{
    DIO_setPinDirection(PIN,OUTPUT) ; 
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinValue(PIN,HIGH) ; 
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_setPinValue>
	GIE_Enable() ; 
 264:	0e 94 11 01 	call	0x222	; 0x222 <GIE_Enable>
	Timer_Init(USE_TIMER,prescaler8,CTC) ;
 268:	42 e0       	ldi	r20, 0x02	; 2
 26a:	62 e0       	ldi	r22, 0x02	; 2
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 8f 01 	call	0x31e	; 0x31e <Timer_Init>
	Timer_SetCTC_Callback(USE_TIMER,&do_fake_pwm) ;  
 272:	65 e1       	ldi	r22, 0x15	; 21
 274:	71 e0       	ldi	r23, 0x01	; 1
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 9c 01 	call	0x338	; 0x338 <Timer_SetCTC_Callback>
	Timer_SetCTCRegister(USE_TIMER,250) ; 
 27c:	6a ef       	ldi	r22, 0xFA	; 250
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 b6 01 	call	0x36c	; 0x36c <Timer_SetCTCRegister>
 284:	ff cf       	rjmp	.-2      	; 0x284 <main+0x30>

00000286 <Timer_SetPrescaller>:
        {
        case TIMER0:
            TCNT0= value ; 
            break;
        case TIMER2:
            TCNT2= value ; 
 286:	88 23       	and	r24, r24
 288:	19 f0       	breq	.+6      	; 0x290 <Timer_SetPrescaller+0xa>
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	31 f0       	breq	.+12     	; 0x29a <Timer_SetPrescaller+0x14>
 28e:	08 95       	ret
 290:	83 b7       	in	r24, 0x33	; 51
 292:	88 7f       	andi	r24, 0xF8	; 248
 294:	68 2b       	or	r22, r24
 296:	63 bf       	out	0x33, r22	; 51
 298:	08 95       	ret
 29a:	85 b5       	in	r24, 0x25	; 37
 29c:	88 7f       	andi	r24, 0xF8	; 248
 29e:	68 2b       	or	r22, r24
 2a0:	65 bd       	out	0x25, r22	; 37
 2a2:	08 95       	ret

000002a4 <Timer_SetWaveMode>:
 2a4:	88 23       	and	r24, r24
 2a6:	19 f0       	breq	.+6      	; 0x2ae <Timer_SetWaveMode+0xa>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	e9 f0       	breq	.+58     	; 0x2e6 <Timer_SetWaveMode+0x42>
 2ac:	08 95       	ret
 2ae:	83 b7       	in	r24, 0x33	; 51
 2b0:	87 7b       	andi	r24, 0xB7	; 183
 2b2:	a6 2f       	mov	r26, r22
 2b4:	a1 70       	andi	r26, 0x01	; 1
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	00 24       	eor	r0, r0
 2ba:	b6 95       	lsr	r27
 2bc:	a7 95       	ror	r26
 2be:	07 94       	ror	r0
 2c0:	b6 95       	lsr	r27
 2c2:	a7 95       	ror	r26
 2c4:	07 94       	ror	r0
 2c6:	ba 2f       	mov	r27, r26
 2c8:	a0 2d       	mov	r26, r0
 2ca:	61 fb       	bst	r22, 1
 2cc:	44 27       	eor	r20, r20
 2ce:	40 f9       	bld	r20, 0
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	4a 2b       	or	r20, r26
 2e0:	48 2b       	or	r20, r24
 2e2:	43 bf       	out	0x33, r20	; 51
 2e4:	08 95       	ret
 2e6:	85 b5       	in	r24, 0x25	; 37
 2e8:	87 7b       	andi	r24, 0xB7	; 183
 2ea:	e6 2f       	mov	r30, r22
 2ec:	e1 70       	andi	r30, 0x01	; 1
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	00 24       	eor	r0, r0
 2f2:	f6 95       	lsr	r31
 2f4:	e7 95       	ror	r30
 2f6:	07 94       	ror	r0
 2f8:	f6 95       	lsr	r31
 2fa:	e7 95       	ror	r30
 2fc:	07 94       	ror	r0
 2fe:	fe 2f       	mov	r31, r30
 300:	e0 2d       	mov	r30, r0
 302:	61 fb       	bst	r22, 1
 304:	22 27       	eor	r18, r18
 306:	20 f9       	bld	r18, 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	2e 2b       	or	r18, r30
 318:	28 2b       	or	r18, r24
 31a:	25 bd       	out	0x25, r18	; 37
 31c:	08 95       	ret

0000031e <Timer_Init>:
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	c8 2f       	mov	r28, r24
 324:	d4 2f       	mov	r29, r20
 326:	0e 94 43 01 	call	0x286	; 0x286 <Timer_SetPrescaller>
 32a:	6d 2f       	mov	r22, r29
 32c:	8c 2f       	mov	r24, r28
 32e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Timer_SetWaveMode>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <Timer_SetCTC_Callback>:
 338:	61 15       	cp	r22, r1
 33a:	71 05       	cpc	r23, r1
 33c:	b1 f0       	breq	.+44     	; 0x36a <Timer_SetCTC_Callback+0x32>
 33e:	88 23       	and	r24, r24
 340:	19 f0       	breq	.+6      	; 0x348 <Timer_SetCTC_Callback+0x10>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	51 f0       	breq	.+20     	; 0x35a <Timer_SetCTC_Callback+0x22>
 346:	08 95       	ret
 348:	89 b7       	in	r24, 0x39	; 57
 34a:	82 60       	ori	r24, 0x02	; 2
 34c:	8e 7f       	andi	r24, 0xFE	; 254
 34e:	89 bf       	out	0x39, r24	; 57
 350:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <TIMERS_CTC_ISR+0x1>
 354:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <TIMERS_CTC_ISR>
 358:	08 95       	ret
 35a:	89 b7       	in	r24, 0x39	; 57
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	8f 7b       	andi	r24, 0xBF	; 191
 360:	89 bf       	out	0x39, r24	; 57
 362:	70 93 7c 00 	sts	0x007C, r23	; 0x80007c <TIMERS_CTC_ISR+0x3>
 366:	60 93 7b 00 	sts	0x007B, r22	; 0x80007b <TIMERS_CTC_ISR+0x2>
 36a:	08 95       	ret

0000036c <Timer_SetCTCRegister>:
        }
}
void Timer_SetCTCRegister(Timers_t timer,uint8_t value)
{
     /* set value to the corresponding Timer CTC register  */
     switch (timer)
 36c:	88 23       	and	r24, r24
 36e:	19 f0       	breq	.+6      	; 0x376 <Timer_SetCTCRegister+0xa>
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	19 f0       	breq	.+6      	; 0x37a <Timer_SetCTCRegister+0xe>
 374:	08 95       	ret
        {
        case TIMER0:
            OCR0= value ; 
 376:	6c bf       	out	0x3c, r22	; 60
            break;
 378:	08 95       	ret

        case TIMER2:
            OCR2= value ; 
 37a:	63 bd       	out	0x23, r22	; 35
 37c:	08 95       	ret

0000037e <__vector_11>:
}

/* Timer0 Overflow ISR */
void __vector_11 (void) __attribute__ ((signal,used)) ; 
void __vector_11 (void) 
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	5f 93       	push	r21
 390:	6f 93       	push	r22
 392:	7f 93       	push	r23
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	af 93       	push	r26
 39a:	bf 93       	push	r27
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[0] != ((void *)0))
 3a0:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <TIMERS_NORMAL_ISR>
 3a4:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <TIMERS_NORMAL_ISR+0x1>
 3a8:	30 97       	sbiw	r30, 0x00	; 0
 3aa:	09 f0       	breq	.+2      	; 0x3ae <__vector_11+0x30>
    {
        TIMERS_NORMAL_ISR[0]() ;
 3ac:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 3ae:	ff 91       	pop	r31
 3b0:	ef 91       	pop	r30
 3b2:	bf 91       	pop	r27
 3b4:	af 91       	pop	r26
 3b6:	9f 91       	pop	r25
 3b8:	8f 91       	pop	r24
 3ba:	7f 91       	pop	r23
 3bc:	6f 91       	pop	r22
 3be:	5f 91       	pop	r21
 3c0:	4f 91       	pop	r20
 3c2:	3f 91       	pop	r19
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_10>:

/* Timer0 CompareMatch ISR */
void __vector_10 (void) __attribute__ ((signal,used)) ; 
void __vector_10 (void) 
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[0] != ((void *)0))
 3f2:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <TIMERS_CTC_ISR>
 3f6:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <TIMERS_CTC_ISR+0x1>
 3fa:	30 97       	sbiw	r30, 0x00	; 0
 3fc:	09 f0       	breq	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
    {
        TIMERS_CTC_ISR[0]() ;
 3fe:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	bf 91       	pop	r27
 406:	af 91       	pop	r26
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	7f 91       	pop	r23
 40e:	6f 91       	pop	r22
 410:	5f 91       	pop	r21
 412:	4f 91       	pop	r20
 414:	3f 91       	pop	r19
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_5>:

/* Timer2 Overflow ISR */
void __vector_5 (void) __attribute__ ((signal,used)) ; 
void __vector_5 (void) 
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
    if(TIMERS_NORMAL_ISR[1] != ((void *)0))
 444:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <TIMERS_NORMAL_ISR+0x2>
 448:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <TIMERS_NORMAL_ISR+0x3>
 44c:	30 97       	sbiw	r30, 0x00	; 0
 44e:	09 f0       	breq	.+2      	; 0x452 <__vector_5+0x30>
    {
        TIMERS_NORMAL_ISR[1]() ;
 450:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_4>:

/* Timer2 CompareMatch ISR */
void __vector_4 (void) __attribute__ ((signal,used)) ; 
void __vector_4 (void) 
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	7f 93       	push	r23
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	af 93       	push	r26
 490:	bf 93       	push	r27
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
    if(TIMERS_CTC_ISR[1] != ((void *)0))
 496:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <TIMERS_CTC_ISR+0x2>
 49a:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <TIMERS_CTC_ISR+0x3>
 49e:	30 97       	sbiw	r30, 0x00	; 0
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__vector_4+0x30>
    {
        TIMERS_CTC_ISR[1]() ;
 4a2:	09 95       	icall
    }
    else
    {
        /* do nothing */
    }
}
 4a4:	ff 91       	pop	r31
 4a6:	ef 91       	pop	r30
 4a8:	bf 91       	pop	r27
 4aa:	af 91       	pop	r26
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	7f 91       	pop	r23
 4b2:	6f 91       	pop	r22
 4b4:	5f 91       	pop	r21
 4b6:	4f 91       	pop	r20
 4b8:	3f 91       	pop	r19
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <_exit>:
 4c6:	f8 94       	cli

000004c8 <__stop_program>:
 4c8:	ff cf       	rjmp	.-2      	; 0x4c8 <__stop_program>
